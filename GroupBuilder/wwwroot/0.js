(this["webpackJsonp"] = this["webpackJsonp"] || []).push([[0],{

/***/ "./node_modules/vee-validate/dist/vee-validate.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/vee-validate/dist/vee-validate.esm.js ***!
  \************************************************************/
/*! exports provided: default, install, directive, mixin, mapFields, Validator, ErrorBag, Rules, version, ValidationProvider, ValidationObserver, withValidation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"install\", function() { return install; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"directive\", function() { return directive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mixin\", function() { return mixin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapFields\", function() { return mapFields; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Validator\", function() { return Validator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ErrorBag\", function() { return ErrorBag; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Rules\", function() { return Rules; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"version\", function() { return version; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ValidationProvider\", function() { return ValidationProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ValidationObserver\", function() { return ValidationObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"withValidation\", function() { return withValidation; });\n/**\n  * vee-validate v2.1.7\n  * (c) 2019 Abdelrahman Awad\n  * @license MIT\n  */\n// \r\n\r\nvar isTextInput = function (el) {\r\n  return includes(['text', 'password', 'search', 'email', 'tel', 'url', 'textarea', 'number'], el.type);\r\n};\r\n\r\nvar isCheckboxOrRadioInput = function (el) {\r\n  return includes(['radio', 'checkbox'], el.type);\r\n};\r\n\r\nvar isDateInput = function (el) {\r\n  return includes(['date', 'week', 'month', 'datetime-local', 'time'], el.type);\r\n};\r\n\r\n/**\r\n * Gets the data attribute. the name must be kebab-case.\r\n */\r\nvar getDataAttribute = function (el, name) { return el.getAttribute((\"data-vv-\" + name)); };\r\n\r\n/**\r\n * Checks if the values are either null or undefined.\r\n */\r\nvar isNullOrUndefined = function () {\n  var values = [], len = arguments.length;\n  while ( len-- ) values[ len ] = arguments[ len ];\n\r\n  return values.every(function (value) {\r\n    return value === null || value === undefined;\r\n  });\r\n};\r\n\r\n/**\r\n * Creates the default flags object.\r\n */\r\nvar createFlags = function () { return ({\r\n  untouched: true,\r\n  touched: false,\r\n  dirty: false,\r\n  pristine: true,\r\n  valid: null,\r\n  invalid: null,\r\n  validated: false,\r\n  pending: false,\r\n  required: false,\r\n  changed: false\r\n}); };\r\n\r\n/**\r\n * Shallow object comparison.\r\n */\r\nvar isEqual = function (lhs, rhs) {\r\n  if (lhs instanceof RegExp && rhs instanceof RegExp) {\r\n    return isEqual(lhs.source, rhs.source) && isEqual(lhs.flags, rhs.flags);\r\n  }\r\n\r\n  if (Array.isArray(lhs) && Array.isArray(rhs)) {\r\n    if (lhs.length !== rhs.length) { return false; }\r\n\r\n    for (var i = 0; i < lhs.length; i++) {\r\n      if (!isEqual(lhs[i], rhs[i])) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // if both are objects, compare each key recursively.\r\n  if (isObject(lhs) && isObject(rhs)) {\r\n    return Object.keys(lhs).every(function (key) {\r\n      return isEqual(lhs[key], rhs[key]);\r\n    }) && Object.keys(rhs).every(function (key) {\r\n      return isEqual(lhs[key], rhs[key]);\r\n    });\r\n  }\r\n\r\n  return lhs === rhs;\r\n};\r\n\r\n/**\r\n * Determines the input field scope.\r\n */\r\nvar getScope = function (el) {\r\n  var scope = getDataAttribute(el, 'scope');\r\n  if (isNullOrUndefined(scope)) {\r\n    var form = getForm(el);\r\n\r\n    if (form) {\r\n      scope = getDataAttribute(form, 'scope');\r\n    }\r\n  }\r\n\r\n  return !isNullOrUndefined(scope) ? scope : null;\r\n};\r\n\r\n/**\r\n * Get the closest form element.\r\n */\r\nvar getForm = function (el) {\r\n  if (isNullOrUndefined(el)) { return null; }\r\n\r\n  if (el.tagName === 'FORM') { return el; }\r\n\r\n  if (!isNullOrUndefined(el.form)) { return el.form; }\r\n\r\n  return !isNullOrUndefined(el.parentNode) ? getForm(el.parentNode) : null;\r\n};\r\n\r\n/**\r\n * Gets the value in an object safely.\r\n */\r\nvar getPath = function (path, target, def) {\n  if ( def === void 0 ) def = undefined;\n\r\n  if (!path || !target) { return def; }\r\n\r\n  var value = target;\r\n  path.split('.').every(function (prop) {\r\n    if (prop in value) {\r\n      value = value[prop];\r\n\r\n      return true;\r\n    }\r\n\r\n    value = def;\r\n\r\n    return false;\r\n  });\r\n\r\n  return value;\r\n};\r\n\r\n/**\r\n * Checks if path exists within an object.\r\n */\r\nvar hasPath = function (path, target) {\r\n  var obj = target;\r\n  return path.split('.').every(function (prop) {\r\n    if (prop in obj) {\r\n      obj = obj[prop];\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  });\r\n};\r\n\r\n/**\r\n * Parses a rule string expression.\r\n */\r\nvar parseRule = function (rule) {\r\n  var params = [];\r\n  var name = rule.split(':')[0];\r\n\r\n  if (includes(rule, ':')) {\r\n    params = rule.split(':').slice(1).join(':').split(',');\r\n  }\r\n\r\n  return { name: name, params: params };\r\n};\r\n\r\n/**\r\n * Debounces a function.\r\n */\r\nvar debounce = function (fn, wait, token) {\n  if ( wait === void 0 ) wait = 0;\n  if ( token === void 0 ) token = { cancelled: false };\n\r\n  if (wait === 0) {\r\n    return fn;\r\n  }\r\n\r\n  var timeout;\r\n\r\n  return function () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\r\n    var later = function () {\r\n      timeout = null;\r\n\r\n      // check if the fn call was cancelled.\r\n      if (!token.cancelled) { fn.apply(void 0, args); }\r\n    };\r\n\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n    if (!timeout) { fn.apply(void 0, args); }\r\n  };\r\n};\r\n\r\n/**\r\n * Appends a rule definition to a list of rules.\r\n */\r\nvar appendRule = function (rule, rules) {\r\n  if (!rules) {\r\n    return normalizeRules(rule);\r\n  }\r\n\r\n  if (!rule) {\r\n    return normalizeRules(rules);\r\n  }\r\n\r\n  if (typeof rules === 'string') {\r\n    rules = normalizeRules(rules);\r\n  }\r\n\r\n  return assign({}, rules, normalizeRules(rule));\r\n};\r\n\r\n/**\r\n * Normalizes the given rules expression.\r\n */\r\nvar normalizeRules = function (rules) {\r\n  // if falsy value return an empty object.\r\n  if (!rules) {\r\n    return {};\r\n  }\r\n\r\n  if (isObject(rules)) {\r\n    // $FlowFixMe\r\n    return Object.keys(rules).reduce(function (prev, curr) {\r\n      var params = [];\r\n      // $FlowFixMe\r\n      if (rules[curr] === true) {\r\n        params = [];\r\n      } else if (Array.isArray(rules[curr])) {\r\n        params = rules[curr];\r\n      } else if (isObject(rules[curr])) {\r\n        params = rules[curr];\r\n      } else {\r\n        params = [rules[curr]];\r\n      }\r\n\r\n      // $FlowFixMe\r\n      if (rules[curr] !== false) {\r\n        prev[curr] = params;\r\n      }\r\n\r\n      return prev;\r\n    }, {});\r\n  }\r\n\r\n  if (typeof rules !== 'string') {\r\n    warn('rules must be either a string or an object.');\r\n    return {};\r\n  }\r\n\r\n  return rules.split('|').reduce(function (prev, rule) {\r\n    var parsedRule = parseRule(rule);\r\n    if (!parsedRule.name) {\r\n      return prev;\r\n    }\r\n\r\n    prev[parsedRule.name] = parsedRule.params;\r\n    return prev;\r\n  }, {});\r\n};\r\n\r\n/**\r\n * Emits a warning to the console.\r\n */\r\nvar warn = function (message) {\r\n  console.warn((\"[vee-validate] \" + message)); // eslint-disable-line\r\n};\r\n\r\n/**\r\n * Creates a branded error object.\r\n */\r\nvar createError = function (message) { return new Error((\"[vee-validate] \" + message)); };\r\n\r\n/**\r\n * Checks if the value is an object.\r\n */\r\nvar isObject = function (obj) { return obj !== null && obj && typeof obj === 'object' && ! Array.isArray(obj); };\r\n\r\n/**\r\n * Checks if a function is callable.\r\n */\r\nvar isCallable = function (func) { return typeof func === 'function'; };\r\n\r\n/**\r\n * Check if element has the css class on it.\r\n */\r\nvar hasClass = function (el, className) {\r\n  if (el.classList) {\r\n    return el.classList.contains(className);\r\n  }\r\n\r\n  return !!el.className.match(new RegExp((\"(\\\\s|^)\" + className + \"(\\\\s|$)\")));\r\n};\r\n\r\n/**\r\n * Adds the provided css className to the element.\r\n */\r\nvar addClass = function (el, className) {\r\n  if (el.classList) {\r\n    el.classList.add(className);\r\n    return;\r\n  }\r\n\r\n  if (!hasClass(el, className)) {\r\n    el.className += \" \" + className;\r\n  }\r\n};\r\n\r\n/**\r\n * Remove the provided css className from the element.\r\n */\r\nvar removeClass = function (el, className) {\r\n  if (el.classList) {\r\n    el.classList.remove(className);\r\n    return;\r\n  }\r\n\r\n  if (hasClass(el, className)) {\r\n    var reg = new RegExp((\"(\\\\s|^)\" + className + \"(\\\\s|$)\"));\r\n    el.className = el.className.replace(reg, ' ');\r\n  }\r\n};\r\n\r\n/**\r\n * Adds or removes a class name on the input depending on the status flag.\r\n */\r\nvar toggleClass = function (el, className, status) {\r\n  if (!el || !className) { return; }\r\n\r\n  if (Array.isArray(className)) {\r\n    className.forEach(function (item) { return toggleClass(el, item, status); });\r\n    return;\r\n  }\r\n\r\n  if (status) {\r\n    return addClass(el, className);\r\n  }\r\n\r\n  removeClass(el, className);\r\n};\r\n\r\n/**\r\n * Converts an array-like object to array, provides a simple polyfill for Array.from\r\n */\r\nvar toArray = function (arrayLike) {\r\n  if (isCallable(Array.from)) {\r\n    return Array.from(arrayLike);\r\n  }\r\n\r\n  var array = [];\r\n  var length = arrayLike.length;\r\n  /* istanbul ignore next */\r\n  for (var i = 0; i < length; i++) {\r\n    array.push(arrayLike[i]);\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  return array;\r\n};\r\n\r\n/**\r\n * Assign polyfill from the mdn.\r\n */\r\nvar assign = function (target) {\n  var others = [], len = arguments.length - 1;\n  while ( len-- > 0 ) others[ len ] = arguments[ len + 1 ];\n\r\n  /* istanbul ignore else */\r\n  if (isCallable(Object.assign)) {\r\n    return Object.assign.apply(Object, [ target ].concat( others ));\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  if (target == null) {\r\n    throw new TypeError('Cannot convert undefined or null to object');\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  var to = Object(target);\r\n  /* istanbul ignore next */\r\n  others.forEach(function (arg) {\r\n    // Skip over if undefined or null\r\n    if (arg != null) {\r\n      Object.keys(arg).forEach(function (key) {\r\n        to[key] = arg[key];\r\n      });\r\n    }\r\n  });\r\n  /* istanbul ignore next */\r\n  return to;\r\n};\r\n\r\nvar id = 0;\r\nvar idTemplate = '{id}';\r\n\r\n/**\r\n * Generates a unique id.\r\n */\r\nvar uniqId = function () {\r\n  // handle too many uses of uniqId, although unlikely.\r\n  if (id >= 9999) {\r\n    id = 0;\r\n    // shift the template.\r\n    idTemplate = idTemplate.replace('{id}', '_{id}');\r\n  }\r\n\r\n  id++;\r\n  var newId = idTemplate.replace('{id}', String(id));\r\n\r\n  return newId;\r\n};\r\n\r\n/**\r\n * finds the first element that satisfies the predicate callback, polyfills array.find\r\n */\r\nvar find = function (arrayLike, predicate) {\r\n  var array = Array.isArray(arrayLike) ? arrayLike : toArray(arrayLike);\r\n  for (var i = 0; i < array.length; i++) {\r\n    if (predicate(array[i])) {\r\n      return array[i];\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nvar isBuiltInComponent = function (vnode) {\r\n  if (!vnode) {\r\n    return false;\r\n  }\r\n\r\n  var tag = vnode.componentOptions.tag;\r\n\r\n  return /^(keep-alive|transition|transition-group)$/.test(tag);\r\n};\r\n\r\nvar makeDelayObject = function (events, delay, delayConfig) {\r\n  if (typeof delay === 'number') {\r\n    return events.reduce(function (prev, e) {\r\n      prev[e] = delay;\r\n      return prev;\r\n    }, {});\r\n  }\r\n\r\n  return events.reduce(function (prev, e) {\r\n    if (typeof delay === 'object' && e in delay) {\r\n      prev[e] = delay[e];\r\n      return prev;\r\n    }\r\n\r\n    if (typeof delayConfig === 'number') {\r\n      prev[e] = delayConfig;\r\n      return prev;\r\n    }\r\n\r\n    prev[e] = (delayConfig && delayConfig[e]) || 0;\r\n\r\n    return prev;\r\n  }, {});\r\n};\r\n\r\nvar deepParseInt = function (input) {\r\n  if (typeof input === 'number') { return input; }\r\n\r\n  if (typeof input === 'string') { return parseInt(input); }\r\n\r\n  var map = {};\r\n  for (var element in input) {\r\n    map[element] = parseInt(input[element]);\r\n  }\r\n\r\n  return map;\r\n};\r\n\r\nvar merge = function (target, source) {\r\n  if (! (isObject(target) && isObject(source))) {\r\n    return target;\r\n  }\r\n\r\n  Object.keys(source).forEach(function (key) {\n    var obj, obj$1;\n\r\n    if (isObject(source[key])) {\r\n      if (! target[key]) {\r\n        assign(target, ( obj = {}, obj[key] = {}, obj ));\r\n      }\r\n\r\n      merge(target[key], source[key]);\r\n      return;\r\n    }\r\n\r\n    assign(target, ( obj$1 = {}, obj$1[key] = source[key], obj$1 ));\r\n  });\r\n\r\n  return target;\r\n};\r\n\r\nvar fillRulesFromElement = function (el, rules) {\r\n  if (el.required) {\r\n    rules = appendRule('required', rules);\r\n  }\r\n\r\n  if (isTextInput(el)) {\r\n    if (el.type === 'email') {\r\n      rules = appendRule((\"email\" + (el.multiple ? ':multiple' : '')), rules);\r\n    }\r\n\r\n    if (el.pattern) {\r\n      rules = appendRule({ regex: el.pattern }, rules);\r\n    }\r\n\r\n    // 524288 is the max on some browsers and test environments.\r\n    if (el.maxLength >= 0 && el.maxLength < 524288) {\r\n      rules = appendRule((\"max:\" + (el.maxLength)), rules);\r\n    }\r\n\r\n    if (el.minLength > 0) {\r\n      rules = appendRule((\"min:\" + (el.minLength)), rules);\r\n    }\r\n\r\n    if (el.type === 'number') {\r\n      rules = appendRule('decimal', rules);\r\n      if (el.min !== '') {\r\n        rules = appendRule((\"min_value:\" + (el.min)), rules);\r\n      }\r\n\r\n      if (el.max !== '') {\r\n        rules = appendRule((\"max_value:\" + (el.max)), rules);\r\n      }\r\n    }\r\n\r\n    return rules;\r\n  }\r\n\r\n  if (isDateInput(el)) {\r\n    var timeFormat = el.step && Number(el.step) < 60 ? 'HH:mm:ss' : 'HH:mm';\r\n\r\n    if (el.type === 'date') {\r\n      return appendRule('date_format:YYYY-MM-DD', rules);\r\n    }\r\n\r\n    if (el.type === 'datetime-local') {\r\n      return appendRule((\"date_format:YYYY-MM-DDT\" + timeFormat), rules);\r\n    }\r\n\r\n    if (el.type === 'month') {\r\n      return appendRule('date_format:YYYY-MM', rules);\r\n    }\r\n\r\n    if (el.type === 'week') {\r\n      return appendRule('date_format:YYYY-[W]WW', rules);\r\n    }\r\n\r\n    if (el.type === 'time') {\r\n      return appendRule((\"date_format:\" + timeFormat), rules);\r\n    }\r\n  }\r\n\r\n  return rules;\r\n};\r\n\r\nvar values = function (obj) {\r\n  if (isCallable(Object.values)) {\r\n    return Object.values(obj);\r\n  }\r\n\r\n  // fallback to keys()\r\n  /* istanbul ignore next */\r\n  return Object.keys(obj).map(function (k) { return obj[k]; });\r\n};\r\n\r\nvar parseSelector = function (selector) {\r\n  var rule = null;\r\n  if (includes(selector, ':')) {\r\n    rule = selector.split(':').pop();\r\n    selector = selector.replace((\":\" + rule), '');\r\n  }\r\n\r\n  if (selector[0] === '#') {\r\n    return {\r\n      id: selector.slice(1),\r\n      rule: rule,\r\n      name: null,\r\n      scope: null\r\n    };\r\n  }\r\n\r\n  var scope = null;\r\n  var name = selector;\r\n  if (includes(selector, '.')) {\r\n    var parts = selector.split('.');\r\n    scope = parts[0];\r\n    name = parts.slice(1).join('.');\r\n  }\r\n\r\n  return {\r\n    id: null,\r\n    scope: scope,\r\n    name: name,\r\n    rule: rule\r\n  };\r\n};\r\n\r\nvar includes = function (collection, item) {\r\n  return collection.indexOf(item) !== -1;\r\n};\r\n\r\nvar isEmptyArray = function (arr) {\r\n  return Array.isArray(arr) && arr.length === 0;\r\n};\n\n// \r\n\r\nvar LOCALE = 'en';\r\n\r\nvar Dictionary = function Dictionary (dictionary) {\n  if ( dictionary === void 0 ) dictionary = {};\n\r\n  this.container = {};\r\n  this.merge(dictionary);\r\n};\n\nvar prototypeAccessors = { locale: { configurable: true } };\r\n\r\nprototypeAccessors.locale.get = function () {\r\n  return LOCALE;\r\n};\r\n\r\nprototypeAccessors.locale.set = function (value) {\r\n  LOCALE = value || 'en';\r\n};\r\n\r\nDictionary.prototype.hasLocale = function hasLocale (locale) {\r\n  return !!this.container[locale];\r\n};\r\n\r\nDictionary.prototype.setDateFormat = function setDateFormat (locale, format) {\r\n  if (!this.container[locale]) {\r\n    this.container[locale] = {};\r\n  }\r\n\r\n  this.container[locale].dateFormat = format;\r\n};\r\n\r\nDictionary.prototype.getDateFormat = function getDateFormat (locale) {\r\n  if (!this.container[locale] || !this.container[locale].dateFormat) {\r\n    return null;\r\n  }\r\n\r\n  return this.container[locale].dateFormat;\r\n};\r\n\r\nDictionary.prototype.getMessage = function getMessage (locale, key, data) {\r\n  var message = null;\r\n  if (!this.hasMessage(locale, key)) {\r\n    message = this._getDefaultMessage(locale);\r\n  } else {\r\n    message = this.container[locale].messages[key];\r\n  }\r\n\r\n  return isCallable(message) ? message.apply(void 0, data) : message;\r\n};\r\n\r\n/**\r\n * Gets a specific message for field. falls back to the rule message.\r\n */\r\nDictionary.prototype.getFieldMessage = function getFieldMessage (locale, field, key, data) {\r\n  if (!this.hasLocale(locale)) {\r\n    return this.getMessage(locale, key, data);\r\n  }\r\n\r\n  var dict = this.container[locale].custom && this.container[locale].custom[field];\r\n  if (!dict || !dict[key]) {\r\n    return this.getMessage(locale, key, data);\r\n  }\r\n\r\n  var message = dict[key];\r\n  return isCallable(message) ? message.apply(void 0, data) : message;\r\n};\r\n\r\nDictionary.prototype._getDefaultMessage = function _getDefaultMessage (locale) {\r\n  if (this.hasMessage(locale, '_default')) {\r\n    return this.container[locale].messages._default;\r\n  }\r\n\r\n  return this.container.en.messages._default;\r\n};\r\n\r\nDictionary.prototype.getAttribute = function getAttribute (locale, key, fallback) {\n    if ( fallback === void 0 ) fallback = '';\n\r\n  if (!this.hasAttribute(locale, key)) {\r\n    return fallback;\r\n  }\r\n\r\n  return this.container[locale].attributes[key];\r\n};\r\n\r\nDictionary.prototype.hasMessage = function hasMessage (locale, key) {\r\n  return !! (\r\n    this.hasLocale(locale) &&\r\n          this.container[locale].messages &&\r\n          this.container[locale].messages[key]\r\n  );\r\n};\r\n\r\nDictionary.prototype.hasAttribute = function hasAttribute (locale, key) {\r\n  return !! (\r\n    this.hasLocale(locale) &&\r\n          this.container[locale].attributes &&\r\n          this.container[locale].attributes[key]\r\n  );\r\n};\r\n\r\nDictionary.prototype.merge = function merge$1 (dictionary) {\r\n  merge(this.container, dictionary);\r\n};\r\n\r\nDictionary.prototype.setMessage = function setMessage (locale, key, message) {\r\n  if (! this.hasLocale(locale)) {\r\n    this.container[locale] = {\r\n      messages: {},\r\n      attributes: {}\r\n    };\r\n  }\r\n\r\n  this.container[locale].messages[key] = message;\r\n};\r\n\r\nDictionary.prototype.setAttribute = function setAttribute (locale, key, attribute) {\r\n  if (! this.hasLocale(locale)) {\r\n    this.container[locale] = {\r\n      messages: {},\r\n      attributes: {}\r\n    };\r\n  }\r\n\r\n  this.container[locale].attributes[key] = attribute;\r\n};\n\nObject.defineProperties( Dictionary.prototype, prototypeAccessors );\n\nvar drivers = {\r\n  default: new Dictionary({\r\n    en: {\r\n      messages: {},\r\n      attributes: {},\r\n      custom: {}\r\n    }\r\n  })\r\n};\r\n\r\nvar currentDriver = 'default';\r\n\r\nvar DictionaryResolver = function DictionaryResolver () {};\n\nDictionaryResolver._checkDriverName = function _checkDriverName (driver) {\r\n  if (!driver) {\r\n    throw createError('you must provide a name to the dictionary driver');\r\n  }\r\n};\r\n\r\nDictionaryResolver.setDriver = function setDriver (driver, implementation) {\n    if ( implementation === void 0 ) implementation = null;\n\r\n  this._checkDriverName(driver);\r\n  if (implementation) {\r\n    drivers[driver] = implementation;\r\n  }\r\n\r\n  currentDriver = driver;\r\n};\r\n\r\nDictionaryResolver.getDriver = function getDriver () {\r\n  return drivers[currentDriver];\r\n};\n\n// \r\n\r\nvar ErrorBag = function ErrorBag (errorBag, id) {\n  if ( errorBag === void 0 ) errorBag = null;\n  if ( id === void 0 ) id = null;\n\r\n  this.vmId = id || null;\r\n  // make this bag a mirror of the provided one, sharing the same items reference.\r\n  if (errorBag && errorBag instanceof ErrorBag) {\r\n    this.items = errorBag.items;\r\n  } else {\r\n    this.items = [];\r\n  }\r\n};\r\n\r\nErrorBag.prototype[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = function () {\n    var this$1 = this;\n\r\n  var index = 0;\r\n  return {\r\n    next: function () {\r\n      return { value: this$1.items[index++], done: index > this$1.items.length };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Adds an error to the internal array.\r\n */\r\nErrorBag.prototype.add = function add (error) {\n    var ref;\n\r\n  (ref = this.items).push.apply(\r\n    ref, this._normalizeError(error)\r\n  );\r\n};\r\n\r\n/**\r\n * Normalizes passed errors to an error array.\r\n */\r\nErrorBag.prototype._normalizeError = function _normalizeError (error) {\n    var this$1 = this;\n\r\n  if (Array.isArray(error)) {\r\n    return error.map(function (e) {\r\n      e.scope = !isNullOrUndefined(e.scope) ? e.scope : null;\r\n      e.vmId = !isNullOrUndefined(e.vmId) ? e.vmId : (this$1.vmId || null);\r\n\r\n      return e;\r\n    });\r\n  }\r\n\r\n  error.scope = !isNullOrUndefined(error.scope) ? error.scope : null;\r\n  error.vmId = !isNullOrUndefined(error.vmId) ? error.vmId : (this.vmId || null);\r\n\r\n  return [error];\r\n};\r\n\r\n/**\r\n * Regenrates error messages if they have a generator function.\r\n */\r\nErrorBag.prototype.regenerate = function regenerate () {\r\n  this.items.forEach(function (i) {\r\n    i.msg = isCallable(i.regenerate) ? i.regenerate() : i.msg;\r\n  });\r\n};\r\n\r\n/**\r\n * Updates a field error with the new field scope.\r\n */\r\nErrorBag.prototype.update = function update (id, error) {\r\n  var item = find(this.items, function (i) { return i.id === id; });\r\n  if (!item) {\r\n    return;\r\n  }\r\n\r\n  var idx = this.items.indexOf(item);\r\n  this.items.splice(idx, 1);\r\n  item.scope = error.scope;\r\n  this.items.push(item);\r\n};\r\n\r\n/**\r\n * Gets all error messages from the internal array.\r\n */\r\nErrorBag.prototype.all = function all (scope) {\n    var this$1 = this;\n\r\n  var filterFn = function (item) {\r\n    var matchesScope = true;\r\n    var matchesVM = true;\r\n    if (!isNullOrUndefined(scope)) {\r\n      matchesScope = item.scope === scope;\r\n    }\r\n\r\n    if (!isNullOrUndefined(this$1.vmId)) {\r\n      matchesVM = item.vmId === this$1.vmId;\r\n    }\r\n\r\n    return matchesVM && matchesScope;\r\n  };\r\n\r\n  return this.items.filter(filterFn).map(function (e) { return e.msg; });\r\n};\r\n\r\n/**\r\n * Checks if there are any errors in the internal array.\r\n */\r\nErrorBag.prototype.any = function any (scope) {\n    var this$1 = this;\n\r\n  var filterFn = function (item) {\r\n    var matchesScope = true;\r\n    var matchesVM = true;\r\n    if (!isNullOrUndefined(scope)) {\r\n      matchesScope = item.scope === scope;\r\n    }\r\n\r\n    if (!isNullOrUndefined(this$1.vmId)) {\r\n      matchesVM = item.vmId === this$1.vmId;\r\n    }\r\n\r\n    return matchesVM && matchesScope;\r\n  };\r\n\r\n  return !!this.items.filter(filterFn).length;\r\n};\r\n\r\n/**\r\n * Removes all items from the internal array.\r\n */\r\nErrorBag.prototype.clear = function clear (scope) {\n    var this$1 = this;\n\r\n  var matchesVM = isNullOrUndefined(this.vmId) ? function () { return true; } : function (i) { return i.vmId === this$1.vmId; };\r\n  if (isNullOrUndefined(scope)) {\r\n    scope = null;\r\n  }\r\n\r\n  for (var i = 0; i < this.items.length; ++i) {\r\n    if (matchesVM(this.items[i]) && this.items[i].scope === scope) {\r\n      this.items.splice(i, 1);\r\n      --i;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Collects errors into groups or for a specific field.\r\n */\r\nErrorBag.prototype.collect = function collect (field, scope, map) {\n    var this$1 = this;\n    if ( map === void 0 ) map = true;\n\r\n  var isSingleField = !isNullOrUndefined(field) && !field.includes('*');\r\n  var groupErrors = function (items) {\r\n    var errors = items.reduce(function (collection, error) {\r\n      if (!isNullOrUndefined(this$1.vmId) && error.vmId !== this$1.vmId) {\r\n        return collection;\r\n      }\r\n\r\n      if (!collection[error.field]) {\r\n        collection[error.field] = [];\r\n      }\r\n\r\n      collection[error.field].push(map ? error.msg : error);\r\n\r\n      return collection;\r\n    }, {});\r\n\r\n    // reduce the collection to be a single array.\r\n    if (isSingleField) {\r\n      return values(errors)[0] || [];\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  if (isNullOrUndefined(field)) {\r\n    return groupErrors(this.items);\r\n  }\r\n\r\n  var selector = isNullOrUndefined(scope) ? String(field) : (scope + \".\" + field);\r\n  var ref = this._makeCandidateFilters(selector);\n    var isPrimary = ref.isPrimary;\n    var isAlt = ref.isAlt;\r\n\r\n  var collected = this.items.reduce(function (prev, curr) {\r\n    if (isPrimary(curr)) {\r\n      prev.primary.push(curr);\r\n    }\r\n\r\n    if (isAlt(curr)) {\r\n      prev.alt.push(curr);\r\n    }\r\n\r\n    return prev;\r\n  }, { primary: [], alt: [] });\r\n\r\n  collected = collected.primary.length ? collected.primary : collected.alt;\r\n\r\n  return groupErrors(collected);\r\n};\r\n\r\n/**\r\n * Gets the internal array length.\r\n */\r\nErrorBag.prototype.count = function count () {\n    var this$1 = this;\n\r\n  if (this.vmId) {\r\n    return this.items.filter(function (e) { return e.vmId === this$1.vmId; }).length;\r\n  }\r\n\r\n  return this.items.length;\r\n};\r\n\r\n/**\r\n * Finds and fetches the first error message for the specified field id.\r\n */\r\nErrorBag.prototype.firstById = function firstById (id) {\r\n  var error = find(this.items, function (i) { return i.id === id; });\r\n\r\n  return error ? error.msg : undefined;\r\n};\r\n\r\n/**\r\n * Gets the first error message for a specific field.\r\n */\r\nErrorBag.prototype.first = function first (field, scope) {\n    if ( scope === void 0 ) scope = null;\n\r\n  var selector = isNullOrUndefined(scope) ? field : (scope + \".\" + field);\r\n  var match = this._match(selector);\r\n\r\n  return match && match.msg;\r\n};\r\n\r\n/**\r\n * Returns the first error rule for the specified field\r\n */\r\nErrorBag.prototype.firstRule = function firstRule (field, scope) {\r\n  var errors = this.collect(field, scope, false);\r\n\r\n  return (errors.length && errors[0].rule) || undefined;\r\n};\r\n\r\n/**\r\n * Checks if the internal array has at least one error for the specified field.\r\n */\r\nErrorBag.prototype.has = function has (field, scope) {\n    if ( scope === void 0 ) scope = null;\n\r\n  return !!this.first(field, scope);\r\n};\r\n\r\n/**\r\n * Gets the first error message for a specific field and a rule.\r\n */\r\nErrorBag.prototype.firstByRule = function firstByRule (name, rule, scope) {\n    if ( scope === void 0 ) scope = null;\n\r\n  var error = this.collect(name, scope, false).filter(function (e) { return e.rule === rule; })[0];\r\n\r\n  return (error && error.msg) || undefined;\r\n};\r\n\r\n/**\r\n * Gets the first error message for a specific field that not match the rule.\r\n */\r\nErrorBag.prototype.firstNot = function firstNot (name, rule, scope) {\n    if ( rule === void 0 ) rule = 'required';\n    if ( scope === void 0 ) scope = null;\n\r\n  var error = this.collect(name, scope, false).filter(function (e) { return e.rule !== rule; })[0];\r\n\r\n  return (error && error.msg) || undefined;\r\n};\r\n\r\n/**\r\n * Removes errors by matching against the id or ids.\r\n */\r\nErrorBag.prototype.removeById = function removeById (id) {\r\n  var condition = function (item) { return item.id === id; };\r\n  if (Array.isArray(id)) {\r\n    condition = function (item) { return id.indexOf(item.id) !== -1; };\r\n  }\r\n\r\n  for (var i = 0; i < this.items.length; ++i) {\r\n    if (condition(this.items[i])) {\r\n      this.items.splice(i, 1);\r\n      --i;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Removes all error messages associated with a specific field.\r\n */\r\nErrorBag.prototype.remove = function remove (field, scope, vmId) {\r\n  if (isNullOrUndefined(field)) {\r\n    return;\r\n  }\r\n\r\n  var selector = isNullOrUndefined(scope) ? String(field) : (scope + \".\" + field);\r\n  var ref = this._makeCandidateFilters(selector);\n    var isPrimary = ref.isPrimary;\n    var isAlt = ref.isAlt;\r\n  var matches = function (item) { return isPrimary(item) || isAlt(item); };\r\n  var shouldRemove = function (item) {\r\n    if (isNullOrUndefined(vmId)) { return matches(item); }\r\n\r\n    return matches(item) && item.vmId === vmId;\r\n  };\r\n\r\n  for (var i = 0; i < this.items.length; ++i) {\r\n    if (shouldRemove(this.items[i])) {\r\n      this.items.splice(i, 1);\r\n      --i;\r\n    }\r\n  }\r\n};\r\n\r\nErrorBag.prototype._makeCandidateFilters = function _makeCandidateFilters (selector) {\n    var this$1 = this;\n\r\n  var matchesRule = function () { return true; };\r\n  var matchesScope = function () { return true; };\r\n  var matchesName = function () { return true; };\r\n  var matchesVM = function () { return true; };\r\n\r\n  var ref = parseSelector(selector);\n    var id = ref.id;\n    var rule = ref.rule;\n    var scope = ref.scope;\n    var name = ref.name;\r\n\r\n  if (rule) {\r\n    matchesRule = function (item) { return item.rule === rule; };\r\n  }\r\n\r\n  // match by id, can be combined with rule selection.\r\n  if (id) {\r\n    return {\r\n      isPrimary: function (item) { return matchesRule(item) && (function (item) { return id === item.id; }); },\r\n      isAlt: function () { return false; }\r\n    };\r\n  }\r\n\r\n  if (isNullOrUndefined(scope)) {\r\n    // if no scope specified, make sure the found error has no scope.\r\n    matchesScope = function (item) { return isNullOrUndefined(item.scope); };\r\n  } else {\r\n    matchesScope = function (item) { return item.scope === scope; };\r\n  }\r\n\r\n  if (!isNullOrUndefined(name) && name !== '*') {\r\n    matchesName = function (item) { return item.field === name; };\r\n  }\r\n\r\n  if (!isNullOrUndefined(this.vmId)) {\r\n    matchesVM = function (item) { return item.vmId === this$1.vmId; };\r\n  }\r\n\r\n  // matches the first candidate.\r\n  var isPrimary = function (item) {\r\n    return matchesVM(item) && matchesName(item) && matchesRule(item) && matchesScope(item);\r\n  };\r\n\r\n  // matches a second candidate, which is a field with a name containing the '.' character.\r\n  var isAlt = function (item) {\r\n    return matchesVM(item) && matchesRule(item) && item.field === (scope + \".\" + name);\r\n  };\r\n\r\n  return {\r\n    isPrimary: isPrimary,\r\n    isAlt: isAlt\r\n  };\r\n};\r\n\r\nErrorBag.prototype._match = function _match (selector) {\r\n  if (isNullOrUndefined(selector)) {\r\n    return undefined;\r\n  }\r\n\r\n  var ref = this._makeCandidateFilters(selector);\n    var isPrimary = ref.isPrimary;\n    var isAlt = ref.isAlt;\r\n\r\n  return this.items.reduce(function (prev, item, idx, arr) {\r\n    var isLast = idx === arr.length - 1;\r\n    if (prev.primary) {\r\n      return isLast ? prev.primary : prev;\r\n    }\r\n\r\n    if (isPrimary(item)) {\r\n      prev.primary = item;\r\n    }\r\n\r\n    if (isAlt(item)) {\r\n      prev.alt = item;\r\n    }\r\n\r\n    // keep going.\r\n    if (!isLast) {\r\n      return prev;\r\n    }\r\n\r\n    return prev.primary || prev.alt;\r\n  }, {});\r\n};\n\n// VNode Utils\r\n\r\n// Gets the model object on the vnode.\r\nfunction findModel (vnode) {\r\n  if (!vnode.data) {\r\n    return null;\r\n  }\r\n\r\n  // Component Model\r\n  if (vnode.data.model) {\r\n    return vnode.data.model;\r\n  }\r\n\r\n  return !!(vnode.data.directives) && find(vnode.data.directives, function (d) { return d.name === 'model'; });\r\n}\r\n\r\nfunction extractChildren (vnode) {\r\n  if (Array.isArray(vnode)) {\r\n    return vnode;\r\n  }\r\n\r\n  if (Array.isArray(vnode.children)) {\r\n    return vnode.children;\r\n  }\r\n\r\n  if (vnode.componentOptions && Array.isArray(vnode.componentOptions.children)) {\r\n    return vnode.componentOptions.children;\r\n  }\r\n\r\n  return [];\r\n}\r\n\r\nfunction extractVNodes (vnode) {\r\n  if (findModel(vnode)) {\r\n    return [vnode];\r\n  }\r\n\r\n  var children = extractChildren(vnode);\r\n\r\n  return children.reduce(function (nodes, node) {\r\n    var candidates = extractVNodes(node);\r\n    if (candidates.length) {\r\n      nodes.push.apply(nodes, candidates);\r\n    }\r\n\r\n    return nodes;\r\n  }, []);\r\n}\r\n\r\n// Resolves v-model config if exists.\r\nfunction findModelConfig (vnode) {\r\n  if (!vnode.componentOptions) { return null; }\r\n\r\n  return vnode.componentOptions.Ctor.options.model;\r\n}\r\n// Adds a listener to vnode listener object.\r\nfunction mergeVNodeListeners (obj, eventName, handler) {\r\n  // Has a single listener.\r\n  if (isCallable(obj[eventName])) {\r\n    var prevHandler = obj[eventName];\r\n    obj[eventName] = [prevHandler];\r\n  }\r\n\r\n  // has other listeners.\r\n  if (Array.isArray(obj[eventName])) {\r\n    obj[eventName].push(handler);\r\n    return;\r\n  }\r\n\r\n  // no listener at all.\r\n  if (isNullOrUndefined(obj[eventName])) {\r\n    obj[eventName] = [handler];\r\n  }\r\n}\r\n\r\n// Adds a listener to a native HTML vnode.\r\nfunction addNativeNodeListener (node, eventName, handler) {\r\n  if (isNullOrUndefined(node.data.on)) {\r\n    node.data.on = {};\r\n  }\r\n\r\n  mergeVNodeListeners(node.data.on, eventName, handler);\r\n}\r\n\r\n// Adds a listener to a Vue component vnode.\r\nfunction addComponentNodeListener (node, eventName, handler) {\r\n  /* istanbul ignore next */\r\n  if (!node.componentOptions.listeners) {\r\n    node.componentOptions.listeners = {};\r\n  }\r\n\r\n  mergeVNodeListeners(node.componentOptions.listeners, eventName, handler);\r\n}\r\nfunction addVNodeListener (vnode, eventName, handler) {\r\n  if (vnode.componentOptions) {\r\n    addComponentNodeListener(vnode, eventName, handler);\r\n  }\r\n\r\n  addNativeNodeListener(vnode, eventName, handler);\r\n}\r\n// Determines if `change` should be used over `input` for listeners.\r\nfunction getInputEventName (vnode, model) {\r\n  // Is a component.\r\n  if (vnode.componentOptions) {\r\n    var ref = findModelConfig(vnode) || { event: 'input' };\n    var event = ref.event;\r\n\r\n    return event;\r\n  }\r\n\r\n  // Lazy Models typically use change event\r\n  if (model && model.modifiers && model.modifiers.lazy) {\r\n    return 'change';\r\n  }\r\n\r\n  // is a textual-type input.\r\n  if (vnode.data.attrs && isTextInput({ type: vnode.data.attrs.type || 'text' })) {\r\n    return 'input';\r\n  }\r\n\r\n  return 'change';\r\n}\r\n\r\nfunction normalizeSlots (slots, ctx) {\r\n  return Object.keys(slots).reduce(function (arr, key) {\r\n    slots[key].forEach(function (vnode) {\r\n      if (!vnode.context) {\r\n        slots[key].context = ctx;\r\n        if (!vnode.data) {\r\n          vnode.data = {};\r\n        }\r\n        vnode.data.slot = key;\r\n      }\r\n    });\r\n\r\n    return arr.concat(slots[key]);\r\n  }, []);\r\n}\r\n\r\nfunction createRenderless (h, vnode) {\r\n  // a single-root slot yay!\r\n  if (!Array.isArray(vnode)) {\r\n    return vnode;\r\n  }\r\n\r\n  if (vnode.length === 1) {\r\n    return vnode[0];\r\n  }\r\n\r\n  if (true) {\r\n    warn('Your slot should have one root element. Rendering a span as the root.');\r\n  }\r\n\r\n  // Renders a multi-root node, should throw a Vue error.\r\n  return vnode;\r\n}\n\n/**\r\n * Generates the options required to construct a field.\r\n */\r\nvar Resolver = function Resolver () {};\n\nResolver.generate = function generate (el, binding, vnode) {\r\n  var model = Resolver.resolveModel(binding, vnode);\r\n  var options = pluginInstance.resolveConfig(vnode.context);\r\n\r\n  return {\r\n    name: Resolver.resolveName(el, vnode),\r\n    el: el,\r\n    listen: !binding.modifiers.disable,\r\n    bails: binding.modifiers.bails ? true : (binding.modifiers.continues === true ? false : undefined),\r\n    scope: Resolver.resolveScope(el, binding, vnode),\r\n    vm: Resolver.makeVM(vnode.context),\r\n    expression: binding.value,\r\n    component: vnode.componentInstance,\r\n    classes: options.classes,\r\n    classNames: options.classNames,\r\n    getter: Resolver.resolveGetter(el, vnode, model),\r\n    events: Resolver.resolveEvents(el, vnode) || options.events,\r\n    model: model,\r\n    delay: Resolver.resolveDelay(el, vnode, options),\r\n    rules: Resolver.resolveRules(el, binding, vnode),\r\n    immediate: !!binding.modifiers.initial || !!binding.modifiers.immediate,\r\n    persist: !!binding.modifiers.persist,\r\n    validity: options.validity,\r\n    aria: options.aria,\r\n    initialValue: Resolver.resolveInitialValue(vnode)\r\n  };\r\n};\r\n\r\nResolver.getCtorConfig = function getCtorConfig (vnode) {\r\n  if (!vnode.componentInstance) { return null; }\r\n\r\n  var config = getPath('componentInstance.$options.$_veeValidate', vnode);\r\n\r\n  return config;\r\n};\r\n\r\n/**\r\n * Resolves the rules defined on an element.\r\n */\r\nResolver.resolveRules = function resolveRules (el, binding, vnode) {\r\n  var rules = '';\r\n  if (!binding.value && (!binding || !binding.expression)) {\r\n    rules = getDataAttribute(el, 'rules');\r\n  }\r\n\r\n  if (binding.value && includes(['string', 'object'], typeof binding.value.rules)) {\r\n    rules = binding.value.rules;\r\n  } else if (binding.value) {\r\n    rules = binding.value;\r\n  }\r\n\r\n  if (vnode.componentInstance) {\r\n    return rules;\r\n  }\r\n\r\n  // If validity is disabled, ignore field rules.\r\n  var normalized = normalizeRules(rules);\r\n  if (!pluginInstance.config.useConstraintAttrs) {\r\n    return normalized;\r\n  }\r\n\r\n  return assign({}, fillRulesFromElement(el, {}), normalized);\r\n};\r\n\r\n/**\r\n * @param {*} vnode\r\n */\r\nResolver.resolveInitialValue = function resolveInitialValue (vnode) {\r\n  var model = vnode.data.model || find(vnode.data.directives, function (d) { return d.name === 'model'; });\r\n\r\n  return model && model.value;\r\n};\r\n\r\n/**\r\n * Creates a non-circular partial VM instance from a Vue instance.\r\n * @param {*} vm\r\n */\r\nResolver.makeVM = function makeVM (vm) {\r\n  return {\r\n    get $el () {\r\n      return vm.$el;\r\n    },\r\n    get $refs () {\r\n      return vm.$refs;\r\n    },\r\n    $watch: vm.$watch ? vm.$watch.bind(vm) : function () {},\r\n    $validator: vm.$validator ? {\r\n      errors: vm.$validator.errors,\r\n      validate: vm.$validator.validate.bind(vm.$validator),\r\n      update: vm.$validator.update.bind(vm.$validator)\r\n    } : null\r\n  };\r\n};\r\n\r\n/**\r\n * Resolves the delay value.\r\n * @param {*} el\r\n * @param {*} vnode\r\n * @param {Object} options\r\n */\r\nResolver.resolveDelay = function resolveDelay (el, vnode, options) {\r\n  var delay = getDataAttribute(el, 'delay');\r\n  var globalDelay = (options && 'delay' in options) ? options.delay : 0;\r\n\r\n  if (!delay && vnode.componentInstance && vnode.componentInstance.$attrs) {\r\n    delay = vnode.componentInstance.$attrs['data-vv-delay'];\r\n  }\r\n\r\n  if (!isObject(globalDelay)) {\r\n    return deepParseInt(delay || globalDelay);\r\n  }\r\n\r\n  if (!isNullOrUndefined(delay)) {\r\n    globalDelay.input = delay;\r\n  }\r\n\r\n  return deepParseInt(globalDelay);\r\n};\r\n\r\n/**\r\n * Resolves the events to validate in response to.\r\n * @param {*} el\r\n * @param {*} vnode\r\n */\r\nResolver.resolveEvents = function resolveEvents (el, vnode) {\r\n  // resolve it from the root element.\r\n  var events = getDataAttribute(el, 'validate-on');\r\n\r\n  // resolve from data-vv-validate-on if its a vue component.\r\n  if (!events && vnode.componentInstance && vnode.componentInstance.$attrs) {\r\n    events = vnode.componentInstance.$attrs['data-vv-validate-on'];\r\n  }\r\n\r\n  // resolve it from $_veeValidate options.\r\n  if (!events && vnode.componentInstance) {\r\n    var config = Resolver.getCtorConfig(vnode);\r\n    events = config && config.events;\r\n  }\r\n\r\n  if (!events && pluginInstance.config.events) {\r\n    events = pluginInstance.config.events;\r\n  }\r\n\r\n  // resolve the model event if its configured for custom components.\r\n  if (events && vnode.componentInstance && includes(events, 'input')) {\r\n    var ref = vnode.componentInstance.$options.model || { event: 'input' };\n      var event = ref.event;\r\n    // if the prop was configured but not the model.\r\n    if (!event) {\r\n      return events;\r\n    }\r\n\r\n    events = events.replace('input', event);\r\n  }\r\n\r\n  return events;\r\n};\r\n\r\n/**\r\n * Resolves the scope for the field.\r\n * @param {*} el\r\n * @param {*} binding\r\n */\r\nResolver.resolveScope = function resolveScope (el, binding, vnode) {\n    if ( vnode === void 0 ) vnode = {};\n\r\n  var scope = null;\r\n  if (vnode.componentInstance && isNullOrUndefined(scope)) {\r\n    scope = vnode.componentInstance.$attrs && vnode.componentInstance.$attrs['data-vv-scope'];\r\n  }\r\n\r\n  return !isNullOrUndefined(scope) ? scope : getScope(el);\r\n};\r\n\r\n/**\r\n * Checks if the node directives contains a v-model or a specified arg.\r\n * Args take priority over models.\r\n *\r\n * @return {Object}\r\n */\r\nResolver.resolveModel = function resolveModel (binding, vnode) {\r\n  if (binding.arg) {\r\n    return { expression: binding.arg };\r\n  }\r\n\r\n  var model = findModel(vnode);\r\n  if (!model) {\r\n    return null;\r\n  }\r\n\r\n  // https://github.com/vuejs/vue/blob/dev/src/core/util/lang.js#L26\r\n  var watchable = !/[^\\w.$]/.test(model.expression) && hasPath(model.expression, vnode.context);\r\n  var lazy = !!(model.modifiers && model.modifiers.lazy);\r\n\r\n  if (!watchable) {\r\n    return { expression: null, lazy: lazy };\r\n  }\r\n\r\n  return { expression: model.expression, lazy: lazy };\r\n};\r\n\r\n/**\r\n * Resolves the field name to trigger validations.\r\n * @return {String} The field name.\r\n */\r\nResolver.resolveName = function resolveName (el, vnode) {\r\n  var name = getDataAttribute(el, 'name');\r\n\r\n  if (!name && !vnode.componentInstance) {\r\n    return el.name;\r\n  }\r\n\r\n  if (!name && vnode.componentInstance && vnode.componentInstance.$attrs) {\r\n    name = vnode.componentInstance.$attrs['data-vv-name'] || vnode.componentInstance.$attrs['name'];\r\n  }\r\n\r\n  if (!name && vnode.componentInstance) {\r\n    var config = Resolver.getCtorConfig(vnode);\r\n    if (config && isCallable(config.name)) {\r\n      var boundGetter = config.name.bind(vnode.componentInstance);\r\n\r\n      return boundGetter();\r\n    }\r\n\r\n    return vnode.componentInstance.name;\r\n  }\r\n\r\n  return name;\r\n};\r\n\r\n/**\r\n * Returns a value getter input type.\r\n */\r\nResolver.resolveGetter = function resolveGetter (el, vnode, model) {\r\n  if (model && model.expression) {\r\n    return function () {\r\n      return getPath(model.expression, vnode.context);\r\n    };\r\n  }\r\n\r\n  if (vnode.componentInstance) {\r\n    var path = getDataAttribute(el, 'value-path') || (vnode.componentInstance.$attrs && vnode.componentInstance.$attrs['data-vv-value-path']);\r\n    if (path) {\r\n      return function () {\r\n        return getPath(path, vnode.componentInstance);\r\n      };\r\n    }\r\n\r\n    var config = Resolver.getCtorConfig(vnode);\r\n    if (config && isCallable(config.value)) {\r\n      var boundGetter = config.value.bind(vnode.componentInstance);\r\n\r\n      return function () {\r\n        return boundGetter();\r\n      };\r\n    }\r\n\r\n    var ref = vnode.componentInstance.$options.model || { prop: 'value' };\n      var prop = ref.prop;\r\n\r\n    return function () {\r\n      return vnode.componentInstance[prop];\r\n    };\r\n  }\r\n\r\n  switch (el.type) {\r\n  case 'checkbox': return function () {\r\n    var els = document.querySelectorAll((\"input[name=\\\"\" + (el.name) + \"\\\"]\"));\r\n\r\n    els = toArray(els).filter(function (el) { return el.checked; });\r\n    if (!els.length) { return undefined; }\r\n\r\n    return els.map(function (checkbox) { return checkbox.value; });\r\n  };\r\n  case 'radio': return function () {\r\n    var els = document.querySelectorAll((\"input[name=\\\"\" + (el.name) + \"\\\"]\"));\r\n    var elm = find(els, function (el) { return el.checked; });\r\n\r\n    return elm && elm.value;\r\n  };\r\n  case 'file': return function (context) {\r\n    return toArray(el.files);\r\n  };\r\n  case 'select-multiple': return function () {\r\n    return toArray(el.options).filter(function (opt) { return opt.selected; }).map(function (opt) { return opt.value; });\r\n  };\r\n  default: return function () {\r\n    return el && el.value;\r\n  };\r\n  }\r\n};\n\nvar RULES = {};\r\n\r\nvar RuleContainer = function RuleContainer () {};\n\nvar staticAccessors = { rules: { configurable: true } };\n\nRuleContainer.add = function add (name, ref) {\n    var validate = ref.validate;\n    var options = ref.options;\n    var paramNames = ref.paramNames;\n\r\n  RULES[name] = {\r\n    validate: validate,\r\n    options: options,\r\n    paramNames: paramNames\r\n  };\r\n};\r\n\r\nstaticAccessors.rules.get = function () {\r\n  return RULES;\r\n};\r\n\r\nRuleContainer.has = function has (name) {\r\n  return !!RULES[name];\r\n};\r\n\r\nRuleContainer.isImmediate = function isImmediate (name) {\r\n  return !!(RULES[name] && RULES[name].options.immediate);\r\n};\r\n\r\nRuleContainer.isRequireRule = function isRequireRule (name) {\r\n  return !!(RULES[name] && RULES[name].options.computesRequired);\r\n};\r\n\r\nRuleContainer.isTargetRule = function isTargetRule (name) {\r\n  return !!(RULES[name] && RULES[name].options.hasTarget);\r\n};\r\n\r\nRuleContainer.remove = function remove (ruleName) {\r\n  delete RULES[ruleName];\r\n};\r\n\r\nRuleContainer.getParamNames = function getParamNames (ruleName) {\r\n  return RULES[ruleName] && RULES[ruleName].paramNames;\r\n};\r\n\r\nRuleContainer.getOptions = function getOptions (ruleName) {\r\n  return RULES[ruleName] && RULES[ruleName].options;\r\n};\r\n\r\nRuleContainer.getValidatorMethod = function getValidatorMethod (ruleName) {\r\n  return RULES[ruleName] ? RULES[ruleName].validate : null;\r\n};\n\nObject.defineProperties( RuleContainer, staticAccessors );\n\n// \r\n\r\nvar isEvent = function (evt) {\r\n  return (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) || (evt && evt.srcElement);\r\n};\r\n\r\nvar normalizeEvents = function (evts) {\r\n  if (!evts) { return []; }\r\n\r\n  return (typeof evts === 'string' ? evts.split('|') : evts);\r\n};\r\n\r\nvar supportsPassive = true;\r\n\r\nvar detectPassiveSupport = function () {\r\n  try {\r\n    var opts = Object.defineProperty({}, 'passive', {\r\n      get: function get () {\r\n        supportsPassive = true;\r\n      }\r\n    });\r\n    window.addEventListener('testPassive', null, opts);\r\n    window.removeEventListener('testPassive', null, opts);\r\n  } catch (e) {\r\n    supportsPassive = false;\r\n  }\r\n  return supportsPassive;\r\n};\r\n\r\nvar addEventListener = function (el, eventName, cb) {\r\n  el.addEventListener(eventName, cb, supportsPassive ? { passive: true } : false);\r\n};\n\n// \r\n\r\nvar DEFAULT_OPTIONS = {\r\n  targetOf: null,\r\n  immediate: false,\r\n  persist: false,\r\n  scope: null,\r\n  listen: true,\r\n  name: null,\r\n  rules: {},\r\n  vm: null,\r\n  classes: false,\r\n  validity: true,\r\n  aria: true,\r\n  events: 'input|blur',\r\n  delay: 0,\r\n  classNames: {\r\n    touched: 'touched', // the control has been blurred\r\n    untouched: 'untouched', // the control hasn't been blurred\r\n    valid: 'valid', // model is valid\r\n    invalid: 'invalid', // model is invalid\r\n    pristine: 'pristine', // control has not been interacted with\r\n    dirty: 'dirty' // control has been interacted with\r\n  }\r\n};\r\n\r\nvar Field = function Field (options) {\n  if ( options === void 0 ) options = {};\n\r\n  this.id = uniqId();\r\n  this.el = options.el;\r\n  this.updated = false;\r\n  this.dependencies = [];\r\n  this.vmId = options.vmId;\r\n  this.watchers = [];\r\n  this.events = [];\r\n  this.delay = 0;\r\n  this.rules = {};\r\n  this.forceRequired = false;\r\n  this._cacheId(options);\r\n  this.classNames = assign({}, DEFAULT_OPTIONS.classNames);\r\n  options = assign({}, DEFAULT_OPTIONS, options);\r\n  this._delay = !isNullOrUndefined(options.delay) ? options.delay : 0; // cache initial delay\r\n  this.validity = options.validity;\r\n  this.aria = options.aria;\r\n  this.flags = options.flags || createFlags();\r\n  this.vm = options.vm;\r\n  this.componentInstance = options.component;\r\n  this.ctorConfig = this.componentInstance ? getPath('$options.$_veeValidate', this.componentInstance) : undefined;\r\n  this.update(options);\r\n  // set initial value.\r\n  this.initialValue = this.value;\r\n  this.updated = false;\r\n};\n\nvar prototypeAccessors$1 = { validator: { configurable: true },isRequired: { configurable: true },isDisabled: { configurable: true },alias: { configurable: true },value: { configurable: true },bails: { configurable: true },rejectsFalse: { configurable: true } };\r\n\r\nprototypeAccessors$1.validator.get = function () {\r\n  if (!this.vm || !this.vm.$validator) {\r\n    return { validate: function () {} };\r\n  }\r\n\r\n  return this.vm.$validator;\r\n};\r\n\r\nprototypeAccessors$1.isRequired.get = function () {\r\n  return !!this.rules.required || this.forceRequired;\r\n};\r\n\r\nprototypeAccessors$1.isDisabled.get = function () {\r\n  return !!(this.componentInstance && this.componentInstance.disabled) || !!(this.el && this.el.disabled);\r\n};\r\n\r\n/**\r\n * Gets the display name (user-friendly name).\r\n */\r\nprototypeAccessors$1.alias.get = function () {\r\n  if (this._alias) {\r\n    return this._alias;\r\n  }\r\n\r\n  var alias = null;\r\n  if (this.ctorConfig && this.ctorConfig.alias) {\r\n    alias = isCallable(this.ctorConfig.alias) ? this.ctorConfig.alias.call(this.componentInstance) : this.ctorConfig.alias;\r\n  }\r\n\r\n  if (!alias && this.el) {\r\n    alias = getDataAttribute(this.el, 'as');\r\n  }\r\n\r\n  if (!alias && this.componentInstance) {\r\n    return this.componentInstance.$attrs && this.componentInstance.$attrs['data-vv-as'];\r\n  }\r\n\r\n  return alias;\r\n};\r\n\r\n/**\r\n * Gets the input value.\r\n */\r\n\r\nprototypeAccessors$1.value.get = function () {\r\n  if (!isCallable(this.getter)) {\r\n    return undefined;\r\n  }\r\n\r\n  return this.getter();\r\n};\r\n\r\nprototypeAccessors$1.bails.get = function () {\r\n  return this._bails;\r\n};\r\n\r\n/**\r\n * If the field rejects false as a valid value for the required rule.\r\n */\r\n\r\nprototypeAccessors$1.rejectsFalse.get = function () {\r\n  if (this.componentInstance && this.ctorConfig) {\r\n    return !!this.ctorConfig.rejectsFalse;\r\n  }\r\n\r\n  if (!this.el) {\r\n    return false;\r\n  }\r\n\r\n  return this.el.type === 'checkbox';\r\n};\r\n\r\n/**\r\n * Determines if the instance matches the options provided.\r\n */\r\nField.prototype.matches = function matches (options) {\n    var this$1 = this;\n\r\n  if (!options) {\r\n    return true;\r\n  }\r\n\r\n  if (options.id) {\r\n    return this.id === options.id;\r\n  }\r\n\r\n  var matchesComponentId = isNullOrUndefined(options.vmId) ? function () { return true; } : function (id) { return id === this$1.vmId; };\r\n  if (!matchesComponentId(options.vmId)) {\r\n    return false;\r\n  }\r\n\r\n  if (options.name === undefined && options.scope === undefined) {\r\n    return true;\r\n  }\r\n\r\n  if (options.scope === undefined) {\r\n    return this.name === options.name;\r\n  }\r\n\r\n  if (options.name === undefined) {\r\n    return this.scope === options.scope;\r\n  }\r\n\r\n  return options.name === this.name && options.scope === this.scope;\r\n};\r\n\r\n/**\r\n * Caches the field id.\r\n */\r\nField.prototype._cacheId = function _cacheId (options) {\r\n  if (this.el && !options.targetOf) {\r\n    this.el._veeValidateId = this.id;\r\n  }\r\n};\r\n\r\n/**\r\n * Keeps a reference of the most current validation run.\r\n */\r\nField.prototype.waitFor = function waitFor (pendingPromise) {\r\n  this._waitingFor = pendingPromise;\r\n};\r\n\r\nField.prototype.isWaitingFor = function isWaitingFor (promise) {\r\n  return this._waitingFor === promise;\r\n};\r\n\r\n/**\r\n * Updates the field with changed data.\r\n */\r\nField.prototype.update = function update (options) {\r\n  this.targetOf = options.targetOf || null;\r\n  this.immediate = options.immediate || this.immediate || false;\r\n  this.persist = options.persist || this.persist || false;\r\n\r\n  // update errors scope if the field scope was changed.\r\n  if (!isNullOrUndefined(options.scope) && options.scope !== this.scope && isCallable(this.validator.update)) {\r\n    this.validator.update(this.id, { scope: options.scope });\r\n  }\r\n  this.scope = !isNullOrUndefined(options.scope) ? options.scope\r\n    : !isNullOrUndefined(this.scope) ? this.scope : null;\r\n  this.name = (!isNullOrUndefined(options.name) ? String(options.name) : options.name) || this.name || null;\r\n  this.rules = options.rules !== undefined ? normalizeRules(options.rules) : this.rules;\r\n  this._bails = options.bails !== undefined ? options.bails : this._bails;\r\n  this.model = options.model || this.model;\r\n  this.listen = options.listen !== undefined ? options.listen : this.listen;\r\n  this.classes = (options.classes || this.classes || false) && !this.componentInstance;\r\n  this.classNames = isObject(options.classNames) ? merge(this.classNames, options.classNames) : this.classNames;\r\n  this.getter = isCallable(options.getter) ? options.getter : this.getter;\r\n  this._alias = options.alias || this._alias;\r\n  this.events = (options.events) ? normalizeEvents(options.events) : this.events;\r\n  this.delay = makeDelayObject(this.events, options.delay || this.delay, this._delay);\r\n  this.updateDependencies();\r\n  this.addActionListeners();\r\n\r\n  if ( true && !this.name && !this.targetOf) {\r\n    warn('A field is missing a \"name\" or \"data-vv-name\" attribute');\r\n  }\r\n\r\n  // update required flag flags\r\n  if (options.rules !== undefined) {\r\n    this.flags.required = this.isRequired;\r\n  }\r\n\r\n  // validate if it was validated before and field was updated and there was a rules mutation.\r\n  if (this.flags.validated && options.rules !== undefined && this.updated) {\r\n    this.validator.validate((\"#\" + (this.id)));\r\n  }\r\n\r\n  this.updated = true;\r\n  this.addValueListeners();\r\n\r\n  // no need to continue.\r\n  if (!this.el) {\r\n    return;\r\n  }\r\n  this.updateClasses();\r\n  this.updateAriaAttrs();\r\n};\r\n\r\n/**\r\n * Resets field flags and errors.\r\n */\r\nField.prototype.reset = function reset () {\n    var this$1 = this;\n\r\n  if (this._cancellationToken) {\r\n    this._cancellationToken.cancelled = true;\r\n    delete this._cancellationToken;\r\n  }\r\n\r\n  var defaults = createFlags();\r\n  Object.keys(this.flags).filter(function (flag) { return flag !== 'required'; }).forEach(function (flag) {\r\n    this$1.flags[flag] = defaults[flag];\r\n  });\r\n\r\n  this.addValueListeners();\r\n  this.addActionListeners();\r\n  this.updateClasses(true);\r\n  this.updateAriaAttrs();\r\n  this.updateCustomValidity();\r\n};\r\n\r\n/**\r\n * Sets the flags and their negated counterparts, and updates the classes and re-adds action listeners.\r\n */\r\nField.prototype.setFlags = function setFlags (flags) {\n    var this$1 = this;\n\r\n  var negated = {\r\n    pristine: 'dirty',\r\n    dirty: 'pristine',\r\n    valid: 'invalid',\r\n    invalid: 'valid',\r\n    touched: 'untouched',\r\n    untouched: 'touched'\r\n  };\r\n\r\n  Object.keys(flags).forEach(function (flag) {\r\n    this$1.flags[flag] = flags[flag];\r\n    // if it has a negation and was not specified, set it as well.\r\n    if (negated[flag] && flags[negated[flag]] === undefined) {\r\n      this$1.flags[negated[flag]] = !flags[flag];\r\n    }\r\n  });\r\n\r\n  if (\r\n    flags.untouched !== undefined ||\r\n    flags.touched !== undefined ||\r\n    flags.dirty !== undefined ||\r\n    flags.pristine !== undefined\r\n  ) {\r\n    this.addActionListeners();\r\n  }\r\n  this.updateClasses();\r\n  this.updateAriaAttrs();\r\n  this.updateCustomValidity();\r\n};\r\n\r\n/**\r\n * Determines if the field requires references to target fields.\r\n*/\r\nField.prototype.updateDependencies = function updateDependencies () {\n    var this$1 = this;\n\r\n  // reset dependencies.\r\n  this.dependencies.forEach(function (d) { return d.field.destroy(); });\r\n  this.dependencies = [];\r\n\r\n  // we get the selectors for each field.\r\n  var fields = Object.keys(this.rules).reduce(function (prev, r) {\r\n    if (RuleContainer.isTargetRule(r)) {\r\n      prev.push({ selector: this$1.rules[r][0], name: r });\r\n    }\r\n\r\n    return prev;\r\n  }, []);\r\n\r\n  if (!fields.length || !this.vm || !this.vm.$el) { return; }\r\n\r\n  // must be contained within the same component, so we use the vm root element constrain our dom search.\r\n  fields.forEach(function (ref$1) {\n      var selector = ref$1.selector;\n      var name = ref$1.name;\n\r\n    var ref = this$1.vm.$refs[selector];\r\n    var el = Array.isArray(ref) ? ref[0] : ref;\r\n    if (!el) {\r\n      return;\r\n    }\r\n\r\n    var options = {\r\n      vm: this$1.vm,\r\n      classes: this$1.classes,\r\n      classNames: this$1.classNames,\r\n      delay: this$1.delay,\r\n      scope: this$1.scope,\r\n      events: this$1.events.join('|'),\r\n      immediate: this$1.immediate,\r\n      targetOf: this$1.id\r\n    };\r\n\r\n    // probably a component.\r\n    if (isCallable(el.$watch)) {\r\n      options.component = el;\r\n      options.el = el.$el;\r\n      options.getter = Resolver.resolveGetter(el.$el, el.$vnode);\r\n    } else {\r\n      options.el = el;\r\n      options.getter = Resolver.resolveGetter(el, {});\r\n    }\r\n\r\n    this$1.dependencies.push({ name: name, field: new Field(options) });\r\n  });\r\n};\r\n\r\n/**\r\n * Removes listeners.\r\n */\r\nField.prototype.unwatch = function unwatch (tag) {\n    if ( tag === void 0 ) tag = null;\n\r\n  if (!tag) {\r\n    this.watchers.forEach(function (w) { return w.unwatch(); });\r\n    this.watchers = [];\r\n    return;\r\n  }\r\n\r\n  this.watchers.filter(function (w) { return tag.test(w.tag); }).forEach(function (w) { return w.unwatch(); });\r\n  this.watchers = this.watchers.filter(function (w) { return !tag.test(w.tag); });\r\n};\r\n\r\n/**\r\n * Updates the element classes depending on each field flag status.\r\n */\r\nField.prototype.updateClasses = function updateClasses (isReset) {\n    var this$1 = this;\n    if ( isReset === void 0 ) isReset = false;\n\r\n  if (!this.classes || this.isDisabled) { return; }\r\n  var applyClasses = function (el) {\r\n    toggleClass(el, this$1.classNames.dirty, this$1.flags.dirty);\r\n    toggleClass(el, this$1.classNames.pristine, this$1.flags.pristine);\r\n    toggleClass(el, this$1.classNames.touched, this$1.flags.touched);\r\n    toggleClass(el, this$1.classNames.untouched, this$1.flags.untouched);\r\n\r\n    // remove valid/invalid classes on reset.\r\n    if (isReset) {\r\n      toggleClass(el, this$1.classNames.valid, false);\r\n      toggleClass(el, this$1.classNames.invalid, false);\r\n    }\r\n\r\n    // make sure we don't set any classes if the state is undetermined.\r\n    if (!isNullOrUndefined(this$1.flags.valid) && this$1.flags.validated) {\r\n      toggleClass(el, this$1.classNames.valid, this$1.flags.valid);\r\n    }\r\n\r\n    if (!isNullOrUndefined(this$1.flags.invalid) && this$1.flags.validated) {\r\n      toggleClass(el, this$1.classNames.invalid, this$1.flags.invalid);\r\n    }\r\n  };\r\n\r\n  if (!isCheckboxOrRadioInput(this.el)) {\r\n    applyClasses(this.el);\r\n    return;\r\n  }\r\n\r\n  var els = document.querySelectorAll((\"input[name=\\\"\" + (this.el.name) + \"\\\"]\"));\r\n  toArray(els).forEach(applyClasses);\r\n};\r\n\r\n/**\r\n * Adds the listeners required for automatic classes and some flags.\r\n */\r\nField.prototype.addActionListeners = function addActionListeners () {\n    var this$1 = this;\n\r\n  // remove previous listeners.\r\n  this.unwatch(/class/);\r\n\r\n  if (!this.el) { return; }\r\n\r\n  var onBlur = function () {\r\n    this$1.flags.touched = true;\r\n    this$1.flags.untouched = false;\r\n    if (this$1.classes) {\r\n      toggleClass(this$1.el, this$1.classNames.touched, true);\r\n      toggleClass(this$1.el, this$1.classNames.untouched, false);\r\n    }\r\n\r\n    // only needed once.\r\n    this$1.unwatch(/^class_blur$/);\r\n  };\r\n\r\n  var inputEvent = isTextInput(this.el) ? 'input' : 'change';\r\n  var onInput = function () {\r\n    this$1.flags.dirty = true;\r\n    this$1.flags.pristine = false;\r\n    if (this$1.classes) {\r\n      toggleClass(this$1.el, this$1.classNames.pristine, false);\r\n      toggleClass(this$1.el, this$1.classNames.dirty, true);\r\n    }\r\n\r\n    // only needed once.\r\n    this$1.unwatch(/^class_input$/);\r\n  };\r\n\r\n  if (this.componentInstance && isCallable(this.componentInstance.$once)) {\r\n    this.componentInstance.$once('input', onInput);\r\n    this.componentInstance.$once('blur', onBlur);\r\n    this.watchers.push({\r\n      tag: 'class_input',\r\n      unwatch: function () {\r\n        this$1.componentInstance.$off('input', onInput);\r\n      }\r\n    });\r\n    this.watchers.push({\r\n      tag: 'class_blur',\r\n      unwatch: function () {\r\n        this$1.componentInstance.$off('blur', onBlur);\r\n      }\r\n    });\r\n    return;\r\n  }\r\n\r\n  if (!this.el) { return; }\r\n\r\n  addEventListener(this.el, inputEvent, onInput);\r\n  // Checkboxes and radio buttons on Mac don't emit blur naturally, so we listen on click instead.\r\n  var blurEvent = isCheckboxOrRadioInput(this.el) ? 'change' : 'blur';\r\n  addEventListener(this.el, blurEvent, onBlur);\r\n  this.watchers.push({\r\n    tag: 'class_input',\r\n    unwatch: function () {\r\n      this$1.el.removeEventListener(inputEvent, onInput);\r\n    }\r\n  });\r\n\r\n  this.watchers.push({\r\n    tag: 'class_blur',\r\n    unwatch: function () {\r\n      this$1.el.removeEventListener(blurEvent, onBlur);\r\n    }\r\n  });\r\n};\r\n\r\nField.prototype.checkValueChanged = function checkValueChanged () {\r\n  // handle some people initialize the value to null, since text inputs have empty string value.\r\n  if (this.initialValue === null && this.value === '' && isTextInput(this.el)) {\r\n    return false;\r\n  }\r\n\r\n  return this.value !== this.initialValue;\r\n};\r\n\r\n/**\r\n * Determines the suitable primary event to listen for.\r\n */\r\nField.prototype._determineInputEvent = function _determineInputEvent () {\r\n  // if its a custom component, use the customized model event or the input event.\r\n  if (this.componentInstance) {\r\n    return (this.componentInstance.$options.model && this.componentInstance.$options.model.event) || 'input';\r\n  }\r\n\r\n  if (this.model && this.model.lazy) {\r\n    return 'change';\r\n  }\r\n\r\n  if (isTextInput(this.el)) {\r\n    return 'input';\r\n  }\r\n\r\n  return 'change';\r\n};\r\n\r\n/**\r\n * Determines the list of events to listen to.\r\n */\r\nField.prototype._determineEventList = function _determineEventList (defaultInputEvent) {\n    var this$1 = this;\n\r\n  // if no event is configured, or it is a component or a text input then respect the user choice.\r\n  if (!this.events.length || this.componentInstance || isTextInput(this.el)) {\r\n    return [].concat( this.events ).map(function (evt) {\r\n      if (evt === 'input' && this$1.model && this$1.model.lazy) {\r\n        return 'change';\r\n      }\r\n\r\n      return evt;\r\n    });\r\n  }\r\n\r\n  // force suitable event for non-text type fields.\r\n  return this.events.map(function (e) {\r\n    if (e === 'input') {\r\n      return defaultInputEvent;\r\n    }\r\n\r\n    return e;\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the listeners required for validation.\r\n */\r\nField.prototype.addValueListeners = function addValueListeners () {\n    var this$1 = this;\n\r\n  this.unwatch(/^input_.+/);\r\n  if (!this.listen || !this.el) { return; }\r\n\r\n  var token = { cancelled: false };\r\n  var fn = this.targetOf ? function () {\r\n    this$1.flags.changed = this$1.checkValueChanged();    this$1.validator.validate((\"#\" + (this$1.targetOf)));\r\n  } : function () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\r\n    // if its a DOM event, resolve the value, otherwise use the first parameter as the value.\r\n    if (args.length === 0 || isEvent(args[0])) {\r\n      args[0] = this$1.value;\r\n    }\r\n\r\n    this$1.flags.changed = this$1.checkValueChanged();\r\n    this$1.validator.validate((\"#\" + (this$1.id)), args[0]);\r\n  };\r\n\r\n  var inputEvent = this._determineInputEvent();\r\n  var events = this._determineEventList(inputEvent);\r\n\r\n  // if there is a model and an on input validation is requested.\r\n  if (this.model && includes(events, inputEvent)) {\r\n    var ctx = null;\r\n    var expression = this.model.expression;\r\n    // if its watchable from the context vm.\r\n    if (this.model.expression) {\r\n      ctx = this.vm;\r\n      expression = this.model.expression;\r\n    }\r\n\r\n    // watch it from the custom component vm instead.\r\n    if (!expression && this.componentInstance && this.componentInstance.$options.model) {\r\n      ctx = this.componentInstance;\r\n      expression = this.componentInstance.$options.model.prop || 'value';\r\n    }\r\n\r\n    if (ctx && expression) {\r\n      var debouncedFn = debounce(fn, this.delay[inputEvent], token);\r\n      var unwatch = ctx.$watch(expression, function () {\n          var args = [], len = arguments.length;\n          while ( len-- ) args[ len ] = arguments[ len ];\n\r\n        this$1.flags.pending = true;\r\n        this$1._cancellationToken = token;\r\n        debouncedFn.apply(void 0, args);\r\n      });\r\n      this.watchers.push({\r\n        tag: 'input_model',\r\n        unwatch: unwatch\r\n      });\r\n\r\n      // filter out input event as it is already handled by the watcher API.\r\n      events = events.filter(function (e) { return e !== inputEvent; });\r\n    }\r\n  }\r\n\r\n  // Add events.\r\n  events.forEach(function (e) {\r\n    var debouncedFn = debounce(fn, this$1.delay[e], token);\r\n    var validate = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\r\n      this$1.flags.pending = true;\r\n      this$1._cancellationToken = token;\r\n      debouncedFn.apply(void 0, args);\r\n    };\r\n\r\n    this$1._addComponentEventListener(e, validate);\r\n    this$1._addHTMLEventListener(e, validate);\r\n  });\r\n};\r\n\r\nField.prototype._addComponentEventListener = function _addComponentEventListener (evt, validate) {\n    var this$1 = this;\n\r\n  if (!this.componentInstance) { return; }\r\n\r\n  this.componentInstance.$on(evt, validate);\r\n  this.watchers.push({\r\n    tag: 'input_vue',\r\n    unwatch: function () {\r\n      this$1.componentInstance.$off(evt, validate);\r\n    }\r\n  });\r\n};\r\n\r\nField.prototype._addHTMLEventListener = function _addHTMLEventListener (evt, validate) {\n    var this$1 = this;\n\r\n  if (!this.el || this.componentInstance) { return; }\r\n\r\n  // listen for the current element.\r\n  var addListener = function (el) {\r\n    addEventListener(el, evt, validate);\r\n    this$1.watchers.push({\r\n      tag: 'input_native',\r\n      unwatch: function () {\r\n        el.removeEventListener(evt, validate);\r\n      }\r\n    });\r\n  };\r\n\r\n  addListener(this.el);\r\n  if (!isCheckboxOrRadioInput(this.el)) {\r\n    return;\r\n  }\r\n\r\n  var els = document.querySelectorAll((\"input[name=\\\"\" + (this.el.name) + \"\\\"]\"));\r\n  toArray(els).forEach(function (el) {\r\n    // skip if it is added by v-validate and is not the current element.\r\n    if (el._veeValidateId && el !== this$1.el) {\r\n      return;\r\n    }\r\n\r\n    addListener(el);\r\n  });\r\n};\r\n\r\n/**\r\n * Updates aria attributes on the element.\r\n */\r\nField.prototype.updateAriaAttrs = function updateAriaAttrs () {\n    var this$1 = this;\n\r\n  if (!this.aria || !this.el || !isCallable(this.el.setAttribute)) { return; }\r\n\r\n  var applyAriaAttrs = function (el) {\r\n    el.setAttribute('aria-required', this$1.isRequired ? 'true' : 'false');\r\n    el.setAttribute('aria-invalid', this$1.flags.invalid ? 'true' : 'false');\r\n  };\r\n\r\n  if (!isCheckboxOrRadioInput(this.el)) {\r\n    applyAriaAttrs(this.el);\r\n    return;\r\n  }\r\n\r\n  var els = document.querySelectorAll((\"input[name=\\\"\" + (this.el.name) + \"\\\"]\"));\r\n  toArray(els).forEach(applyAriaAttrs);\r\n};\r\n\r\n/**\r\n * Updates the custom validity for the field.\r\n */\r\nField.prototype.updateCustomValidity = function updateCustomValidity () {\r\n  if (!this.validity || !this.el || !isCallable(this.el.setCustomValidity) || !this.validator.errors) { return; }\r\n\r\n  this.el.setCustomValidity(this.flags.valid ? '' : (this.validator.errors.firstById(this.id) || ''));\r\n};\r\n\r\n/**\r\n * Removes all listeners.\r\n */\r\nField.prototype.destroy = function destroy () {\r\n  // ignore the result of any ongoing validation.\r\n  if (this._cancellationToken) {\r\n    this._cancellationToken.cancelled = true;\r\n  }\r\n\r\n  this.unwatch();\r\n  this.dependencies.forEach(function (d) { return d.field.destroy(); });\r\n  this.dependencies = [];\r\n};\n\nObject.defineProperties( Field.prototype, prototypeAccessors$1 );\n\n// \r\n\r\nvar FieldBag = function FieldBag (items) {\n  if ( items === void 0 ) items = [];\n\r\n  this.items = items || [];\r\n};\n\nvar prototypeAccessors$2 = { length: { configurable: true } };\r\n\r\nFieldBag.prototype[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = function () {\n    var this$1 = this;\n\r\n  var index = 0;\r\n  return {\r\n    next: function () {\r\n      return { value: this$1.items[index++], done: index > this$1.items.length };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the current items length.\r\n */\r\n\r\nprototypeAccessors$2.length.get = function () {\r\n  return this.items.length;\r\n};\r\n\r\n/**\r\n * Finds the first field that matches the provided matcher object.\r\n */\r\nFieldBag.prototype.find = function find$1 (matcher) {\r\n  return find(this.items, function (item) { return item.matches(matcher); });\r\n};\r\n\r\n/**\r\n * Filters the items down to the matched fields.\r\n */\r\nFieldBag.prototype.filter = function filter (matcher) {\r\n  // multiple matchers to be tried.\r\n  if (Array.isArray(matcher)) {\r\n    return this.items.filter(function (item) { return matcher.some(function (m) { return item.matches(m); }); });\r\n  }\r\n\r\n  return this.items.filter(function (item) { return item.matches(matcher); });\r\n};\r\n\r\n/**\r\n * Maps the field items using the mapping function.\r\n */\r\nFieldBag.prototype.map = function map (mapper) {\r\n  return this.items.map(mapper);\r\n};\r\n\r\n/**\r\n * Finds and removes the first field that matches the provided matcher object, returns the removed item.\r\n */\r\nFieldBag.prototype.remove = function remove (matcher) {\r\n  var item = null;\r\n  if (matcher instanceof Field) {\r\n    item = matcher;\r\n  } else {\r\n    item = this.find(matcher);\r\n  }\r\n\r\n  if (!item) { return null; }\r\n\r\n  var index = this.items.indexOf(item);\r\n  this.items.splice(index, 1);\r\n\r\n  return item;\r\n};\r\n\r\n/**\r\n * Adds a field item to the list.\r\n */\r\nFieldBag.prototype.push = function push (item) {\r\n  if (! (item instanceof Field)) {\r\n    throw createError('FieldBag only accepts instances of Field that has an id defined.');\r\n  }\r\n\r\n  if (!item.id) {\r\n    throw createError('Field id must be defined.');\r\n  }\r\n\r\n  if (this.find({ id: item.id })) {\r\n    throw createError((\"Field with id \" + (item.id) + \" is already added.\"));\r\n  }\r\n\r\n  this.items.push(item);\r\n};\n\nObject.defineProperties( FieldBag.prototype, prototypeAccessors$2 );\n\nvar ScopedValidator = function ScopedValidator (base, vm) {\r\n  this.id = vm._uid;\r\n  this._base = base;\r\n  this._paused = false;\r\n\r\n  // create a mirror bag with limited component scope.\r\n  this.errors = new ErrorBag(base.errors, this.id);\r\n};\n\nvar prototypeAccessors$3 = { flags: { configurable: true },rules: { configurable: true },fields: { configurable: true },dictionary: { configurable: true },locale: { configurable: true } };\r\n\r\nprototypeAccessors$3.flags.get = function () {\n    var this$1 = this;\n\r\n  return this._base.fields.items.filter(function (f) { return f.vmId === this$1.id; }).reduce(function (acc, field) {\r\n    if (field.scope) {\r\n      if (!acc[(\"$\" + (field.scope))]) {\r\n        acc[(\"$\" + (field.scope))] = {};\r\n      }\r\n\r\n      acc[(\"$\" + (field.scope))][field.name] = field.flags;\r\n    }\r\n\r\n    acc[field.name] = field.flags;\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nprototypeAccessors$3.rules.get = function () {\r\n  return this._base.rules;\r\n};\r\n\r\nprototypeAccessors$3.fields.get = function () {\r\n  return new FieldBag(this._base.fields.filter({ vmId: this.id }));\r\n};\r\n\r\nprototypeAccessors$3.dictionary.get = function () {\r\n  return this._base.dictionary;\r\n};\r\n\r\nprototypeAccessors$3.locale.get = function () {\r\n  return this._base.locale;\r\n};\r\n\r\nprototypeAccessors$3.locale.set = function (val) {\r\n  this._base.locale = val;\r\n};\r\n\r\nScopedValidator.prototype.localize = function localize () {\n    var ref;\n\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\r\n  return (ref = this._base).localize.apply(ref, args);\r\n};\r\n\r\nScopedValidator.prototype.update = function update () {\n    var ref;\n\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\r\n  return (ref = this._base).update.apply(ref, args);\r\n};\r\n\r\nScopedValidator.prototype.attach = function attach (opts) {\r\n  var attachOpts = assign({}, opts, { vmId: this.id });\r\n\r\n  return this._base.attach(attachOpts);\r\n};\r\n\r\nScopedValidator.prototype.pause = function pause () {\r\n  this._paused = true;\r\n};\r\n\r\nScopedValidator.prototype.resume = function resume () {\r\n  this._paused = false;\r\n};\r\n\r\nScopedValidator.prototype.remove = function remove (ruleName) {\r\n  return this._base.remove(ruleName);\r\n};\r\n\r\nScopedValidator.prototype.detach = function detach (name, scope) {\r\n  return this._base.detach(name, scope, this.id);\r\n};\r\n\r\nScopedValidator.prototype.extend = function extend () {\n    var ref;\n\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\r\n  return (ref = this._base).extend.apply(ref, args);\r\n};\r\n\r\nScopedValidator.prototype.validate = function validate (descriptor, value, opts) {\n    if ( opts === void 0 ) opts = {};\n\r\n  if (this._paused) { return Promise.resolve(true); }\r\n\r\n  return this._base.validate(descriptor, value, assign({}, { vmId: this.id }, opts || {}));\r\n};\r\n\r\nScopedValidator.prototype.validateAll = function validateAll (values$$1, opts) {\n    if ( opts === void 0 ) opts = {};\n\r\n  if (this._paused) { return Promise.resolve(true); }\r\n\r\n  return this._base.validateAll(values$$1, assign({}, { vmId: this.id }, opts || {}));\r\n};\r\n\r\nScopedValidator.prototype.validateScopes = function validateScopes (opts) {\n    if ( opts === void 0 ) opts = {};\n\r\n  if (this._paused) { return Promise.resolve(true); }\r\n\r\n  return this._base.validateScopes(assign({}, { vmId: this.id }, opts || {}));\r\n};\r\n\r\nScopedValidator.prototype.destroy = function destroy () {\r\n  delete this.id;\r\n  delete this._base;\r\n};\r\n\r\nScopedValidator.prototype.reset = function reset (matcher) {\r\n  return this._base.reset(Object.assign({}, matcher || {}, { vmId: this.id }));\r\n};\r\n\r\nScopedValidator.prototype.flag = function flag () {\n    var ref;\n\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\r\n  return (ref = this._base).flag.apply(ref, args.concat( [this.id] ));\r\n};\n\nObject.defineProperties( ScopedValidator.prototype, prototypeAccessors$3 );\n\n// \r\n\r\n/**\r\n * Checks if a parent validator instance was requested.\r\n */\r\nvar requestsValidator = function (injections) {\r\n  if (isObject(injections) && injections.$validator) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nvar mixin = {\r\n  provide: function provide () {\r\n    if (this.$validator && !isBuiltInComponent(this.$vnode)) {\r\n      return {\r\n        $validator: this.$validator\r\n      };\r\n    }\r\n\r\n    return {};\r\n  },\r\n  beforeCreate: function beforeCreate () {\r\n    // if built in do nothing.\r\n    if (isBuiltInComponent(this.$vnode) || this.$options.$__veeInject === false) {\r\n      return;\r\n    }\r\n\r\n    // if its a root instance set the config if it exists.\r\n    if (!this.$parent) {\r\n      pluginInstance.configure(this.$options.$_veeValidate || {});\r\n    }\r\n\r\n    var options = pluginInstance.resolveConfig(this);\r\n\r\n    // if its a root instance, inject anyways, or if it requested a new instance.\r\n    if (!this.$parent || (this.$options.$_veeValidate && /new/.test(this.$options.$_veeValidate.validator))) {\r\n      this.$validator = new ScopedValidator(pluginInstance._validator, this);\r\n    }\r\n\r\n    var requested = requestsValidator(this.$options.inject);\r\n\r\n    // if automatic injection is enabled and no instance was requested.\r\n    if (! this.$validator && options.inject && !requested) {\r\n      this.$validator = new ScopedValidator(pluginInstance._validator, this);\r\n    }\r\n\r\n    // don't inject errors or fieldBag as no validator was resolved.\r\n    if (! requested && ! this.$validator) {\r\n      return;\r\n    }\r\n\r\n    // There is a validator but it isn't injected, mark as reactive.\r\n    if (!requested && this.$validator) {\r\n      var Vue = this.$options._base; // the vue constructor.\r\n      Vue.util.defineReactive(this.$validator, 'errors', this.$validator.errors);\r\n    }\r\n\r\n    if (! this.$options.computed) {\r\n      this.$options.computed = {};\r\n    }\r\n\r\n    this.$options.computed[options.errorBagName || 'errors'] = function errorBagGetter () {\r\n      return this.$validator.errors;\r\n    };\r\n    this.$options.computed[options.fieldsBagName || 'fields'] = function fieldBagGetter () {\r\n      return this.$validator.fields.items.reduce(function (acc, field) {\r\n        if (field.scope) {\r\n          if (!acc[(\"$\" + (field.scope))]) {\r\n            acc[(\"$\" + (field.scope))] = {};\r\n          }\r\n\r\n          acc[(\"$\" + (field.scope))][field.name] = field.flags;\r\n\r\n          return acc;\r\n        }\r\n\r\n        acc[field.name] = field.flags;\r\n\r\n        return acc;\r\n      }, {});\r\n    };\r\n  },\r\n  beforeDestroy: function beforeDestroy () {\r\n    if (this.$validator && this._uid === this.$validator.id) {\r\n      this.$validator.errors.clear(); // remove errors generated by this component.\r\n    }\r\n  }\r\n};\n\n// \r\n\r\n/**\r\n * Finds the requested field by id from the context object.\r\n */\r\nfunction findField (el, context) {\r\n  if (!context || !context.$validator) {\r\n    return null;\r\n  }\r\n\r\n  return context.$validator.fields.find({ id: el._veeValidateId });\r\n}\r\nvar directive = {\r\n  bind: function bind (el, binding, vnode) {\r\n    var validator = vnode.context.$validator;\r\n    if (!validator) {\r\n      if (true) {\r\n        warn(\"No validator instance is present on vm, did you forget to inject '$validator'?\");\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    var fieldOptions = Resolver.generate(el, binding, vnode);\r\n    validator.attach(fieldOptions);\r\n  },\r\n  inserted: function inserted (el, binding, vnode) {\r\n    var field = findField(el, vnode.context);\r\n    var scope = Resolver.resolveScope(el, binding, vnode);\r\n\r\n    // skip if scope hasn't changed.\r\n    if (!field || scope === field.scope) { return; }\r\n\r\n    // only update scope.\r\n    field.update({ scope: scope });\r\n\r\n    // allows the field to re-evaluated once more in the update hook.\r\n    field.updated = false;\r\n  },\r\n  update: function update (el, binding, vnode) {\r\n    var field = findField(el, vnode.context);\r\n\r\n    // make sure we don't do unneccasary work if no important change was done.\r\n    if (!field || (field.updated && isEqual(binding.value, binding.oldValue))) { return; }\r\n    var scope = Resolver.resolveScope(el, binding, vnode);\r\n    var rules = Resolver.resolveRules(el, binding, vnode);\r\n\r\n    field.update({\r\n      scope: scope,\r\n      rules: rules\r\n    });\r\n  },\r\n  unbind: function unbind (el, binding, ref) {\n    var context = ref.context;\n\r\n    var field = findField(el, context);\r\n    if (!field) { return; }\r\n\r\n    context.$validator.detach(field);\r\n  }\r\n};\n\n// \r\n\r\nvar Validator = function Validator (validations, options) {\n  if ( options === void 0 ) options = { fastExit: true };\n\r\n  this.errors = new ErrorBag();\r\n  this.fields = new FieldBag();\r\n  this._createFields(validations);\r\n  this.paused = false;\r\n  this.fastExit = !isNullOrUndefined(options && options.fastExit) ? options.fastExit : true;\r\n};\n\nvar prototypeAccessors$4 = { rules: { configurable: true },dictionary: { configurable: true },flags: { configurable: true },locale: { configurable: true } };\nvar staticAccessors$1 = { rules: { configurable: true },dictionary: { configurable: true },locale: { configurable: true } };\r\n\r\nstaticAccessors$1.rules.get = function () {\r\n  return RuleContainer.rules;\r\n};\r\n\r\nprototypeAccessors$4.rules.get = function () {\r\n  return RuleContainer.rules;\r\n};\r\n\r\nprototypeAccessors$4.dictionary.get = function () {\r\n  return VeeValidate$1.i18nDriver;\r\n};\r\n\r\nstaticAccessors$1.dictionary.get = function () {\r\n  return VeeValidate$1.i18nDriver;\r\n};\r\n\r\nprototypeAccessors$4.flags.get = function () {\r\n  return this.fields.items.reduce(function (acc, field) {\n      var obj;\n\r\n    if (field.scope) {\r\n      acc[(\"$\" + (field.scope))] = ( obj = {}, obj[field.name] = field.flags, obj );\r\n\r\n      return acc;\r\n    }\r\n\r\n    acc[field.name] = field.flags;\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\n/**\r\n * Getter for the current locale.\r\n */\r\nprototypeAccessors$4.locale.get = function () {\r\n  return Validator.locale;\r\n};\r\n\r\n/**\r\n * Setter for the validator locale.\r\n */\r\nprototypeAccessors$4.locale.set = function (value) {\r\n  Validator.locale = value;\r\n};\r\n\r\nstaticAccessors$1.locale.get = function () {\r\n  return VeeValidate$1.i18nDriver.locale;\r\n};\r\n\r\n/**\r\n * Setter for the validator locale.\r\n */\r\nstaticAccessors$1.locale.set = function (value) {\r\n  var hasChanged = value !== VeeValidate$1.i18nDriver.locale;\r\n  VeeValidate$1.i18nDriver.locale = value;\r\n  if (hasChanged && VeeValidate$1.instance && VeeValidate$1.instance._vm) {\r\n    VeeValidate$1.instance._vm.$emit('localeChanged');\r\n  }\r\n};\r\n\r\n/**\r\n * Static constructor.\r\n */\r\nValidator.create = function create (validations, options) {\r\n  return new Validator(validations, options);\r\n};\r\n\r\n/**\r\n * Adds a custom validator to the list of validation rules.\r\n */\r\nValidator.extend = function extend (name, validator, options) {\n    if ( options === void 0 ) options = {};\n\r\n  Validator._guardExtend(name, validator);\r\n  Validator._merge(name, {\r\n    validator: validator,\r\n    paramNames: options && options.paramNames,\r\n    options: assign({}, { hasTarget: false, immediate: true }, options || {})\r\n  });\r\n};\r\n\r\n/**\r\n * Removes a rule from the list of validators.\r\n */\r\nValidator.remove = function remove (name) {\r\n  RuleContainer.remove(name);\r\n};\r\n\r\n/**\r\n * Checks if the given rule name is a rule that targets other fields.\r\n */\r\nValidator.isTargetRule = function isTargetRule (name) {\r\n  return RuleContainer.isTargetRule(name);\r\n};\r\n\r\n/**\r\n * Adds and sets the current locale for the validator.\r\n */\r\nValidator.prototype.localize = function localize (lang, dictionary) {\r\n  Validator.localize(lang, dictionary);\r\n};\r\n\r\n/**\r\n * Adds and sets the current locale for the validator.\r\n */\r\nValidator.localize = function localize (lang, dictionary) {\n    var obj;\n\r\n  if (isObject(lang)) {\r\n    VeeValidate$1.i18nDriver.merge(lang);\r\n    return;\r\n  }\r\n\r\n  // merge the dictionary.\r\n  if (dictionary) {\r\n    var locale = lang || dictionary.name;\r\n    dictionary = assign({}, dictionary);\r\n    VeeValidate$1.i18nDriver.merge(( obj = {}, obj[locale] = dictionary, obj ));\r\n  }\r\n\r\n  if (lang) {\r\n    // set the locale.\r\n    Validator.locale = lang;\r\n  }\r\n};\r\n\r\n/**\r\n * Registers a field to be validated.\r\n */\r\nValidator.prototype.attach = function attach (fieldOpts) {\n    var this$1 = this;\n\r\n  // We search for a field with the same name & scope, having persist enabled\r\n  var oldFieldMatcher = { name: fieldOpts.name, scope: fieldOpts.scope, persist: true };\r\n  var oldField = fieldOpts.persist ? this.fields.find(oldFieldMatcher) : null;\r\n\r\n  if (oldField) {\r\n    // We keep the flags of the old field, then we remove its instance\r\n    fieldOpts.flags = oldField.flags;\r\n    oldField.destroy();\r\n    this.fields.remove(oldField);\r\n  }\r\n\r\n  // fixes initial value detection with v-model and select elements.\r\n  var value = fieldOpts.initialValue;\r\n  var field = new Field(fieldOpts);\r\n  this.fields.push(field);\r\n\r\n  // validate the field initially\r\n  if (field.immediate) {\r\n    VeeValidate$1.instance._vm.$nextTick(function () { return this$1.validate((\"#\" + (field.id)), value || field.value, { vmId: fieldOpts.vmId }); });\r\n  } else {\r\n    this._validate(field, value || field.value, { initial: true }).then(function (result) {\r\n      field.flags.valid = result.valid;\r\n      field.flags.invalid = !result.valid;\r\n    });\r\n  }\r\n\r\n  return field;\r\n};\r\n\r\n/**\r\n * Sets the flags on a field.\r\n */\r\nValidator.prototype.flag = function flag (name, flags, uid) {\n    if ( uid === void 0 ) uid = null;\n\r\n  var field = this._resolveField(name, undefined, uid);\r\n  if (!field || !flags) {\r\n    return;\r\n  }\r\n\r\n  field.setFlags(flags);\r\n};\r\n\r\n/**\r\n * Removes a field from the validator.\r\n */\r\nValidator.prototype.detach = function detach (name, scope, uid) {\r\n  var field = isCallable(name.destroy) ? name : this._resolveField(name, scope, uid);\r\n  if (!field) { return; }\r\n\r\n  // We destroy/remove the field & error instances if it's not a `persist` one\r\n  if (!field.persist) {\r\n    field.destroy();\r\n    this.errors.remove(field.name, field.scope, field.vmId);\r\n    this.fields.remove(field);\r\n  }\r\n};\r\n\r\n/**\r\n * Adds a custom validator to the list of validation rules.\r\n */\r\nValidator.prototype.extend = function extend (name, validator, options) {\n    if ( options === void 0 ) options = {};\n\r\n  Validator.extend(name, validator, options);\r\n};\r\n\r\nValidator.prototype.reset = function reset (matcher) {\n    var this$1 = this;\n\r\n  // two ticks\r\n  return VeeValidate$1.instance._vm.$nextTick().then(function () {\r\n    return VeeValidate$1.instance._vm.$nextTick();\r\n  }).then(function () {\r\n    this$1.fields.filter(matcher).forEach(function (field) {\r\n      field.waitFor(null);\r\n      field.reset(); // reset field flags.\r\n      this$1.errors.remove(field.name, field.scope, matcher && matcher.vmId);\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Updates a field, updating both errors and flags.\r\n */\r\nValidator.prototype.update = function update (id, ref) {\n    var scope = ref.scope;\n\r\n  var field = this._resolveField((\"#\" + id));\r\n  if (!field) { return; }\r\n\r\n  // remove old scope.\r\n  this.errors.update(id, { scope: scope });\r\n};\r\n\r\n/**\r\n * Removes a rule from the list of validators.\r\n */\r\nValidator.prototype.remove = function remove (name) {\r\n  Validator.remove(name);\r\n};\r\n\r\n/**\r\n * Validates a value against a registered field validations.\r\n */\r\nValidator.prototype.validate = function validate (fieldDescriptor, value, ref) {\n    var this$1 = this;\n    if ( ref === void 0 ) ref = {};\n    var silent = ref.silent;\n    var vmId = ref.vmId;\n\r\n  if (this.paused) { return Promise.resolve(true); }\r\n\r\n  // overload to validate all.\r\n  if (isNullOrUndefined(fieldDescriptor)) {\r\n    return this.validateScopes({ silent: silent, vmId: vmId });\r\n  }\r\n\r\n  // overload to validate scope-less fields.\r\n  if (fieldDescriptor === '*') {\r\n    return this.validateAll(undefined, { silent: silent, vmId: vmId });\r\n  }\r\n\r\n  // if scope validation was requested.\r\n  if (/^(.+)\\.\\*$/.test(fieldDescriptor)) {\r\n    var matched = fieldDescriptor.match(/^(.+)\\.\\*$/)[1];\r\n    return this.validateAll(matched);\r\n  }\r\n\r\n  var field = this._resolveField(fieldDescriptor);\r\n  if (!field) {\r\n    return this._handleFieldNotFound(name);\r\n  }\r\n\r\n  if (!silent) { field.flags.pending = true; }\r\n  if (value === undefined) {\r\n    value = field.value;\r\n  }\r\n\r\n  var validationPromise = this._validate(field, value);\r\n  field.waitFor(validationPromise);\r\n\r\n  return validationPromise.then(function (result) {\r\n    if (!silent && field.isWaitingFor(validationPromise)) {\r\n      // allow next validation to mutate the state.\r\n      field.waitFor(null);\r\n      this$1._handleValidationResults([result], vmId);\r\n    }\r\n\r\n    return result.valid;\r\n  });\r\n};\r\n\r\n/**\r\n * Pauses the validator.\r\n */\r\nValidator.prototype.pause = function pause () {\r\n  this.paused = true;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Resumes the validator.\r\n */\r\nValidator.prototype.resume = function resume () {\r\n  this.paused = false;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Validates each value against the corresponding field validations.\r\n */\r\nValidator.prototype.validateAll = function validateAll (values$$1, ref) {\n    var this$1 = this;\n    if ( ref === void 0 ) ref = {};\n    var silent = ref.silent;\n    var vmId = ref.vmId;\n\r\n  if (this.paused) { return Promise.resolve(true); }\r\n\r\n  var matcher = null;\r\n  var providedValues = false;\r\n\r\n  if (typeof values$$1 === 'string') {\r\n    matcher = { scope: values$$1, vmId: vmId };\r\n  } else if (isObject(values$$1)) {\r\n    matcher = Object.keys(values$$1).map(function (key) {\r\n      return { name: key, vmId: vmId, scope: null };\r\n    });\r\n    providedValues = true;\r\n  } else if (Array.isArray(values$$1)) {\r\n    matcher = values$$1.map(function (key) {\r\n      return { name: key, vmId: vmId };\r\n    });\r\n  } else {\r\n    matcher = { scope: null, vmId: vmId };\r\n  }\r\n\r\n  return Promise.all(\r\n    this.fields.filter(matcher).map(function (field) { return this$1._validate(field, providedValues ? values$$1[field.name] : field.value); })\r\n  ).then(function (results) {\r\n    if (!silent) {\r\n      this$1._handleValidationResults(results, vmId);\r\n    }\r\n\r\n    return results.every(function (t) { return t.valid; });\r\n  });\r\n};\r\n\r\n/**\r\n * Validates all scopes.\r\n */\r\nValidator.prototype.validateScopes = function validateScopes (ref) {\n    var this$1 = this;\n    if ( ref === void 0 ) ref = {};\n    var silent = ref.silent;\n    var vmId = ref.vmId;\n\r\n  if (this.paused) { return Promise.resolve(true); }\r\n\r\n  return Promise.all(\r\n    this.fields.filter({ vmId: vmId }).map(function (field) { return this$1._validate(field, field.value); })\r\n  ).then(function (results) {\r\n    if (!silent) {\r\n      this$1._handleValidationResults(results, vmId);\r\n    }\r\n\r\n    return results.every(function (t) { return t.valid; });\r\n  });\r\n};\r\n\r\n/**\r\n * Validates a value against the rules.\r\n */\r\nValidator.prototype.verify = function verify (value, rules, options) {\n    if ( options === void 0 ) options = {};\n\r\n  var field = {\r\n    name: (options && options.name) || '{field}',\r\n    rules: normalizeRules(rules),\r\n    bails: getPath('bails', options, true),\r\n    forceRequired: false,\r\n    get isRequired () {\r\n      return !!this.rules.required || this.forceRequired;\r\n    }\r\n  };\r\n\r\n  var targetRules = Object.keys(field.rules).filter(Validator.isTargetRule);\r\n  if (targetRules.length && options && isObject(options.values)) {\r\n    field.dependencies = targetRules.map(function (rule) {\r\n      var ref = field.rules[rule];\n        var targetKey = ref[0];\r\n\r\n      return {\r\n        name: rule,\r\n        field: { value: options.values[targetKey] }\r\n      };\r\n    });\r\n  }\r\n\r\n  return this._validate(field, value).then(function (result) {\r\n    return { valid: result.valid, errors: result.errors.map(function (e) { return e.msg; }) };\r\n  });\r\n};\r\n\r\n/**\r\n * Perform cleanup.\r\n */\r\nValidator.prototype.destroy = function destroy () {\r\n  VeeValidate$1.instance._vm.$off('localeChanged');\r\n};\r\n\r\n/**\r\n * Creates the fields to be validated.\r\n */\r\nValidator.prototype._createFields = function _createFields (validations) {\n    var this$1 = this;\n\r\n  if (!validations) { return; }\r\n\r\n  Object.keys(validations).forEach(function (field) {\r\n    var options = assign({}, { name: field, rules: validations[field] });\r\n    this$1.attach(options);\r\n  });\r\n};\r\n\r\n/**\r\n * Date rules need the existence of a format, so date_format must be supplied.\r\n */\r\nValidator.prototype._getDateFormat = function _getDateFormat (validations) {\r\n  var format = null;\r\n  if (validations.date_format && Array.isArray(validations.date_format)) {\r\n    format = validations.date_format[0];\r\n  }\r\n\r\n  return format || VeeValidate$1.i18nDriver.getDateFormat(this.locale);\r\n};\r\n\r\n/**\r\n * Formats an error message for field and a rule.\r\n */\r\nValidator.prototype._formatErrorMessage = function _formatErrorMessage (field, rule, data, targetName) {\n    if ( data === void 0 ) data = {};\n    if ( targetName === void 0 ) targetName = null;\n\r\n  var name = this._getFieldDisplayName(field);\r\n  var params = this._getLocalizedParams(rule, targetName);\r\n\r\n  return VeeValidate$1.i18nDriver.getFieldMessage(this.locale, field.name, rule.name, [name, params, data]);\r\n};\r\n\r\n/**\r\n * We need to convert any object param to an array format since the locales do not handle params as objects yet.\r\n */\r\nValidator.prototype._convertParamObjectToArray = function _convertParamObjectToArray (obj, ruleName) {\r\n  if (Array.isArray(obj)) {\r\n    return obj;\r\n  }\r\n\r\n  var paramNames = RuleContainer.getParamNames(ruleName);\r\n  if (!paramNames || !isObject(obj)) {\r\n    return obj;\r\n  }\r\n\r\n  return paramNames.reduce(function (prev, paramName) {\r\n    if (paramName in obj) {\r\n      prev.push(obj[paramName]);\r\n    }\r\n\r\n    return prev;\r\n  }, []);\r\n};\r\n\r\n/**\r\n * Translates the parameters passed to the rule (mainly for target fields).\r\n */\r\nValidator.prototype._getLocalizedParams = function _getLocalizedParams (rule, targetName) {\n    if ( targetName === void 0 ) targetName = null;\n\r\n  var params = this._convertParamObjectToArray(rule.params, rule.name);\r\n  if (rule.options.hasTarget && params && params[0]) {\r\n    var localizedName = targetName || VeeValidate$1.i18nDriver.getAttribute(this.locale, params[0], params[0]);\r\n    return [localizedName].concat(params.slice(1));\r\n  }\r\n\r\n  return params;\r\n};\r\n\r\n/**\r\n * Resolves an appropriate display name, first checking 'data-as' or the registered 'prettyName'\r\n */\r\nValidator.prototype._getFieldDisplayName = function _getFieldDisplayName (field) {\r\n  return field.alias || VeeValidate$1.i18nDriver.getAttribute(this.locale, field.name, field.name);\r\n};\r\n\r\n/**\r\n * Converts an array of params to an object with named properties.\r\n * Only works if the rule is configured with a paramNames array.\r\n * Returns the same params if it cannot convert it.\r\n */\r\nValidator.prototype._convertParamArrayToObj = function _convertParamArrayToObj (params, ruleName) {\r\n  var paramNames = RuleContainer.getParamNames(ruleName);\r\n  if (!paramNames) {\r\n    return params;\r\n  }\r\n\r\n  if (isObject(params)) {\r\n    // check if the object is either a config object or a single parameter that is an object.\r\n    var hasKeys = paramNames.some(function (name) { return Object.keys(params).indexOf(name) !== -1; });\r\n    // if it has some of the keys, return it as is.\r\n    if (hasKeys) {\r\n      return params;\r\n    }\r\n    // otherwise wrap the object in an array.\r\n    params = [params];\r\n  }\r\n\r\n  // Reduce the paramsNames to a param object.\r\n  return params.reduce(function (prev, value, idx) {\r\n    prev[paramNames[idx]] = value;\r\n\r\n    return prev;\r\n  }, {});\r\n};\r\n\r\n/**\r\n * Tests a single input value against a rule.\r\n */\r\nValidator.prototype._test = function _test (field, value, rule) {\n    var this$1 = this;\n\r\n  var validator = RuleContainer.getValidatorMethod(rule.name);\r\n  var params = Array.isArray(rule.params) ? toArray(rule.params) : rule.params;\r\n  if (!params) {\r\n    params = [];\r\n  }\r\n\r\n  var targetName = null;\r\n  if (!validator || typeof validator !== 'function') {\r\n    return Promise.reject(createError((\"No such validator '\" + (rule.name) + \"' exists.\")));\r\n  }\r\n\r\n  // has field dependencies.\r\n  if (rule.options.hasTarget && field.dependencies) {\r\n    var target = find(field.dependencies, function (d) { return d.name === rule.name; });\r\n    if (target) {\r\n      targetName = target.field.alias;\r\n      params = [target.field.value].concat(params.slice(1));\r\n    }\r\n  } else if (rule.name === 'required' && field.rejectsFalse) {\r\n    // invalidate false if no args were specified and the field rejects false by default.\r\n    params = params.length ? params : [true];\r\n  }\r\n\r\n  if (rule.options.isDate) {\r\n    var dateFormat = this._getDateFormat(field.rules);\r\n    if (rule.name !== 'date_format') {\r\n      params.push(dateFormat);\r\n    }\r\n  }\r\n\r\n  var result = validator(value, this._convertParamArrayToObj(params, rule.name));\r\n\r\n  // If it is a promise.\r\n  if (isCallable(result.then)) {\r\n    return result.then(function (values$$1) {\r\n      var allValid = true;\r\n      var data = {};\r\n      if (Array.isArray(values$$1)) {\r\n        allValid = values$$1.every(function (t) { return (isObject(t) ? t.valid : t); });\r\n      } else { // Is a single object/boolean.\r\n        allValid = isObject(values$$1) ? values$$1.valid : values$$1;\r\n        data = values$$1.data;\r\n      }\r\n\r\n      return {\r\n        valid: allValid,\r\n        data: result.data,\r\n        errors: allValid ? [] : [this$1._createFieldError(field, rule, data, targetName)]\r\n      };\r\n    });\r\n  }\r\n\r\n  if (!isObject(result)) {\r\n    result = { valid: result, data: {} };\r\n  }\r\n\r\n  return {\r\n    valid: result.valid,\r\n    data: result.data,\r\n    errors: result.valid ? [] : [this._createFieldError(field, rule, result.data, targetName)]\r\n  };\r\n};\r\n\r\n/**\r\n * Merges a validator object into the RULES and Messages.\r\n */\r\nValidator._merge = function _merge (name, ref) {\n    var validator = ref.validator;\n    var options = ref.options;\n    var paramNames = ref.paramNames;\n\r\n  var validate = isCallable(validator) ? validator : validator.validate;\r\n  if (validator.getMessage) {\r\n    VeeValidate$1.i18nDriver.setMessage(Validator.locale, name, validator.getMessage);\r\n  }\r\n\r\n  RuleContainer.add(name, {\r\n    validate: validate,\r\n    options: options,\r\n    paramNames: paramNames\r\n  });\r\n};\r\n\r\n/**\r\n * Guards from extension violations.\r\n */\r\nValidator._guardExtend = function _guardExtend (name, validator) {\r\n  if (isCallable(validator)) {\r\n    return;\r\n  }\r\n\r\n  if (!isCallable(validator.validate)) {\r\n    throw createError(\r\n      (\"Extension Error: The validator '\" + name + \"' must be a function or have a 'validate' method.\")\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Creates a Field Error Object.\r\n */\r\nValidator.prototype._createFieldError = function _createFieldError (field, rule, data, targetName) {\n    var this$1 = this;\n\r\n  return {\r\n    id: field.id,\r\n    vmId: field.vmId,\r\n    field: field.name,\r\n    msg: this._formatErrorMessage(field, rule, data, targetName),\r\n    rule: rule.name,\r\n    scope: field.scope,\r\n    regenerate: function () {\r\n      return this$1._formatErrorMessage(field, rule, data, targetName);\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Tries different strategies to find a field.\r\n */\r\nValidator.prototype._resolveField = function _resolveField (name, scope, uid) {\r\n  if (name[0] === '#') {\r\n    return this.fields.find({ id: name.slice(1) });\r\n  }\r\n\r\n  if (!isNullOrUndefined(scope)) {\r\n    return this.fields.find({ name: name, scope: scope, vmId: uid });\r\n  }\r\n\r\n  if (includes(name, '.')) {\r\n    var ref = name.split('.');\n      var fieldScope = ref[0];\n      var fieldName = ref.slice(1);\r\n    var field = this.fields.find({ name: fieldName.join('.'), scope: fieldScope, vmId: uid });\r\n    if (field) {\r\n      return field;\r\n    }\r\n  }\r\n\r\n  return this.fields.find({ name: name, scope: null, vmId: uid });\r\n};\r\n\r\n/**\r\n * Handles when a field is not found.\r\n */\r\nValidator.prototype._handleFieldNotFound = function _handleFieldNotFound (name, scope) {\r\n  var fullName = isNullOrUndefined(scope) ? name : (\"\" + (!isNullOrUndefined(scope) ? scope + '.' : '') + name);\r\n\r\n  return Promise.reject(createError(\r\n    (\"Validating a non-existent field: \\\"\" + fullName + \"\\\". Use \\\"attach()\\\" first.\")\r\n  ));\r\n};\r\n\r\n/**\r\n * Handles validation results.\r\n */\r\nValidator.prototype._handleValidationResults = function _handleValidationResults (results, vmId) {\n    var this$1 = this;\n\r\n  var matchers = results.map(function (result) { return ({ id: result.id }); });\r\n  this.errors.removeById(matchers.map(function (m) { return m.id; }));\r\n  // remove by name and scope to remove any custom errors added.\r\n  results.forEach(function (result) {\r\n    this$1.errors.remove(result.field, result.scope, vmId);\r\n  });\r\n  var allErrors = results.reduce(function (prev, curr) {\r\n    prev.push.apply(prev, curr.errors);\r\n\r\n    return prev;\r\n  }, []);\r\n\r\n  this.errors.add(allErrors);\r\n\r\n  // handle flags.\r\n  this.fields.filter(matchers).forEach(function (field) {\r\n    var result = find(results, function (r) { return r.id === field.id; });\r\n    field.setFlags({\r\n      pending: false,\r\n      valid: result.valid,\r\n      validated: true\r\n    });\r\n  });\r\n};\r\n\r\nValidator.prototype._shouldSkip = function _shouldSkip (field, value) {\r\n  // field is configured to run through the pipeline regardless\r\n  if (field.bails === false) {\r\n    return false;\r\n  }\r\n\r\n  // disabled fields are skipped\r\n  if (field.isDisabled) {\r\n    return true;\r\n  }\r\n\r\n  // skip if the field is not required and has an empty value.\r\n  return !field.isRequired && (isNullOrUndefined(value) || value === '' || isEmptyArray(value));\r\n};\r\n\r\nValidator.prototype._shouldBail = function _shouldBail (field) {\r\n  // if the field was configured explicitly.\r\n  if (field.bails !== undefined) {\r\n    return field.bails;\r\n  }\r\n\r\n  return this.fastExit;\r\n};\r\n\r\n/**\r\n * Starts the validation process.\r\n */\r\nValidator.prototype._validate = function _validate (field, value, ref) {\n    var this$1 = this;\n    if ( ref === void 0 ) ref = {};\n    var initial = ref.initial;\n\r\n  var requireRules = Object.keys(field.rules).filter(RuleContainer.isRequireRule);\r\n\r\n  field.forceRequired = false;\r\n  requireRules.forEach(function (rule) {\r\n    var ruleOptions = RuleContainer.getOptions(rule);\r\n    var result = this$1._test(field, value, { name: rule, params: field.rules[rule], options: ruleOptions });\r\n\r\n    if (isCallable(result.then)) { throw createError('Require rules cannot be async'); }\r\n    if (!isObject(result)) { throw createError('Require rules has to return an object (see docs)'); }\r\n\r\n    if (result.data.required === true) {\r\n      field.forceRequired = true;\r\n    }\r\n  });\r\n\r\n  if (this._shouldSkip(field, value)) {\r\n    return Promise.resolve({ valid: true, id: field.id, field: field.name, scope: field.scope, errors: [] });\r\n  }\r\n\r\n  var promises = [];\r\n  var errors = [];\r\n  var isExitEarly = false;\r\n  // use of '.some()' is to break iteration in middle by returning true\r\n  Object.keys(field.rules).filter(function (rule) {\r\n    if (!initial || !RuleContainer.has(rule)) { return true; }\r\n\r\n    return RuleContainer.isImmediate(rule);\r\n  }).some(function (rule) {\r\n    var ruleOptions = RuleContainer.getOptions(rule);\r\n    var result = this$1._test(field, value, { name: rule, params: field.rules[rule], options: ruleOptions });\r\n    if (isCallable(result.then)) {\r\n      promises.push(result);\r\n    } else if (!result.valid && this$1._shouldBail(field)) {\r\n      errors.push.apply(errors, result.errors);\r\n      isExitEarly = true;\r\n    } else {\r\n      // promisify the result.\r\n      promises.push(new Promise(function (resolve) { return resolve(result); }));\r\n    }\r\n\r\n    return isExitEarly;\r\n  });\r\n\r\n  if (isExitEarly) {\r\n    return Promise.resolve({ valid: false, errors: errors, id: field.id, field: field.name, scope: field.scope });\r\n  }\r\n\r\n  return Promise.all(promises).then(function (results) {\r\n    return results.reduce(function (prev, v) {\n        var ref;\n\r\n      if (!v.valid) {\r\n        (ref = prev.errors).push.apply(ref, v.errors);\r\n      }\r\n\r\n      prev.valid = prev.valid && v.valid;\r\n\r\n      return prev;\r\n    }, { valid: true, errors: errors, id: field.id, field: field.name, scope: field.scope });\r\n  });\r\n};\n\nObject.defineProperties( Validator.prototype, prototypeAccessors$4 );\nObject.defineProperties( Validator, staticAccessors$1 );\n\n// \r\n\r\nvar normalize = function (fields) {\r\n  if (Array.isArray(fields)) {\r\n    return fields.reduce(function (prev, curr) {\r\n      if (includes(curr, '.')) {\r\n        prev[curr.split('.')[1]] = curr;\r\n      } else {\r\n        prev[curr] = curr;\r\n      }\r\n\r\n      return prev;\r\n    }, {});\r\n  }\r\n\r\n  return fields;\r\n};\r\n\r\n// Combines two flags using either AND or OR depending on the flag type.\r\nvar combine = function (lhs, rhs) {\r\n  var mapper = {\r\n    pristine: function (lhs, rhs) { return lhs && rhs; },\r\n    dirty: function (lhs, rhs) { return lhs || rhs; },\r\n    touched: function (lhs, rhs) { return lhs || rhs; },\r\n    untouched: function (lhs, rhs) { return lhs && rhs; },\r\n    valid: function (lhs, rhs) { return lhs && rhs; },\r\n    invalid: function (lhs, rhs) { return lhs || rhs; },\r\n    pending: function (lhs, rhs) { return lhs || rhs; },\r\n    required: function (lhs, rhs) { return lhs || rhs; },\r\n    validated: function (lhs, rhs) { return lhs && rhs; }\r\n  };\r\n\r\n  return Object.keys(mapper).reduce(function (flags, flag) {\r\n    flags[flag] = mapper[flag](lhs[flag], rhs[flag]);\r\n\r\n    return flags;\r\n  }, {});\r\n};\r\n\r\nvar mapScope = function (scope, deep) {\n  if ( deep === void 0 ) deep = true;\n\r\n  return Object.keys(scope).reduce(function (flags, field) {\r\n    if (!flags) {\r\n      flags = assign({}, scope[field]);\r\n      return flags;\r\n    }\r\n\r\n    // scope.\r\n    var isScope = field.indexOf('$') === 0;\r\n    if (deep && isScope) {\r\n      return combine(mapScope(scope[field]), flags);\r\n    } else if (!deep && isScope) {\r\n      return flags;\r\n    }\r\n\r\n    flags = combine(flags, scope[field]);\r\n\r\n    return flags;\r\n  }, null);\r\n};\r\n\r\n/**\r\n * Maps fields to computed functions.\r\n */\r\nvar mapFields = function (fields) {\r\n  if (!fields) {\r\n    return function () {\r\n      return mapScope(this.$validator.flags);\r\n    };\r\n  }\r\n\r\n  var normalized = normalize(fields);\r\n  return Object.keys(normalized).reduce(function (prev, curr) {\r\n    var field = normalized[curr];\r\n    prev[curr] = function mappedField () {\r\n      // if field exists\r\n      if (this.$validator.flags[field]) {\r\n        return this.$validator.flags[field];\r\n      }\r\n\r\n      // scopeless fields were selected.\r\n      if (normalized[curr] === '*') {\r\n        return mapScope(this.$validator.flags, false);\r\n      }\r\n\r\n      // if it has a scope defined\r\n      var index = field.indexOf('.');\r\n      if (index <= 0) {\r\n        return {};\r\n      }\r\n\r\n      var ref = field.split('.');\n      var scope = ref[0];\n      var name = ref.slice(1);\r\n\r\n      scope = this.$validator.flags[(\"$\" + scope)];\r\n      name = name.join('.');\r\n\r\n      // an entire scope was selected: scope.*\r\n      if (name === '*' && scope) {\r\n        return mapScope(scope);\r\n      }\r\n\r\n      if (scope && scope[name]) {\r\n        return scope[name];\r\n      }\r\n\r\n      return {};\r\n    };\r\n\r\n    return prev;\r\n  }, {});\r\n};\n\nvar $validator = null;\r\n\r\nvar PROVIDER_COUNTER = 0;\r\n\r\nfunction createValidationCtx (ctx) {\r\n  return {\r\n    errors: ctx.messages,\r\n    flags: ctx.flags,\r\n    classes: ctx.classes,\r\n    valid: ctx.isValid,\r\n    reset: function () { return ctx.reset(); },\r\n    validate: function () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      return ctx.validate.apply(ctx, args);\n  },\r\n    aria: {\r\n      'aria-invalid': ctx.flags.invalid ? 'true' : 'false',\r\n      'aria-required': ctx.isRequired ? 'true' : 'false'\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Determines if a provider needs to run validation.\r\n */\r\nfunction shouldValidate (ctx, model) {\r\n  // when an immediate/initial validation is needed and wasn't done before.\r\n  if (!ctx._ignoreImmediate && ctx.immediate) {\r\n    return true;\r\n  }\r\n\r\n  // when the value changes for whatever reason.\r\n  if (ctx.value !== model.value) {\r\n    return true;\r\n  }\r\n\r\n  // when it needs validation due to props/cross-fields changes.\r\n  if (ctx._needsValidation) {\r\n    return true;\r\n  }\r\n\r\n  // when the initial value is undefined and the field wasn't rendered yet.\r\n  if (!ctx.initialized && model.value === undefined) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction onRenderUpdate (model) {\n  var this$1 = this;\n\r\n  if (!this.initialized) {\r\n    this.initialValue = model.value;\r\n  }\r\n\r\n  var validateNow = shouldValidate(this, model);\r\n  this._needsValidation = false;\r\n  this.value = model.value;\r\n  this._ignoreImmediate = true;\r\n\r\n  if (!validateNow) {\r\n    return;\r\n  }\r\n\r\n  var silentHandler = function (ref) {\n    var valid = ref.valid;\n\r\n    // initially assign the valid/invalid flags.\r\n    this$1.setFlags({\r\n      valid: valid,\r\n      invalid: !valid\r\n    });\r\n  };\r\n\r\n  this.validateSilent().then(this.immediate || this.flags.validated ? this.applyResult : silentHandler);\r\n}\r\n\r\n// Creates the common handlers for a validatable context.\r\nfunction createCommonHandlers (ctx) {\r\n  var onInput = function (e) {\r\n    ctx.syncValue(e); // track and keep the value updated.\r\n    ctx.setFlags({ dirty: true, pristine: false });\r\n  };\r\n\r\n  // Blur event listener.\r\n  var onBlur = function () {\r\n    ctx.setFlags({ touched: true, untouched: false });\r\n  };\r\n\r\n  var onValidate = debounce(\r\n    function () {\r\n      var pendingPromise = ctx.validate();\r\n      // avoids race conditions between successive validations.\r\n      ctx._pendingValidation = pendingPromise;\r\n      pendingPromise.then(function (result) {\r\n        if (pendingPromise === ctx._pendingValidation) {\r\n          ctx.applyResult(result);\r\n          ctx._pendingValidation = null;\r\n        }\r\n      });\r\n    },\r\n    ctx.debounce\r\n  );\r\n\r\n  return { onInput: onInput, onBlur: onBlur, onValidate: onValidate };\r\n}\r\n\r\n// Adds all plugin listeners to the vnode.\r\nfunction addListeners (node) {\r\n  var model = findModel(node);\r\n  // cache the input eventName.\r\n  this._inputEventName = this._inputEventName || getInputEventName(node, model);\r\n\r\n  onRenderUpdate.call(this, model);\r\n\r\n  var ref = createCommonHandlers(this);\n  var onInput = ref.onInput;\n  var onBlur = ref.onBlur;\n  var onValidate = ref.onValidate;\r\n  addVNodeListener(node, this._inputEventName, onInput);\r\n  addVNodeListener(node, 'blur', onBlur);\r\n\r\n  // add the validation listeners.\r\n  this.normalizedEvents.forEach(function (evt) {\r\n    addVNodeListener(node, evt, onValidate);\r\n  });\r\n\r\n  this.initialized = true;\r\n}\r\n\r\nfunction createValuesLookup (ctx) {\r\n  var providers = ctx.$_veeObserver.refs;\r\n\r\n  return ctx.fieldDeps.reduce(function (acc, depName) {\r\n    if (!providers[depName]) {\r\n      return acc;\r\n    }\r\n\r\n    acc[depName] = providers[depName].value;\r\n\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\nfunction updateRenderingContextRefs (ctx) {\r\n  // IDs should not be nullable.\r\n  if (isNullOrUndefined(ctx.id) && ctx.id === ctx.vid) {\r\n    ctx.id = PROVIDER_COUNTER;\r\n    PROVIDER_COUNTER++;\r\n  }\r\n\r\n  var id = ctx.id;\n  var vid = ctx.vid;\r\n  // Nothing has changed.\r\n  if (id === vid && ctx.$_veeObserver.refs[id]) {\r\n    return;\r\n  }\r\n\r\n  // vid was changed.\r\n  if (id !== vid && ctx.$_veeObserver.refs[id] === ctx) {\r\n    ctx.$_veeObserver.$unsubscribe(ctx);\r\n  }\r\n\r\n  ctx.$_veeObserver.$subscribe(ctx);\r\n  ctx.id = vid;\r\n}\r\n\r\nfunction createObserver () {\r\n  return {\r\n    refs: {},\r\n    $subscribe: function $subscribe (ctx) {\r\n      this.refs[ctx.vid] = ctx;\r\n    },\r\n    $unsubscribe: function $unsubscribe (ctx) {\r\n      delete this.refs[ctx.vid];\r\n    }\r\n  };\r\n}\r\n\r\nvar ValidationProvider = {\r\n  $__veeInject: false,\r\n  inject: {\r\n    $_veeObserver: {\r\n      from: '$_veeObserver',\r\n      default: function default$1 () {\r\n        if (!this.$vnode.context.$_veeObserver) {\r\n          this.$vnode.context.$_veeObserver = createObserver();\r\n        }\r\n\r\n        return this.$vnode.context.$_veeObserver;\r\n      }\r\n    }\r\n  },\r\n  props: {\r\n    vid: {\r\n      type: [String, Number],\r\n      default: function () {\r\n        PROVIDER_COUNTER++;\r\n\r\n        return PROVIDER_COUNTER;\r\n      }\r\n    },\r\n    name: {\r\n      type: String,\r\n      default: null\r\n    },\r\n    events: {\r\n      type: [Array, String],\r\n      default: function () { return ['input']; }\r\n    },\r\n    rules: {\r\n      type: [Object, String],\r\n      default: null\r\n    },\r\n    immediate: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    persist: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    bails: {\r\n      type: Boolean,\r\n      default: function () { return VeeValidate$1.config.fastExit; }\r\n    },\r\n    debounce: {\r\n      type: Number,\r\n      default: function () { return VeeValidate$1.config.delay || 0; }\r\n    }\r\n  },\r\n  watch: {\r\n    rules: {\r\n      deep: true,\r\n      handler: function handler () {\r\n        this._needsValidation = true;\r\n      }\r\n    }\r\n  },\r\n  data: function () { return ({\r\n    messages: [],\r\n    value: undefined,\r\n    initialized: false,\r\n    initialValue: undefined,\r\n    flags: createFlags(),\r\n    forceRequired: false,\r\n    id: null\r\n  }); },\r\n  methods: {\r\n    setFlags: function setFlags (flags) {\n      var this$1 = this;\n\r\n      Object.keys(flags).forEach(function (flag) {\r\n        this$1.flags[flag] = flags[flag];\r\n      });\r\n    },\r\n    syncValue: function syncValue (e) {\r\n      var value = isEvent(e) ? e.target.value : e;\r\n      this.value = value;\r\n      this.flags.changed = this.initialValue !== value;\r\n    },\r\n    reset: function reset () {\r\n      this.messages = [];\r\n      this._pendingValidation = null;\r\n      this.initialValue = this.value;\r\n      var flags = createFlags();\r\n      this.setFlags(flags);\r\n    },\r\n    validate: function validate () {\n      var this$1 = this;\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\r\n      if (args[0]) {\r\n        this.syncValue(args[0]);\r\n      }\r\n\r\n      return this.validateSilent().then(function (result) {\r\n        this$1.applyResult(result);\r\n\r\n        return result;\r\n      });\r\n    },\r\n    validateSilent: function validateSilent () {\n      var this$1 = this;\n\r\n      this.setFlags({ pending: true });\r\n\r\n      return $validator.verify(this.value, this.rules, {\r\n        name: this.name,\r\n        values: createValuesLookup(this),\r\n        bails: this.bails\r\n      }).then(function (result) {\r\n        this$1.setFlags({ pending: false });\r\n\r\n        return result;\r\n      });\r\n    },\r\n    applyResult: function applyResult (ref) {\n      var errors = ref.errors;\n\r\n      this.messages = errors;\r\n      this.setFlags({\r\n        valid: !errors.length,\r\n        changed: this.value !== this.initialValue,\r\n        invalid: !!errors.length,\r\n        validated: true\r\n      });\r\n    },\r\n    registerField: function registerField () {\r\n      if (!$validator) {\r\n        /* istanbul ignore next */\r\n        if (true) {\r\n          if (!VeeValidate$1.instance) {\r\n            warn('You must install vee-validate first before using this component.');\r\n          }\r\n        }\r\n\r\n        $validator = VeeValidate$1.instance._validator;\r\n      }\r\n\r\n      updateRenderingContextRefs(this);\r\n    }\r\n  },\r\n  computed: {\r\n    isValid: function isValid () {\r\n      return this.flags.valid;\r\n    },\r\n    fieldDeps: function fieldDeps () {\n      var this$1 = this;\n\r\n      var rules = normalizeRules(this.rules);\r\n      var providers = this.$_veeObserver.refs;\r\n\r\n      return Object.keys(rules).filter(RuleContainer.isTargetRule).map(function (rule) {\r\n        var depName = rules[rule][0];\r\n        var watcherName = \"$__\" + depName;\r\n        if (!isCallable(this$1[watcherName])) {\r\n          this$1[watcherName] = providers[depName].$watch('value', function () {\r\n            this$1._needsValidation = true;\r\n            this$1.validate();\r\n          });\r\n        }\r\n\r\n        return depName;\r\n      });\r\n    },\r\n    normalizedEvents: function normalizedEvents () {\n      var this$1 = this;\n\r\n      return normalizeEvents(this.events).map(function (e) {\r\n        if (e === 'input') {\r\n          return this$1._inputEventName;\r\n        }\r\n\r\n        return e;\r\n      });\r\n    },\r\n    isRequired: function isRequired () {\r\n      var rules = normalizeRules(this.rules);\r\n      var forceRequired = this.forceRequired;\r\n\r\n      return !!rules.required || forceRequired;\r\n    },\r\n    classes: function classes () {\n      var this$1 = this;\n\r\n      var names = VeeValidate$1.config.classNames;\r\n      return Object.keys(this.flags).reduce(function (classes, flag) {\r\n        var className = (names && names[flag]) || flag;\r\n        if (flag === 'invalid') {\r\n          classes[className] = !!this$1.messages.length;\r\n\r\n          return classes;\r\n        }\r\n\r\n        if (flag === 'valid') {\r\n          classes[className] = !this$1.messages.length;\r\n\r\n          return classes;\r\n        }\r\n\r\n        if (className) {\r\n          classes[className] = this$1.flags[flag];\r\n        }\r\n\r\n        return classes;\r\n      }, {});\r\n    }\r\n  },\r\n  render: function render (h) {\n    var this$1 = this;\n\r\n    this.registerField();\r\n    var ctx = createValidationCtx(this);\r\n\r\n    // Gracefully handle non-existent scoped slots.\r\n    var slot = this.$scopedSlots.default;\r\n    if (!isCallable(slot)) {\r\n      if (true) {\r\n        warn('ValidationProvider expects a scoped slot. Did you forget to add \"slot-scope\" to your slot?');\r\n      }\r\n\r\n      return createRenderless(h, this.$slots.default);\r\n    }\r\n\r\n    var nodes = slot(ctx);\r\n    // Handle single-root slot.\r\n    extractVNodes(nodes).forEach(function (input) {\r\n      addListeners.call(this$1, input);\r\n    });\r\n\r\n    return createRenderless(h, nodes);\r\n  },\r\n  beforeDestroy: function beforeDestroy () {\r\n    // cleanup reference.\r\n    this.$_veeObserver.$unsubscribe(this);\r\n  }\r\n};\n\nvar flagMergingStrategy = {\r\n  pristine: 'every',\r\n  dirty: 'some',\r\n  touched: 'some',\r\n  untouched: 'every',\r\n  valid: 'every',\r\n  invalid: 'some',\r\n  pending: 'some',\r\n  validated: 'every'\r\n};\r\n\r\nfunction mergeFlags (lhs, rhs, strategy) {\r\n  var stratName = flagMergingStrategy[strategy];\r\n\r\n  return [lhs, rhs][stratName](function (f) { return f; });\r\n}\r\n\r\nvar ValidationObserver = {\r\n  name: 'ValidationObserver',\r\n  provide: function provide () {\r\n    return {\r\n      $_veeObserver: this\r\n    };\r\n  },\r\n  data: function () { return ({\r\n    refs: {}\r\n  }); },\r\n  methods: {\r\n    $subscribe: function $subscribe (provider) {\n      var obj;\n\r\n      this.refs = Object.assign({}, this.refs, ( obj = {}, obj[provider.vid] = provider, obj ));\r\n    },\r\n    $unsubscribe: function $unsubscribe (ref) {\n      var vid = ref.vid;\n\r\n      delete this.refs[vid];\r\n      this.refs = Object.assign({}, this.refs);\r\n    },\r\n    validate: function validate () {\r\n      return Promise.all(\r\n        values(this.refs).map(function (ref) { return ref.validate(); })\r\n      ).then(function (results) { return results.every(function (r) { return r.valid; }); });\r\n    },\r\n    reset: function reset () {\r\n      return values(this.refs).forEach(function (ref) { return ref.reset(); });\r\n    }\r\n  },\r\n  computed: {\r\n    ctx: function ctx () {\n      var this$1 = this;\n\r\n      var ctx = {\r\n        errors: {},\r\n        validate: function () {\r\n          var promise = this$1.validate();\r\n\r\n          return {\r\n            then: function then (thenable) {\r\n              promise.then(function (success) {\r\n                if (success && isCallable(thenable)) {\r\n                  return Promise.resolve(thenable());\r\n                }\r\n\r\n                return Promise.resolve(success);\r\n              });\r\n            }\r\n          };\r\n        },\r\n        reset: function () { return this$1.reset(); }\r\n      };\r\n\r\n      return values(this.refs).reduce(function (acc, provider) {\r\n        Object.keys(flagMergingStrategy).forEach(function (flag) {\r\n          if (!(flag in acc)) {\r\n            acc[flag] = provider.flags[flag];\r\n            return;\r\n          }\r\n\r\n          acc[flag] = mergeFlags(acc[flag], provider.flags[flag], flag);\r\n        });\r\n\r\n        acc.errors[provider.vid] = provider.messages;\r\n\r\n        return acc;\r\n      }, ctx);\r\n    }\r\n  },\r\n  render: function render (h) {\r\n    var slots = this.$scopedSlots.default;\r\n    if (!isCallable(slots)) {\r\n      return createRenderless(h, this.$slots.default);\r\n    }\r\n\r\n    return createRenderless(h, slots(this.ctx));\r\n  }\r\n};\n\nfunction withValidation (component, ctxToProps) {\n  if ( ctxToProps === void 0 ) ctxToProps = null;\n\r\n  var options = isCallable(component) ? component.options : component;\r\n  options.$__veeInject = false;\r\n  var hoc = {\r\n    name: ((options.name || 'AnonymousHoc') + \"WithValidation\"),\r\n    props: assign({}, ValidationProvider.props),\r\n    data: ValidationProvider.data,\r\n    computed: assign({}, ValidationProvider.computed),\r\n    methods: assign({}, ValidationProvider.methods),\r\n    $__veeInject: false,\r\n    beforeDestroy: ValidationProvider.beforeDestroy,\r\n    inject: ValidationProvider.inject\r\n  };\r\n\r\n  // Default ctx converts ctx props to component props.\r\n  if (!ctxToProps) {\r\n    ctxToProps = function (ctx) { return ctx; };\r\n  }\r\n\r\n  var eventName = (options.model && options.model.event) || 'input';\r\n\r\n  hoc.render = function (h) {\n    var obj;\n\r\n    this.registerField();\r\n    var vctx = createValidationCtx(this);\r\n    var listeners = assign({}, this.$listeners);\r\n\r\n    var model = findModel(this.$vnode);\r\n    this._inputEventName = this._inputEventName || getInputEventName(this.$vnode, model);\r\n    onRenderUpdate.call(this, model);\r\n\r\n    var ref = createCommonHandlers(this);\n    var onInput = ref.onInput;\n    var onBlur = ref.onBlur;\n    var onValidate = ref.onValidate;\r\n\r\n    mergeVNodeListeners(listeners, eventName, onInput);\r\n    mergeVNodeListeners(listeners, 'blur', onBlur);\r\n    this.normalizedEvents.forEach(function (evt, idx) {\r\n      mergeVNodeListeners(listeners, evt, onValidate);\r\n    });\r\n\r\n    // Props are any attrs not associated with ValidationProvider Plus the model prop.\r\n    // WARNING: Accidental prop overwrite will probably happen.\r\n    var ref$1 = findModelConfig(this.$vnode) || { prop: 'value' };\n    var prop = ref$1.prop;\r\n    var props = assign({}, this.$attrs, ( obj = {}, obj[prop] = model.value, obj ), ctxToProps(vctx));\r\n\r\n    return h(options, {\r\n      attrs: this.$attrs,\r\n      props: props,\r\n      on: listeners\r\n    }, normalizeSlots(this.$slots, this.$vnode.context));\r\n  };\r\n\r\n  return hoc;\r\n}\n\n// \r\n\r\nvar normalizeValue = function (value) {\r\n  if (isObject(value)) {\r\n    return Object.keys(value).reduce(function (prev, key) {\r\n      prev[key] = normalizeValue(value[key]);\r\n\r\n      return prev;\r\n    }, {});\r\n  }\r\n\r\n  if (isCallable(value)) {\r\n    return value('{0}', ['{1}', '{2}', '{3}']);\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\nvar normalizeFormat = function (locale) {\r\n  // normalize messages\r\n  var dictionary = {};\r\n  if (locale.messages) {\r\n    dictionary.messages = normalizeValue(locale.messages);\r\n  }\r\n\r\n  if (locale.custom) {\r\n    dictionary.custom = normalizeValue(locale.custom);\r\n  }\r\n\r\n  if (locale.attributes) {\r\n    dictionary.attributes = locale.attributes;\r\n  }\r\n\r\n  if (!isNullOrUndefined(locale.dateFormat)) {\r\n    dictionary.dateFormat = locale.dateFormat;\r\n  }\r\n\r\n  return dictionary;\r\n};\r\n\r\nvar I18nDictionary = function I18nDictionary (i18n, rootKey) {\r\n  this.i18n = i18n;\r\n  this.rootKey = rootKey;\r\n};\n\nvar prototypeAccessors$5 = { locale: { configurable: true } };\r\n\r\nprototypeAccessors$5.locale.get = function () {\r\n  return this.i18n.locale;\r\n};\r\n\r\nprototypeAccessors$5.locale.set = function (value) {\r\n  warn('Cannot set locale from the validator when using vue-i18n, use i18n.locale setter instead');\r\n};\r\n\r\nI18nDictionary.prototype.getDateFormat = function getDateFormat (locale) {\r\n  return this.i18n.getDateTimeFormat(locale || this.locale);\r\n};\r\n\r\nI18nDictionary.prototype.setDateFormat = function setDateFormat (locale, value) {\r\n  this.i18n.setDateTimeFormat(locale || this.locale, value);\r\n};\r\n\r\nI18nDictionary.prototype.getMessage = function getMessage (_, key, data) {\r\n  var path = (this.rootKey) + \".messages.\" + key;\r\n  if (this.i18n.te(path)) {\r\n    return this.i18n.t(path, data);\r\n  }\r\n\r\n  // fallback to the fallback message\r\n  if (this.i18n.te(path, this.i18n.fallbackLocale)) {\r\n    return this.i18n.t(path, this.i18n.fallbackLocale, data);\r\n  }\r\n\r\n  // fallback to the root message\r\n  return this.i18n.t(((this.rootKey) + \".messages._default\"), data);\r\n};\r\n\r\nI18nDictionary.prototype.getAttribute = function getAttribute (_, key, fallback) {\n    if ( fallback === void 0 ) fallback = '';\n\r\n  var path = (this.rootKey) + \".attributes.\" + key;\r\n  if (this.i18n.te(path)) {\r\n    return this.i18n.t(path);\r\n  }\r\n\r\n  return fallback;\r\n};\r\n\r\nI18nDictionary.prototype.getFieldMessage = function getFieldMessage (_, field, key, data) {\r\n  var path = (this.rootKey) + \".custom.\" + field + \".\" + key;\r\n  if (this.i18n.te(path)) {\r\n    return this.i18n.t(path, data);\r\n  }\r\n\r\n  return this.getMessage(_, key, data);\r\n};\r\n\r\nI18nDictionary.prototype.merge = function merge$1 (dictionary) {\n    var this$1 = this;\n\r\n  Object.keys(dictionary).forEach(function (localeKey) {\n      var obj;\n\r\n    // i18n doesn't deep merge\r\n    // first clone the existing locale (avoid mutations to locale)\r\n    var clone = merge({}, getPath((localeKey + \".\" + (this$1.rootKey)), this$1.i18n.messages, {}));\r\n    // Merge cloned locale with new one\r\n    var locale = merge(clone, normalizeFormat(dictionary[localeKey]));\r\n    this$1.i18n.mergeLocaleMessage(localeKey, ( obj = {}, obj[this$1.rootKey] = locale, obj ));\r\n    if (locale.dateFormat) {\r\n      this$1.i18n.setDateTimeFormat(localeKey, locale.dateFormat);\r\n    }\r\n  });\r\n};\r\n\r\nI18nDictionary.prototype.setMessage = function setMessage (locale, key, value) {\n    var obj, obj$1;\n\r\n  this.merge(( obj$1 = {}, obj$1[locale] = {\r\n      messages: ( obj = {}, obj[key] = value, obj )\r\n    }, obj$1 ));\r\n};\r\n\r\nI18nDictionary.prototype.setAttribute = function setAttribute (locale, key, value) {\n    var obj, obj$1;\n\r\n  this.merge(( obj$1 = {}, obj$1[locale] = {\r\n      attributes: ( obj = {}, obj[key] = value, obj )\r\n    }, obj$1 ));\r\n};\n\nObject.defineProperties( I18nDictionary.prototype, prototypeAccessors$5 );\n\n// \r\n\r\nvar defaultConfig = {\r\n  locale: 'en',\r\n  delay: 0,\r\n  errorBagName: 'errors',\r\n  dictionary: null,\r\n  fieldsBagName: 'fields',\r\n  classes: false,\r\n  classNames: null,\r\n  events: 'input',\r\n  inject: true,\r\n  fastExit: true,\r\n  aria: true,\r\n  validity: false,\r\n  useConstraintAttrs: true,\r\n  i18n: null,\r\n  i18nRootKey: 'validation'\r\n};\r\n\r\nvar Vue;\r\nvar pendingPlugins;\r\nvar currentConfig = assign({}, defaultConfig);\r\nvar pluginInstance;\r\n\r\nvar VeeValidate$1 = function VeeValidate (config, _Vue) {\r\n  this.configure(config);\r\n  pluginInstance = this;\r\n  if (_Vue) {\r\n    Vue = _Vue;\r\n  }\r\n  this._validator = new Validator(null, { fastExit: config && config.fastExit });\r\n  this._initVM(this.config);\r\n  this._initI18n(this.config);\r\n};\n\nvar prototypeAccessors$6 = { i18nDriver: { configurable: true },config: { configurable: true } };\nvar staticAccessors$2 = { instance: { configurable: true },i18nDriver: { configurable: true },config: { configurable: true } };\r\n\r\nVeeValidate$1.setI18nDriver = function setI18nDriver (driver, instance) {\r\n  DictionaryResolver.setDriver(driver, instance);\r\n};\r\n\r\nVeeValidate$1.configure = function configure (cfg) {\r\n  currentConfig = assign({}, currentConfig, cfg);\r\n};\r\n\r\nVeeValidate$1.use = function use (plugin, options) {\n    if ( options === void 0 ) options = {};\n\r\n  if (!isCallable(plugin)) {\r\n    return warn('The plugin must be a callable function');\r\n  }\r\n\r\n  // Don't install plugins until vee-validate is installed.\r\n  if (!pluginInstance) {\r\n    if (!pendingPlugins) {\r\n      pendingPlugins = [];\r\n    }\r\n    pendingPlugins.push({ plugin: plugin, options: options });\r\n    return;\r\n  }\r\n\r\n  plugin({ Validator: Validator, ErrorBag: ErrorBag, Rules: Validator.rules }, options);\r\n};\r\nVeeValidate$1.install = function install (_Vue, opts) {\r\n  if (Vue && _Vue === Vue) {\r\n    if (true) {\r\n      warn('already installed, Vue.use(VeeValidate) should only be called once.');\r\n    }\r\n    return;\r\n  }\r\n\r\n  Vue = _Vue;\r\n  pluginInstance = new VeeValidate$1(opts);\r\n\r\n  detectPassiveSupport();\r\n\r\n  Vue.mixin(mixin);\r\n  Vue.directive('validate', directive);\r\n  if (pendingPlugins) {\r\n    pendingPlugins.forEach(function (ref) {\n        var plugin = ref.plugin;\n        var options = ref.options;\n\r\n      VeeValidate$1.use(plugin, options);\r\n    });\r\n    pendingPlugins = null;\r\n  }\r\n};\r\n\r\nstaticAccessors$2.instance.get = function () {\r\n  return pluginInstance;\r\n};\r\n\r\nprototypeAccessors$6.i18nDriver.get = function () {\r\n  return DictionaryResolver.getDriver();\r\n};\r\n\r\nstaticAccessors$2.i18nDriver.get = function () {\r\n  return DictionaryResolver.getDriver();\r\n};\r\n\r\nprototypeAccessors$6.config.get = function () {\r\n  return currentConfig;\r\n};\r\n\r\nstaticAccessors$2.config.get = function () {\r\n  return currentConfig;\r\n};\r\n\r\nVeeValidate$1.prototype._initVM = function _initVM (config) {\n    var this$1 = this;\n\r\n  this._vm = new Vue({\r\n    data: function () { return ({\r\n      errors: this$1._validator.errors,\r\n      fields: this$1._validator.fields\r\n    }); }\r\n  });\r\n};\r\n\r\nVeeValidate$1.prototype._initI18n = function _initI18n (config) {\n    var this$1 = this;\n\r\n  var dictionary = config.dictionary;\n    var i18n = config.i18n;\n    var i18nRootKey = config.i18nRootKey;\n    var locale = config.locale;\r\n  var onLocaleChanged = function () {\r\n    this$1._validator.errors.regenerate();\r\n  };\r\n\r\n  // i18 is being used for localization.\r\n  if (i18n) {\r\n    VeeValidate$1.setI18nDriver('i18n', new I18nDictionary(i18n, i18nRootKey));\r\n    i18n._vm.$watch('locale', onLocaleChanged);\r\n  } else if (typeof window !== 'undefined') {\r\n    this._vm.$on('localeChanged', onLocaleChanged);\r\n  }\r\n\r\n  if (dictionary) {\r\n    this.i18nDriver.merge(dictionary);\r\n  }\r\n\r\n  if (locale && !i18n) {\r\n    this._validator.localize(locale);\r\n  }\r\n};\r\n\r\nVeeValidate$1.prototype.configure = function configure (cfg) {\r\n  VeeValidate$1.configure(cfg);\r\n};\r\n\r\nVeeValidate$1.prototype.resolveConfig = function resolveConfig (ctx) {\r\n  var selfConfig = getPath('$options.$_veeValidate', ctx, {});\r\n\r\n  return assign({}, this.config, selfConfig);\r\n};\n\nObject.defineProperties( VeeValidate$1.prototype, prototypeAccessors$6 );\nObject.defineProperties( VeeValidate$1, staticAccessors$2 );\r\n\r\nVeeValidate$1.version = '2.1.7';\r\nVeeValidate$1.mixin = mixin;\r\nVeeValidate$1.directive = directive;\r\nVeeValidate$1.Validator = Validator;\r\nVeeValidate$1.ErrorBag = ErrorBag;\r\nVeeValidate$1.mapFields = mapFields;\r\nVeeValidate$1.ValidationProvider = ValidationProvider;\r\nVeeValidate$1.ValidationObserver = ValidationObserver;\r\nVeeValidate$1.withValidation = withValidation;\n\n/**\r\n * Formates file size.\r\n *\r\n * @param {Number|String} size\r\n */\r\nvar formatFileSize = function (size) {\r\n  var units = ['Byte', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\r\n  var threshold = 1024;\r\n  size = Number(size) * threshold;\r\n  var i = size === 0 ? 0 : Math.floor(Math.log(size) / Math.log(threshold));\r\n  return (((size / Math.pow(threshold, i)).toFixed(2) * 1) + \" \" + (units[i]));\r\n};\r\n\r\n/**\r\n * Checks if vee-validate is defined globally.\r\n */\r\nvar isDefinedGlobally = function () {\r\n  return typeof VeeValidate !== 'undefined';\r\n};\n\nvar obj;\n\r\nvar messages = {\r\n  _default: function (field) { return (\"The \" + field + \" value is not valid.\"); },\r\n  after: function (field, ref) {\n    var target = ref[0];\n    var inclusion = ref[1];\n\n    return (\"The \" + field + \" must be after \" + (inclusion ? 'or equal to ' : '') + target + \".\");\n},\r\n  alpha: function (field) { return (\"The \" + field + \" field may only contain alphabetic characters.\"); },\r\n  alpha_dash: function (field) { return (\"The \" + field + \" field may contain alpha-numeric characters as well as dashes and underscores.\"); },\r\n  alpha_num: function (field) { return (\"The \" + field + \" field may only contain alpha-numeric characters.\"); },\r\n  alpha_spaces: function (field) { return (\"The \" + field + \" field may only contain alphabetic characters as well as spaces.\"); },\r\n  before: function (field, ref) {\n    var target = ref[0];\n    var inclusion = ref[1];\n\n    return (\"The \" + field + \" must be before \" + (inclusion ? 'or equal to ' : '') + target + \".\");\n},\r\n  between: function (field, ref) {\n    var min = ref[0];\n    var max = ref[1];\n\n    return (\"The \" + field + \" field must be between \" + min + \" and \" + max + \".\");\n},\r\n  confirmed: function (field) { return (\"The \" + field + \" confirmation does not match.\"); },\r\n  credit_card: function (field) { return (\"The \" + field + \" field is invalid.\"); },\r\n  date_between: function (field, ref) {\n    var min = ref[0];\n    var max = ref[1];\n\n    return (\"The \" + field + \" must be between \" + min + \" and \" + max + \".\");\n},\r\n  date_format: function (field, ref) {\n    var format = ref[0];\n\n    return (\"The \" + field + \" must be in the format \" + format + \".\");\n},\r\n  decimal: function (field, ref) {\n    if ( ref === void 0 ) ref = [];\n    var decimals = ref[0]; if ( decimals === void 0 ) decimals = '*';\n\n    return (\"The \" + field + \" field must be numeric and may contain \" + (!decimals || decimals === '*' ? '' : decimals) + \" decimal points.\");\n},\r\n  digits: function (field, ref) {\n    var length = ref[0];\n\n    return (\"The \" + field + \" field must be numeric and exactly contain \" + length + \" digits.\");\n},\r\n  dimensions: function (field, ref) {\n    var width = ref[0];\n    var height = ref[1];\n\n    return (\"The \" + field + \" field must be \" + width + \" pixels by \" + height + \" pixels.\");\n},\r\n  email: function (field) { return (\"The \" + field + \" field must be a valid email.\"); },\r\n  excluded: function (field) { return (\"The \" + field + \" field must be a valid value.\"); },\r\n  ext: function (field) { return (\"The \" + field + \" field must be a valid file.\"); },\r\n  image: function (field) { return (\"The \" + field + \" field must be an image.\"); },\r\n  included: function (field) { return (\"The \" + field + \" field must be a valid value.\"); },\r\n  integer: function (field) { return (\"The \" + field + \" field must be an integer.\"); },\r\n  ip: function (field) { return (\"The \" + field + \" field must be a valid ip address.\"); },\r\n  length: function (field, ref) {\n    var length = ref[0];\n    var max = ref[1];\n\r\n    if (max) {\r\n      return (\"The \" + field + \" length must be between \" + length + \" and \" + max + \".\");\r\n    }\r\n\r\n    return (\"The \" + field + \" length must be \" + length + \".\");\r\n  },\r\n  max: function (field, ref) {\n    var length = ref[0];\n\n    return (\"The \" + field + \" field may not be greater than \" + length + \" characters.\");\n},\r\n  max_value: function (field, ref) {\n    var max = ref[0];\n\n    return (\"The \" + field + \" field must be \" + max + \" or less.\");\n},\r\n  mimes: function (field) { return (\"The \" + field + \" field must have a valid file type.\"); },\r\n  min: function (field, ref) {\n    var length = ref[0];\n\n    return (\"The \" + field + \" field must be at least \" + length + \" characters.\");\n},\r\n  min_value: function (field, ref) {\n    var min = ref[0];\n\n    return (\"The \" + field + \" field must be \" + min + \" or more.\");\n},\r\n  numeric: function (field) { return (\"The \" + field + \" field may only contain numeric characters.\"); },\r\n  regex: function (field) { return (\"The \" + field + \" field format is invalid.\"); },\r\n  required: function (field) { return (\"The \" + field + \" field is required.\"); },\r\n  required_if: function (field, ref) {\n    var target = ref[0];\n\n    return (\"The \" + field + \" field is required when the \" + target + \" field has this value.\");\n},\r\n  size: function (field, ref) {\n    var size = ref[0];\n\n    return (\"The \" + field + \" size must be less than \" + (formatFileSize(size)) + \".\");\n},\r\n  url: function (field) { return (\"The \" + field + \" field is not a valid URL.\"); }\r\n};\r\n\r\nvar locale = {\r\n  name: 'en',\r\n  messages: messages,\r\n  attributes: {}\r\n};\r\n\r\nif (isDefinedGlobally()) {\r\n  // eslint-disable-next-line\r\n  VeeValidate.Validator.localize(( obj = {}, obj[locale.name] = locale, obj ));\r\n}\n\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\n\nvar patterns = {\n  dateTimeDelimeter: /[T ]/,\n  plainTime: /:/,\n\n  // year tokens\n  YY: /^(\\d{2})$/,\n  YYY: [\n    /^([+-]\\d{2})$/, // 0 additional digits\n    /^([+-]\\d{3})$/, // 1 additional digit\n    /^([+-]\\d{4})$/ // 2 additional digits\n  ],\n  YYYY: /^(\\d{4})/,\n  YYYYY: [\n    /^([+-]\\d{4})/, // 0 additional digits\n    /^([+-]\\d{5})/, // 1 additional digit\n    /^([+-]\\d{6})/ // 2 additional digits\n  ],\n\n  // date tokens\n  MM: /^-(\\d{2})$/,\n  DDD: /^-?(\\d{3})$/,\n  MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n  Www: /^-?W(\\d{2})$/,\n  WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n\n  HH: /^(\\d{2}([.,]\\d*)?)$/,\n  HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n\n  // timezone tokens\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-])(\\d{2})$/,\n  timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/\n};\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument is null, it is treated as an invalid date.\n *\n * If all above fails, the function passes the given argument to Date constructor.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param {*} argument - the value to convert\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nfunction toDate (argument, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  if (argument === null) {\n    return new Date(NaN)\n  }\n\n  var options = dirtyOptions || {};\n\n  var additionalDigits = options.additionalDigits === undefined ? DEFAULT_ADDITIONAL_DIGITS : Number(options.additionalDigits);\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2')\n  }\n\n  // Clone the date\n  if (argument instanceof Date) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (typeof argument !== 'string') {\n    return new Date(argument)\n  }\n\n  var dateStrings = splitDateString(argument);\n\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n  var year = parseYearResult.year;\n  var restDateString = parseYearResult.restDateString;\n\n  var date = parseDate(restDateString, year);\n\n  if (date) {\n    var timestamp = date.getTime();\n    var time = 0;\n    var offset;\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time);\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone);\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = new Date(timestamp + time).getTimezoneOffset();\n      offset = new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE).getTimezoneOffset();\n    }\n\n    return new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE)\n  } else {\n    return new Date(argument)\n  }\n}\n\nfunction splitDateString (dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimeter);\n  var timeString;\n\n  if (patterns.plainTime.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings\n}\n\nfunction parseYear (dateString, additionalDigits) {\n  var patternYYY = patterns.YYY[additionalDigits];\n  var patternYYYYY = patterns.YYYYY[additionalDigits];\n\n  var token;\n\n  // YYYY or ±YYYYY\n  token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\n  if (token) {\n    var yearString = token[1];\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    }\n  }\n\n  // YY or ±YYY\n  token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\n  if (token) {\n    var centuryString = token[1];\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    }\n  }\n\n  // Invalid ISO-formatted year\n  return {\n    year: null\n  }\n}\n\nfunction parseDate (dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null\n  }\n\n  var token;\n  var date;\n  var month;\n  var week;\n\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0);\n    date.setUTCFullYear(year);\n    return date\n  }\n\n  // YYYY-MM\n  token = patterns.MM.exec(dateString);\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    date.setUTCFullYear(year, month);\n    return date\n  }\n\n  // YYYY-DDD or YYYYDDD\n  token = patterns.DDD.exec(dateString);\n  if (token) {\n    date = new Date(0);\n    var dayOfYear = parseInt(token[1], 10);\n    date.setUTCFullYear(year, 0, dayOfYear);\n    return date\n  }\n\n  // YYYY-MM-DD or YYYYMMDD\n  token = patterns.MMDD.exec(dateString);\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    var day = parseInt(token[2], 10);\n    date.setUTCFullYear(year, month, day);\n    return date\n  }\n\n  // YYYY-Www or YYYYWww\n  token = patterns.Www.exec(dateString);\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    return dayOfISOYear(year, week)\n  }\n\n  // YYYY-Www-D or YYYYWwwD\n  token = patterns.WwwD.exec(dateString);\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    var dayOfWeek = parseInt(token[2], 10) - 1;\n    return dayOfISOYear(year, week, dayOfWeek)\n  }\n\n  // Invalid ISO-formatted date\n  return null\n}\n\nfunction parseTime (timeString) {\n  var token;\n  var hours;\n  var minutes;\n\n  // hh\n  token = patterns.HH.exec(timeString);\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'));\n    return (hours % 24) * MILLISECONDS_IN_HOUR\n  }\n\n  // hh:mm or hhmm\n  token = patterns.HHMM.exec(timeString);\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseFloat(token[2].replace(',', '.'));\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE\n  }\n\n  // hh:mm:ss or hhmmss\n  token = patterns.HHMMSS.exec(timeString);\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseInt(token[2], 10);\n    var seconds = parseFloat(token[3].replace(',', '.'));\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE +\n      seconds * 1000\n  }\n\n  // Invalid ISO-formatted time\n  return null\n}\n\nfunction parseTimezone (timezoneString) {\n  var token;\n  var absoluteOffset;\n\n  // Z\n  token = patterns.timezoneZ.exec(timezoneString);\n  if (token) {\n    return 0\n  }\n\n  // ±hh\n  token = patterns.timezoneHH.exec(timezoneString);\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60;\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  // ±hh:mm or ±hhmm\n  token = patterns.timezoneHHMM.exec(timezoneString);\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10);\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  return 0\n}\n\nfunction dayOfISOYear (isoYear, week, day) {\n  week = week || 0;\n  day = day || 0;\n  var date = new Date(0);\n  date.setUTCFullYear(isoYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date\n}\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @param {Date|String|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\nfunction addMilliseconds (dirtyDate, dirtyAmount, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var timestamp = toDate(dirtyDate, dirtyOptions).getTime();\n  var amount = Number(dirtyAmount);\n  return new Date(timestamp + amount)\n}\n\nfunction cloneObject (dirtyObject) {\n  dirtyObject = dirtyObject || {};\n  var object = {};\n\n  for (var property in dirtyObject) {\n    if (dirtyObject.hasOwnProperty(property)) {\n      object[property] = dirtyObject[property];\n    }\n  }\n\n  return object\n}\n\nvar MILLISECONDS_IN_MINUTE$2 = 60000;\n\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @param {Date|String|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * var result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\nfunction addMinutes (dirtyDate, dirtyAmount, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var amount = Number(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE$2, dirtyOptions)\n}\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {*} date - the date to check\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid('2014-02-31')\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\nfunction isValid (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  return !isNaN(date)\n}\n\nvar formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n\n  halfAMinute: 'half a minute',\n\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\n\nfunction formatDistance (token, count, options) {\n  options = options || {};\n\n  var result;\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token];\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one;\n  } else {\n    result = formatDistanceLocale[token].other.replace('{{count}}', count);\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'in ' + result\n    } else {\n      return result + ' ago'\n    }\n  }\n\n  return result\n}\n\nvar tokensToBeShortedPattern = /MMMM|MM|DD|dddd/g;\n\nfunction buildShortLongFormat (format) {\n  return format.replace(tokensToBeShortedPattern, function (token) {\n    return token.slice(1)\n  })\n}\n\n/**\n * @name buildFormatLongFn\n * @category Locale Helpers\n * @summary Build `formatLong` property for locale used by `format`, `formatRelative` and `parse` functions.\n *\n * @description\n * Build `formatLong` property for locale used by `format`, `formatRelative` and `parse` functions.\n * Returns a function which takes one of the following tokens as the argument:\n * `'LTS'`, `'LT'`, `'L'`, `'LL'`, `'LLL'`, `'l'`, `'ll'`, `'lll'`, `'llll'`\n * and returns a long format string written as `format` token strings.\n * See [format]{@link https://date-fns.org/docs/format}\n *\n * `'l'`, `'ll'`, `'lll'` and `'llll'` formats are built automatically\n * by shortening some of the tokens from corresponding unshortened formats\n * (e.g., if `LL` is `'MMMM DD YYYY'` then `ll` will be `MMM D YYYY`)\n *\n * @param {Object} obj - the object with long formats written as `format` token strings\n * @param {String} obj.LT - time format: hours and minutes\n * @param {String} obj.LTS - time format: hours, minutes and seconds\n * @param {String} obj.L - short date format: numeric day, month and year\n * @param {String} [obj.l] - short date format: numeric day, month and year (shortened)\n * @param {String} obj.LL - long date format: day, month in words, and year\n * @param {String} [obj.ll] - long date format: day, month in words, and year (shortened)\n * @param {String} obj.LLL - long date and time format\n * @param {String} [obj.lll] - long date and time format (shortened)\n * @param {String} obj.LLLL - long date, time and weekday format\n * @param {String} [obj.llll] - long date, time and weekday format (shortened)\n * @returns {Function} `formatLong` property of the locale\n *\n * @example\n * // For `en-US` locale:\n * locale.formatLong = buildFormatLongFn({\n *   LT: 'h:mm aa',\n *   LTS: 'h:mm:ss aa',\n *   L: 'MM/DD/YYYY',\n *   LL: 'MMMM D YYYY',\n *   LLL: 'MMMM D YYYY h:mm aa',\n *   LLLL: 'dddd, MMMM D YYYY h:mm aa'\n * })\n */\nfunction buildFormatLongFn (obj) {\n  var formatLongLocale = {\n    LTS: obj.LTS,\n    LT: obj.LT,\n    L: obj.L,\n    LL: obj.LL,\n    LLL: obj.LLL,\n    LLLL: obj.LLLL,\n    l: obj.l || buildShortLongFormat(obj.L),\n    ll: obj.ll || buildShortLongFormat(obj.LL),\n    lll: obj.lll || buildShortLongFormat(obj.LLL),\n    llll: obj.llll || buildShortLongFormat(obj.LLLL)\n  };\n\n  return function (token) {\n    return formatLongLocale[token]\n  }\n}\n\nvar formatLong = buildFormatLongFn({\n  LT: 'h:mm aa',\n  LTS: 'h:mm:ss aa',\n  L: 'MM/DD/YYYY',\n  LL: 'MMMM D YYYY',\n  LLL: 'MMMM D YYYY h:mm aa',\n  LLLL: 'dddd, MMMM D YYYY h:mm aa'\n});\n\nvar formatRelativeLocale = {\n  lastWeek: '[last] dddd [at] LT',\n  yesterday: '[yesterday at] LT',\n  today: '[today at] LT',\n  tomorrow: '[tomorrow at] LT',\n  nextWeek: 'dddd [at] LT',\n  other: 'L'\n};\n\nfunction formatRelative (token, date, baseDate, options) {\n  return formatRelativeLocale[token]\n}\n\n/**\n * @name buildLocalizeFn\n * @category Locale Helpers\n * @summary Build `localize.weekday`, `localize.month` and `localize.timeOfDay` properties for the locale.\n *\n * @description\n * Build `localize.weekday`, `localize.month` and `localize.timeOfDay` properties for the locale\n * used by `format` function.\n * If no `type` is supplied to the options of the resulting function, `defaultType` will be used (see example).\n *\n * `localize.weekday` function takes the weekday index as argument (0 - Sunday).\n * `localize.month` takes the month index (0 - January).\n * `localize.timeOfDay` takes the hours. Use `indexCallback` to convert them to an array index (see example).\n *\n * @param {Object} values - the object with arrays of values\n * @param {String} defaultType - the default type for the localize function\n * @param {Function} [indexCallback] - the callback which takes the resulting function argument\n *   and converts it into value array index\n * @returns {Function} the resulting function\n *\n * @example\n * var timeOfDayValues = {\n *   uppercase: ['AM', 'PM'],\n *   lowercase: ['am', 'pm'],\n *   long: ['a.m.', 'p.m.']\n * }\n * locale.localize.timeOfDay = buildLocalizeFn(timeOfDayValues, 'long', function (hours) {\n *   // 0 is a.m. array index, 1 is p.m. array index\n *   return (hours / 12) >= 1 ? 1 : 0\n * })\n * locale.localize.timeOfDay(16, {type: 'uppercase'}) //=> 'PM'\n * locale.localize.timeOfDay(5) //=> 'a.m.'\n */\nfunction buildLocalizeFn (values, defaultType, indexCallback) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var type = options.type ? String(options.type) : defaultType;\n    var valuesArray = values[type] || values[defaultType];\n    var index = indexCallback ? indexCallback(Number(dirtyIndex)) : Number(dirtyIndex);\n    return valuesArray[index]\n  }\n}\n\n/**\n * @name buildLocalizeArrayFn\n * @category Locale Helpers\n * @summary Build `localize.weekdays`, `localize.months` and `localize.timesOfDay` properties for the locale.\n *\n * @description\n * Build `localize.weekdays`, `localize.months` and `localize.timesOfDay` properties for the locale.\n * If no `type` is supplied to the options of the resulting function, `defaultType` will be used (see example).\n *\n * @param {Object} values - the object with arrays of values\n * @param {String} defaultType - the default type for the localize function\n * @returns {Function} the resulting function\n *\n * @example\n * var weekdayValues = {\n *   narrow: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n *   short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n *   long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n * }\n * locale.localize.weekdays = buildLocalizeArrayFn(weekdayValues, 'long')\n * locale.localize.weekdays({type: 'narrow'}) //=> ['Su', 'Mo', ...]\n * locale.localize.weekdays() //=> ['Sunday', 'Monday', ...]\n */\nfunction buildLocalizeArrayFn (values, defaultType) {\n  return function (dirtyOptions) {\n    var options = dirtyOptions || {};\n    var type = options.type ? String(options.type) : defaultType;\n    return values[type] || values[defaultType]\n  }\n}\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nvar weekdayValues = {\n  narrow: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\n\nvar monthValues = {\n  short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  long: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\n\n// `timeOfDay` is used to designate which part of the day it is, when used with 12-hour clock.\n// Use the system which is used the most commonly in the locale.\n// For example, if the country doesn't use a.m./p.m., you can use `night`/`morning`/`afternoon`/`evening`:\n//\n//   var timeOfDayValues = {\n//     any: ['in the night', 'in the morning', 'in the afternoon', 'in the evening']\n//   }\n//\n// And later:\n//\n//   var localize = {\n//     // The callback takes the hours as the argument and returns the array index\n//     timeOfDay: buildLocalizeFn(timeOfDayValues, 'any', function (hours) {\n//       if (hours >= 17) {\n//         return 3\n//       } else if (hours >= 12) {\n//         return 2\n//       } else if (hours >= 4) {\n//         return 1\n//       } else {\n//         return 0\n//       }\n//     }),\n//     timesOfDay: buildLocalizeArrayFn(timeOfDayValues, 'any')\n//   }\nvar timeOfDayValues = {\n  uppercase: ['AM', 'PM'],\n  lowercase: ['am', 'pm'],\n  long: ['a.m.', 'p.m.']\n};\n\nfunction ordinalNumber (dirtyNumber, dirtyOptions) {\n  var number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`:\n  //\n  //   var options = dirtyOptions || {}\n  //   var unit = String(options.unit)\n  //\n  // where `unit` can be 'month', 'quarter', 'week', 'isoWeek', 'dayOfYear',\n  // 'dayOfMonth' or 'dayOfWeek'\n\n  var rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st'\n      case 2:\n        return number + 'nd'\n      case 3:\n        return number + 'rd'\n    }\n  }\n  return number + 'th'\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  weekday: buildLocalizeFn(weekdayValues, 'long'),\n  weekdays: buildLocalizeArrayFn(weekdayValues, 'long'),\n  month: buildLocalizeFn(monthValues, 'long'),\n  months: buildLocalizeArrayFn(monthValues, 'long'),\n  timeOfDay: buildLocalizeFn(timeOfDayValues, 'long', function (hours) {\n    return (hours / 12) >= 1 ? 1 : 0\n  }),\n  timesOfDay: buildLocalizeArrayFn(timeOfDayValues, 'long')\n};\n\n/**\n * @name buildMatchFn\n * @category Locale Helpers\n * @summary Build `match.weekdays`, `match.months` and `match.timesOfDay` properties for the locale.\n *\n * @description\n * Build `match.weekdays`, `match.months` and `match.timesOfDay` properties for the locale used by `parse` function.\n * If no `type` is supplied to the options of the resulting function, `defaultType` will be used (see example).\n * The result of the match function will be passed into corresponding parser function\n * (`match.weekday`, `match.month` or `match.timeOfDay` respectively. See `buildParseFn`).\n *\n * @param {Object} values - the object with RegExps\n * @param {String} defaultType - the default type for the match function\n * @returns {Function} the resulting function\n *\n * @example\n * var matchWeekdaysPatterns = {\n *   narrow: /^(su|mo|tu|we|th|fr|sa)/i,\n *   short: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n *   long: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n * }\n * locale.match.weekdays = buildMatchFn(matchWeekdaysPatterns, 'long')\n * locale.match.weekdays('Sunday', {type: 'narrow'}) //=> ['Su', 'Su', ...]\n * locale.match.weekdays('Sunday') //=> ['Sunday', 'Sunday', ...]\n */\nfunction buildMatchFn (patterns, defaultType) {\n  return function (dirtyString, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var type = options.type ? String(options.type) : defaultType;\n    var pattern = patterns[type] || patterns[defaultType];\n    var string = String(dirtyString);\n    return string.match(pattern)\n  }\n}\n\n/**\n * @name buildParseFn\n * @category Locale Helpers\n * @summary Build `match.weekday`, `match.month` and `match.timeOfDay` properties for the locale.\n *\n * @description\n * Build `match.weekday`, `match.month` and `match.timeOfDay` properties for the locale used by `parse` function.\n * The argument of the resulting function is the result of the corresponding match function\n * (`match.weekdays`, `match.months` or `match.timesOfDay` respectively. See `buildMatchFn`).\n *\n * @param {Object} values - the object with arrays of RegExps\n * @param {String} defaultType - the default type for the parser function\n * @returns {Function} the resulting function\n *\n * @example\n * var parseWeekdayPatterns = {\n *   any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n * }\n * locale.match.weekday = buildParseFn(matchWeekdaysPatterns, 'long')\n * var matchResult = locale.match.weekdays('Friday')\n * locale.match.weekday(matchResult) //=> 5\n */\nfunction buildParseFn (patterns, defaultType) {\n  return function (matchResult, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var type = options.type ? String(options.type) : defaultType;\n    var patternsArray = patterns[type] || patterns[defaultType];\n    var string = matchResult[1];\n\n    return patternsArray.findIndex(function (pattern) {\n      return pattern.test(string)\n    })\n  }\n}\n\n/**\n * @name buildMatchPatternFn\n * @category Locale Helpers\n * @summary Build match function from a single RegExp.\n *\n * @description\n * Build match function from a single RegExp.\n * Usually used for building `match.ordinalNumbers` property of the locale.\n *\n * @param {Object} pattern - the RegExp\n * @returns {Function} the resulting function\n *\n * @example\n * locale.match.ordinalNumbers = buildMatchPatternFn(/^(\\d+)(th|st|nd|rd)?/i)\n * locale.match.ordinalNumbers('3rd') //=> ['3rd', '3', 'rd', ...]\n */\nfunction buildMatchPatternFn (pattern) {\n  return function (dirtyString) {\n    var string = String(dirtyString);\n    return string.match(pattern)\n  }\n}\n\n/**\n * @name parseDecimal\n * @category Locale Helpers\n * @summary Parses the match result into decimal number.\n *\n * @description\n * Parses the match result into decimal number.\n * Uses the string matched with the first set of parentheses of match RegExp.\n *\n * @param {Array} matchResult - the object returned by matching function\n * @returns {Number} the parsed value\n *\n * @example\n * locale.match = {\n *   ordinalNumbers: (dirtyString) {\n *     return String(dirtyString).match(/^(\\d+)(th|st|nd|rd)?/i)\n *   },\n *   ordinalNumber: parseDecimal\n * }\n */\nfunction parseDecimal (matchResult) {\n  return parseInt(matchResult[1], 10)\n}\n\nvar matchOrdinalNumbersPattern = /^(\\d+)(th|st|nd|rd)?/i;\n\nvar matchWeekdaysPatterns = {\n  narrow: /^(su|mo|tu|we|th|fr|sa)/i,\n  short: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  long: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\n\nvar parseWeekdayPatterns = {\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\n\nvar matchMonthsPatterns = {\n  short: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  long: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\n\nvar parseMonthPatterns = {\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\n\n// `timeOfDay` is used to designate which part of the day it is, when used with 12-hour clock.\n// Use the system which is used the most commonly in the locale.\n// For example, if the country doesn't use a.m./p.m., you can use `night`/`morning`/`afternoon`/`evening`:\n//\n//   var matchTimesOfDayPatterns = {\n//     long: /^((in the)? (night|morning|afternoon|evening?))/i\n//   }\n//\n//   var parseTimeOfDayPatterns = {\n//     any: [/(night|morning)/i, /(afternoon|evening)/i]\n//   }\nvar matchTimesOfDayPatterns = {\n  short: /^(am|pm)/i,\n  long: /^([ap]\\.?\\s?m\\.?)/i\n};\n\nvar parseTimeOfDayPatterns = {\n  any: [/^a/i, /^p/i]\n};\n\nvar match = {\n  ordinalNumbers: buildMatchPatternFn(matchOrdinalNumbersPattern),\n  ordinalNumber: parseDecimal,\n  weekdays: buildMatchFn(matchWeekdaysPatterns, 'long'),\n  weekday: buildParseFn(parseWeekdayPatterns, 'any'),\n  months: buildMatchFn(matchMonthsPatterns, 'long'),\n  month: buildParseFn(parseMonthPatterns, 'any'),\n  timesOfDay: buildMatchFn(matchTimesOfDayPatterns, 'long'),\n  timeOfDay: buildParseFn(parseTimeOfDayPatterns, 'any')\n};\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n */\nvar locale$1 = {\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1\n  }\n};\n\nvar MILLISECONDS_IN_DAY$1 = 86400000;\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction getUTCDayOfYear (dirtyDate, dirtyOptions) {\n  var date = toDate(dirtyDate, dirtyOptions);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY$1) + 1\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction startOfUTCISOWeek (dirtyDate, dirtyOptions) {\n  var weekStartsOn = 1;\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction getUTCISOWeekYear (dirtyDate, dirtyOptions) {\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear, dirtyOptions);\n\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year\n  } else {\n    return year - 1\n  }\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction startOfUTCISOWeekYear (dirtyDate, dirtyOptions) {\n  var year = getUTCISOWeekYear(dirtyDate, dirtyOptions);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary, dirtyOptions);\n  return date\n}\n\nvar MILLISECONDS_IN_WEEK$2 = 604800000;\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction getUTCISOWeek (dirtyDate, dirtyOptions) {\n  var date = toDate(dirtyDate, dirtyOptions);\n  var diff = startOfUTCISOWeek(date, dirtyOptions).getTime() - startOfUTCISOWeekYear(date, dirtyOptions).getTime();\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / MILLISECONDS_IN_WEEK$2) + 1\n}\n\nvar formatters = {\n  // Month: 1, 2, ..., 12\n  'M': function (date) {\n    return date.getUTCMonth() + 1\n  },\n\n  // Month: 1st, 2nd, ..., 12th\n  'Mo': function (date, options) {\n    var month = date.getUTCMonth() + 1;\n    return options.locale.localize.ordinalNumber(month, {unit: 'month'})\n  },\n\n  // Month: 01, 02, ..., 12\n  'MM': function (date) {\n    return addLeadingZeros(date.getUTCMonth() + 1, 2)\n  },\n\n  // Month: Jan, Feb, ..., Dec\n  'MMM': function (date, options) {\n    return options.locale.localize.month(date.getUTCMonth(), {type: 'short'})\n  },\n\n  // Month: January, February, ..., December\n  'MMMM': function (date, options) {\n    return options.locale.localize.month(date.getUTCMonth(), {type: 'long'})\n  },\n\n  // Quarter: 1, 2, 3, 4\n  'Q': function (date) {\n    return Math.ceil((date.getUTCMonth() + 1) / 3)\n  },\n\n  // Quarter: 1st, 2nd, 3rd, 4th\n  'Qo': function (date, options) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n    return options.locale.localize.ordinalNumber(quarter, {unit: 'quarter'})\n  },\n\n  // Day of month: 1, 2, ..., 31\n  'D': function (date) {\n    return date.getUTCDate()\n  },\n\n  // Day of month: 1st, 2nd, ..., 31st\n  'Do': function (date, options) {\n    return options.locale.localize.ordinalNumber(date.getUTCDate(), {unit: 'dayOfMonth'})\n  },\n\n  // Day of month: 01, 02, ..., 31\n  'DD': function (date) {\n    return addLeadingZeros(date.getUTCDate(), 2)\n  },\n\n  // Day of year: 1, 2, ..., 366\n  'DDD': function (date) {\n    return getUTCDayOfYear(date)\n  },\n\n  // Day of year: 1st, 2nd, ..., 366th\n  'DDDo': function (date, options) {\n    return options.locale.localize.ordinalNumber(getUTCDayOfYear(date), {unit: 'dayOfYear'})\n  },\n\n  // Day of year: 001, 002, ..., 366\n  'DDDD': function (date) {\n    return addLeadingZeros(getUTCDayOfYear(date), 3)\n  },\n\n  // Day of week: Su, Mo, ..., Sa\n  'dd': function (date, options) {\n    return options.locale.localize.weekday(date.getUTCDay(), {type: 'narrow'})\n  },\n\n  // Day of week: Sun, Mon, ..., Sat\n  'ddd': function (date, options) {\n    return options.locale.localize.weekday(date.getUTCDay(), {type: 'short'})\n  },\n\n  // Day of week: Sunday, Monday, ..., Saturday\n  'dddd': function (date, options) {\n    return options.locale.localize.weekday(date.getUTCDay(), {type: 'long'})\n  },\n\n  // Day of week: 0, 1, ..., 6\n  'd': function (date) {\n    return date.getUTCDay()\n  },\n\n  // Day of week: 0th, 1st, 2nd, ..., 6th\n  'do': function (date, options) {\n    return options.locale.localize.ordinalNumber(date.getUTCDay(), {unit: 'dayOfWeek'})\n  },\n\n  // Day of ISO week: 1, 2, ..., 7\n  'E': function (date) {\n    return date.getUTCDay() || 7\n  },\n\n  // ISO week: 1, 2, ..., 53\n  'W': function (date) {\n    return getUTCISOWeek(date)\n  },\n\n  // ISO week: 1st, 2nd, ..., 53th\n  'Wo': function (date, options) {\n    return options.locale.localize.ordinalNumber(getUTCISOWeek(date), {unit: 'isoWeek'})\n  },\n\n  // ISO week: 01, 02, ..., 53\n  'WW': function (date) {\n    return addLeadingZeros(getUTCISOWeek(date), 2)\n  },\n\n  // Year: 00, 01, ..., 99\n  'YY': function (date) {\n    return addLeadingZeros(date.getUTCFullYear(), 4).substr(2)\n  },\n\n  // Year: 1900, 1901, ..., 2099\n  'YYYY': function (date) {\n    return addLeadingZeros(date.getUTCFullYear(), 4)\n  },\n\n  // ISO week-numbering year: 00, 01, ..., 99\n  'GG': function (date) {\n    return String(getUTCISOWeekYear(date)).substr(2)\n  },\n\n  // ISO week-numbering year: 1900, 1901, ..., 2099\n  'GGGG': function (date) {\n    return getUTCISOWeekYear(date)\n  },\n\n  // Hour: 0, 1, ... 23\n  'H': function (date) {\n    return date.getUTCHours()\n  },\n\n  // Hour: 00, 01, ..., 23\n  'HH': function (date) {\n    return addLeadingZeros(date.getUTCHours(), 2)\n  },\n\n  // Hour: 1, 2, ..., 12\n  'h': function (date) {\n    var hours = date.getUTCHours();\n    if (hours === 0) {\n      return 12\n    } else if (hours > 12) {\n      return hours % 12\n    } else {\n      return hours\n    }\n  },\n\n  // Hour: 01, 02, ..., 12\n  'hh': function (date) {\n    return addLeadingZeros(formatters['h'](date), 2)\n  },\n\n  // Minute: 0, 1, ..., 59\n  'm': function (date) {\n    return date.getUTCMinutes()\n  },\n\n  // Minute: 00, 01, ..., 59\n  'mm': function (date) {\n    return addLeadingZeros(date.getUTCMinutes(), 2)\n  },\n\n  // Second: 0, 1, ..., 59\n  's': function (date) {\n    return date.getUTCSeconds()\n  },\n\n  // Second: 00, 01, ..., 59\n  'ss': function (date) {\n    return addLeadingZeros(date.getUTCSeconds(), 2)\n  },\n\n  // 1/10 of second: 0, 1, ..., 9\n  'S': function (date) {\n    return Math.floor(date.getUTCMilliseconds() / 100)\n  },\n\n  // 1/100 of second: 00, 01, ..., 99\n  'SS': function (date) {\n    return addLeadingZeros(Math.floor(date.getUTCMilliseconds() / 10), 2)\n  },\n\n  // Millisecond: 000, 001, ..., 999\n  'SSS': function (date) {\n    return addLeadingZeros(date.getUTCMilliseconds(), 3)\n  },\n\n  // Timezone: -01:00, +00:00, ... +12:00\n  'Z': function (date, options) {\n    var originalDate = options._originalDate || date;\n    return formatTimezone(originalDate.getTimezoneOffset(), ':')\n  },\n\n  // Timezone: -0100, +0000, ... +1200\n  'ZZ': function (date, options) {\n    var originalDate = options._originalDate || date;\n    return formatTimezone(originalDate.getTimezoneOffset())\n  },\n\n  // Seconds timestamp: 512969520\n  'X': function (date, options) {\n    var originalDate = options._originalDate || date;\n    return Math.floor(originalDate.getTime() / 1000)\n  },\n\n  // Milliseconds timestamp: 512969520900\n  'x': function (date, options) {\n    var originalDate = options._originalDate || date;\n    return originalDate.getTime()\n  },\n\n  // AM, PM\n  'A': function (date, options) {\n    return options.locale.localize.timeOfDay(date.getUTCHours(), {type: 'uppercase'})\n  },\n\n  // am, pm\n  'a': function (date, options) {\n    return options.locale.localize.timeOfDay(date.getUTCHours(), {type: 'lowercase'})\n  },\n\n  // a.m., p.m.\n  'aa': function (date, options) {\n    return options.locale.localize.timeOfDay(date.getUTCHours(), {type: 'long'})\n  }\n};\n\nfunction formatTimezone (offset, delimeter) {\n  delimeter = delimeter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n  return sign + addLeadingZeros(hours, 2) + delimeter + addLeadingZeros(minutes, 2)\n}\n\nfunction addLeadingZeros (number, targetLength) {\n  var output = Math.abs(number).toString();\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n  return output\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction addUTCMinutes (dirtyDate, dirtyAmount, dirtyOptions) {\n  var date = toDate(dirtyDate, dirtyOptions);\n  var amount = Number(dirtyAmount);\n  date.setUTCMinutes(date.getUTCMinutes() + amount);\n  return date\n}\n\nvar longFormattingTokensRegExp = /(\\[[^[]*])|(\\\\)?(LTS|LT|LLLL|LLL|LL|L|llll|lll|ll|l)/g;\nvar defaultFormattingTokensRegExp = /(\\[[^[]*])|(\\\\)?(x|ss|s|mm|m|hh|h|do|dddd|ddd|dd|d|aa|a|ZZ|Z|YYYY|YY|X|Wo|WW|W|SSS|SS|S|Qo|Q|Mo|MMMM|MMM|MM|M|HH|H|GGGG|GG|E|Do|DDDo|DDDD|DDD|DD|D|A|.)/g;\n\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format.\n *\n * Accepted tokens:\n * | Unit                    | Token | Result examples                  |\n * |-------------------------|-------|----------------------------------|\n * | Month                   | M     | 1, 2, ..., 12                    |\n * |                         | Mo    | 1st, 2nd, ..., 12th              |\n * |                         | MM    | 01, 02, ..., 12                  |\n * |                         | MMM   | Jan, Feb, ..., Dec               |\n * |                         | MMMM  | January, February, ..., December |\n * | Quarter                 | Q     | 1, 2, 3, 4                       |\n * |                         | Qo    | 1st, 2nd, 3rd, 4th               |\n * | Day of month            | D     | 1, 2, ..., 31                    |\n * |                         | Do    | 1st, 2nd, ..., 31st              |\n * |                         | DD    | 01, 02, ..., 31                  |\n * | Day of year             | DDD   | 1, 2, ..., 366                   |\n * |                         | DDDo  | 1st, 2nd, ..., 366th             |\n * |                         | DDDD  | 001, 002, ..., 366               |\n * | Day of week             | d     | 0, 1, ..., 6                     |\n * |                         | do    | 0th, 1st, ..., 6th               |\n * |                         | dd    | Su, Mo, ..., Sa                  |\n * |                         | ddd   | Sun, Mon, ..., Sat               |\n * |                         | dddd  | Sunday, Monday, ..., Saturday    |\n * | Day of ISO week         | E     | 1, 2, ..., 7                     |\n * | ISO week                | W     | 1, 2, ..., 53                    |\n * |                         | Wo    | 1st, 2nd, ..., 53rd              |\n * |                         | WW    | 01, 02, ..., 53                  |\n * | Year                    | YY    | 00, 01, ..., 99                  |\n * |                         | YYYY  | 1900, 1901, ..., 2099            |\n * | ISO week-numbering year | GG    | 00, 01, ..., 99                  |\n * |                         | GGGG  | 1900, 1901, ..., 2099            |\n * | AM/PM                   | A     | AM, PM                           |\n * |                         | a     | am, pm                           |\n * |                         | aa    | a.m., p.m.                       |\n * | Hour                    | H     | 0, 1, ... 23                     |\n * |                         | HH    | 00, 01, ... 23                   |\n * |                         | h     | 1, 2, ..., 12                    |\n * |                         | hh    | 01, 02, ..., 12                  |\n * | Minute                  | m     | 0, 1, ..., 59                    |\n * |                         | mm    | 00, 01, ..., 59                  |\n * | Second                  | s     | 0, 1, ..., 59                    |\n * |                         | ss    | 00, 01, ..., 59                  |\n * | 1/10 of second          | S     | 0, 1, ..., 9                     |\n * | 1/100 of second         | SS    | 00, 01, ..., 99                  |\n * | Millisecond             | SSS   | 000, 001, ..., 999               |\n * | Timezone                | Z     | -01:00, +00:00, ... +12:00       |\n * |                         | ZZ    | -0100, +0000, ..., +1200         |\n * | Seconds timestamp       | X     | 512969520                        |\n * | Milliseconds timestamp  | x     | 512969520900                     |\n * | Long format             | LT    | 05:30 a.m.                       |\n * |                         | LTS   | 05:30:15 a.m.                    |\n * |                         | L     | 07/02/1995                       |\n * |                         | l     | 7/2/1995                         |\n * |                         | LL    | July 2 1995                      |\n * |                         | ll    | Jul 2 1995                       |\n * |                         | LLL   | July 2 1995 05:30 a.m.           |\n * |                         | lll   | Jul 2 1995 05:30 a.m.            |\n * |                         | LLLL  | Sunday, July 2 1995 05:30 a.m.   |\n * |                         | llll  | Sun, Jul 2 1995 05:30 a.m.       |\n *\n * The characters wrapped in square brackets are escaped.\n *\n * The result may vary by locale.\n *\n * @param {Date|String|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(\n *   new Date(2014, 1, 11),\n *   'MM/DD/YYYY'\n * )\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(\n *   new Date(2014, 6, 2),\n *   'Do [de] MMMM YYYY',\n *   {locale: eoLocale}\n * )\n * //=> '2-a de julio 2014'\n */\nfunction format (dirtyDate, dirtyFormatStr, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n\n  var locale = options.locale || locale$1;\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property')\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property')\n  }\n\n  var localeFormatters = locale.formatters || {};\n  var formattingTokensRegExp = locale.formattingTokensRegExp || defaultFormattingTokensRegExp;\n  var formatLong = locale.formatLong;\n\n  var originalDate = toDate(dirtyDate, options);\n\n  if (!isValid(originalDate, options)) {\n    return 'Invalid Date'\n  }\n\n  // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n  var timezoneOffset = originalDate.getTimezoneOffset();\n  var utcDate = addUTCMinutes(originalDate, -timezoneOffset, options);\n\n  var formatterOptions = cloneObject(options);\n  formatterOptions.locale = locale;\n  formatterOptions.formatters = formatters;\n\n  // When UTC functions will be implemented, options._originalDate will likely be a part of public API.\n  // Right now, please don't use it in locales. If you have to use an original date,\n  // please restore it from `date`, adding a timezone offset to it.\n  formatterOptions._originalDate = originalDate;\n\n  var result = formatStr\n    .replace(longFormattingTokensRegExp, function (substring) {\n      if (substring[0] === '[') {\n        return substring\n      }\n\n      if (substring[0] === '\\\\') {\n        return cleanEscapedString(substring)\n      }\n\n      return formatLong(substring)\n    })\n    .replace(formattingTokensRegExp, function (substring) {\n      var formatter = localeFormatters[substring] || formatters[substring];\n\n      if (formatter) {\n        return formatter(utcDate, formatterOptions)\n      } else {\n        return cleanEscapedString(substring)\n      }\n    });\n\n  return result\n}\n\nfunction cleanEscapedString (input) {\n  if (input.match(/\\[[\\s\\S]/)) {\n    return input.replace(/^\\[|]$/g, '')\n  }\n  return input.replace(/\\\\/g, '')\n}\n\n/**\n * @name subMinutes\n * @category Minute Helpers\n * @summary Subtract the specified number of minutes from the given date.\n *\n * @description\n * Subtract the specified number of minutes from the given date.\n *\n * @param {Date|String|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be subtracted\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the mintues subtracted\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Subtract 30 minutes from 10 July 2014 12:00:00:\n * var result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 11:30:00\n */\nfunction subMinutes (dirtyDate, dirtyAmount, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var amount = Number(dirtyAmount);\n  return addMinutes(dirtyDate, -amount, dirtyOptions)\n}\n\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * @param {Date|String|Number} date - the date that should be after the other one to return true\n * @param {Date|String|Number} dateToCompare - the date to compare with\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\nfunction isAfter (dirtyDate, dirtyDateToCompare, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var dateToCompare = toDate(dirtyDateToCompare, dirtyOptions);\n  return date.getTime() > dateToCompare.getTime()\n}\n\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * @param {Date|String|Number} date - the date that should be before the other one to return true\n * @param {Date|String|Number} dateToCompare - the date to compare with\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\nfunction isBefore (dirtyDate, dirtyDateToCompare, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var dateToCompare = toDate(dirtyDateToCompare, dirtyOptions);\n  return date.getTime() < dateToCompare.getTime()\n}\n\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * @param {Date|String|Number} dateLeft - the first date to compare\n * @param {Date|String|Number} dateRight - the second date to compare\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Boolean} the dates are equal\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * var result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0)\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\nfunction isEqual$1 (dirtyLeftDate, dirtyRightDate, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var dateLeft = toDate(dirtyLeftDate, dirtyOptions);\n  var dateRight = toDate(dirtyRightDate, dirtyOptions);\n  return dateLeft.getTime() === dateRight.getTime()\n}\n\nvar patterns$1 = {\n  'M': /^(1[0-2]|0?\\d)/, // 0 to 12\n  'D': /^(3[0-1]|[0-2]?\\d)/, // 0 to 31\n  'DDD': /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/, // 0 to 366\n  'W': /^(5[0-3]|[0-4]?\\d)/, // 0 to 53\n  'YYYY': /^(\\d{1,4})/, // 0 to 9999\n  'H': /^(2[0-3]|[0-1]?\\d)/, // 0 to 23\n  'm': /^([0-5]?\\d)/, // 0 to 59\n  'Z': /^([+-])(\\d{2}):(\\d{2})/,\n  'ZZ': /^([+-])(\\d{2})(\\d{2})/,\n  singleDigit: /^(\\d)/,\n  twoDigits: /^(\\d{2})/,\n  threeDigits: /^(\\d{3})/,\n  fourDigits: /^(\\d{4})/,\n  anyDigits: /^(\\d+)/\n};\n\nfunction parseDecimal$1 (matchResult) {\n  return parseInt(matchResult[1], 10)\n}\n\nvar parsers = {\n  // Year: 00, 01, ..., 99\n  'YY': {\n    unit: 'twoDigitYear',\n    match: patterns$1.twoDigits,\n    parse: function (matchResult) {\n      return parseDecimal$1(matchResult)\n    }\n  },\n\n  // Year: 1900, 1901, ..., 2099\n  'YYYY': {\n    unit: 'year',\n    match: patterns$1.YYYY,\n    parse: parseDecimal$1\n  },\n\n  // ISO week-numbering year: 00, 01, ..., 99\n  'GG': {\n    unit: 'isoYear',\n    match: patterns$1.twoDigits,\n    parse: function (matchResult) {\n      return parseDecimal$1(matchResult) + 1900\n    }\n  },\n\n  // ISO week-numbering year: 1900, 1901, ..., 2099\n  'GGGG': {\n    unit: 'isoYear',\n    match: patterns$1.YYYY,\n    parse: parseDecimal$1\n  },\n\n  // Quarter: 1, 2, 3, 4\n  'Q': {\n    unit: 'quarter',\n    match: patterns$1.singleDigit,\n    parse: parseDecimal$1\n  },\n\n  // Ordinal quarter\n  'Qo': {\n    unit: 'quarter',\n    match: function (string, options) {\n      return options.locale.match.ordinalNumbers(string, {unit: 'quarter'})\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.ordinalNumber(matchResult, {unit: 'quarter'})\n    }\n  },\n\n  // Month: 1, 2, ..., 12\n  'M': {\n    unit: 'month',\n    match: patterns$1.M,\n    parse: function (matchResult) {\n      return parseDecimal$1(matchResult) - 1\n    }\n  },\n\n  // Ordinal month\n  'Mo': {\n    unit: 'month',\n    match: function (string, options) {\n      return options.locale.match.ordinalNumbers(string, {unit: 'month'})\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.ordinalNumber(matchResult, {unit: 'month'}) - 1\n    }\n  },\n\n  // Month: 01, 02, ..., 12\n  'MM': {\n    unit: 'month',\n    match: patterns$1.twoDigits,\n    parse: function (matchResult) {\n      return parseDecimal$1(matchResult) - 1\n    }\n  },\n\n  // Month: Jan, Feb, ..., Dec\n  'MMM': {\n    unit: 'month',\n    match: function (string, options) {\n      return options.locale.match.months(string, {type: 'short'})\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.month(matchResult, {type: 'short'})\n    }\n  },\n\n  // Month: January, February, ..., December\n  'MMMM': {\n    unit: 'month',\n    match: function (string, options) {\n      return options.locale.match.months(string, {type: 'long'}) ||\n        options.locale.match.months(string, {type: 'short'})\n    },\n    parse: function (matchResult, options) {\n      var parseResult = options.locale.match.month(matchResult, {type: 'long'});\n\n      if (parseResult == null) {\n        parseResult = options.locale.match.month(matchResult, {type: 'short'});\n      }\n\n      return parseResult\n    }\n  },\n\n  // ISO week: 1, 2, ..., 53\n  'W': {\n    unit: 'isoWeek',\n    match: patterns$1.W,\n    parse: parseDecimal$1\n  },\n\n  // Ordinal ISO week\n  'Wo': {\n    unit: 'isoWeek',\n    match: function (string, options) {\n      return options.locale.match.ordinalNumbers(string, {unit: 'isoWeek'})\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.ordinalNumber(matchResult, {unit: 'isoWeek'})\n    }\n  },\n\n  // ISO week: 01, 02, ..., 53\n  'WW': {\n    unit: 'isoWeek',\n    match: patterns$1.twoDigits,\n    parse: parseDecimal$1\n  },\n\n  // Day of week: 0, 1, ..., 6\n  'd': {\n    unit: 'dayOfWeek',\n    match: patterns$1.singleDigit,\n    parse: parseDecimal$1\n  },\n\n  // Ordinal day of week\n  'do': {\n    unit: 'dayOfWeek',\n    match: function (string, options) {\n      return options.locale.match.ordinalNumbers(string, {unit: 'dayOfWeek'})\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.ordinalNumber(matchResult, {unit: 'dayOfWeek'})\n    }\n  },\n\n  // Day of week: Su, Mo, ..., Sa\n  'dd': {\n    unit: 'dayOfWeek',\n    match: function (string, options) {\n      return options.locale.match.weekdays(string, {type: 'narrow'})\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.weekday(matchResult, {type: 'narrow'})\n    }\n  },\n\n  // Day of week: Sun, Mon, ..., Sat\n  'ddd': {\n    unit: 'dayOfWeek',\n    match: function (string, options) {\n      return options.locale.match.weekdays(string, {type: 'short'}) ||\n        options.locale.match.weekdays(string, {type: 'narrow'})\n    },\n    parse: function (matchResult, options) {\n      var parseResult = options.locale.match.weekday(matchResult, {type: 'short'});\n\n      if (parseResult == null) {\n        parseResult = options.locale.match.weekday(matchResult, {type: 'narrow'});\n      }\n\n      return parseResult\n    }\n  },\n\n  // Day of week: Sunday, Monday, ..., Saturday\n  'dddd': {\n    unit: 'dayOfWeek',\n    match: function (string, options) {\n      return options.locale.match.weekdays(string, {type: 'long'}) ||\n        options.locale.match.weekdays(string, {type: 'short'}) ||\n        options.locale.match.weekdays(string, {type: 'narrow'})\n    },\n    parse: function (matchResult, options) {\n      var parseResult = options.locale.match.weekday(matchResult, {type: 'long'});\n\n      if (parseResult == null) {\n        parseResult = options.locale.match.weekday(matchResult, {type: 'short'});\n\n        if (parseResult == null) {\n          parseResult = options.locale.match.weekday(matchResult, {type: 'narrow'});\n        }\n      }\n\n      return parseResult\n    }\n  },\n\n  // Day of ISO week: 1, 2, ..., 7\n  'E': {\n    unit: 'dayOfISOWeek',\n    match: patterns$1.singleDigit,\n    parse: function (matchResult) {\n      return parseDecimal$1(matchResult)\n    }\n  },\n\n  // Day of month: 1, 2, ..., 31\n  'D': {\n    unit: 'dayOfMonth',\n    match: patterns$1.D,\n    parse: parseDecimal$1\n  },\n\n  // Ordinal day of month\n  'Do': {\n    unit: 'dayOfMonth',\n    match: function (string, options) {\n      return options.locale.match.ordinalNumbers(string, {unit: 'dayOfMonth'})\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.ordinalNumber(matchResult, {unit: 'dayOfMonth'})\n    }\n  },\n\n  // Day of month: 01, 02, ..., 31\n  'DD': {\n    unit: 'dayOfMonth',\n    match: patterns$1.twoDigits,\n    parse: parseDecimal$1\n  },\n\n  // Day of year: 1, 2, ..., 366\n  'DDD': {\n    unit: 'dayOfYear',\n    match: patterns$1.DDD,\n    parse: parseDecimal$1\n  },\n\n  // Ordinal day of year\n  'DDDo': {\n    unit: 'dayOfYear',\n    match: function (string, options) {\n      return options.locale.match.ordinalNumbers(string, {unit: 'dayOfYear'})\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.ordinalNumber(matchResult, {unit: 'dayOfYear'})\n    }\n  },\n\n  // Day of year: 001, 002, ..., 366\n  'DDDD': {\n    unit: 'dayOfYear',\n    match: patterns$1.threeDigits,\n    parse: parseDecimal$1\n  },\n\n  // AM, PM\n  'A': {\n    unit: 'timeOfDay',\n    match: function (string, options) {\n      return options.locale.match.timesOfDay(string, {type: 'short'})\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.timeOfDay(matchResult, {type: 'short'})\n    }\n  },\n\n  // a.m., p.m.\n  'aa': {\n    unit: 'timeOfDay',\n    match: function (string, options) {\n      return options.locale.match.timesOfDay(string, {type: 'long'}) ||\n        options.locale.match.timesOfDay(string, {type: 'short'})\n    },\n    parse: function (matchResult, options) {\n      var parseResult = options.locale.match.timeOfDay(matchResult, {type: 'long'});\n\n      if (parseResult == null) {\n        parseResult = options.locale.match.timeOfDay(matchResult, {type: 'short'});\n      }\n\n      return parseResult\n    }\n  },\n\n  // Hour: 0, 1, ... 23\n  'H': {\n    unit: 'hours',\n    match: patterns$1.H,\n    parse: parseDecimal$1\n  },\n\n  // Hour: 00, 01, ..., 23\n  'HH': {\n    unit: 'hours',\n    match: patterns$1.twoDigits,\n    parse: parseDecimal$1\n  },\n\n  // Hour: 1, 2, ..., 12\n  'h': {\n    unit: 'timeOfDayHours',\n    match: patterns$1.M,\n    parse: parseDecimal$1\n  },\n\n  // Hour: 01, 02, ..., 12\n  'hh': {\n    unit: 'timeOfDayHours',\n    match: patterns$1.twoDigits,\n    parse: parseDecimal$1\n  },\n\n  // Minute: 0, 1, ..., 59\n  'm': {\n    unit: 'minutes',\n    match: patterns$1.m,\n    parse: parseDecimal$1\n  },\n\n  // Minute: 00, 01, ..., 59\n  'mm': {\n    unit: 'minutes',\n    match: patterns$1.twoDigits,\n    parse: parseDecimal$1\n  },\n\n  // Second: 0, 1, ..., 59\n  's': {\n    unit: 'seconds',\n    match: patterns$1.m,\n    parse: parseDecimal$1\n  },\n\n  // Second: 00, 01, ..., 59\n  'ss': {\n    unit: 'seconds',\n    match: patterns$1.twoDigits,\n    parse: parseDecimal$1\n  },\n\n  // 1/10 of second: 0, 1, ..., 9\n  'S': {\n    unit: 'milliseconds',\n    match: patterns$1.singleDigit,\n    parse: function (matchResult) {\n      return parseDecimal$1(matchResult) * 100\n    }\n  },\n\n  // 1/100 of second: 00, 01, ..., 99\n  'SS': {\n    unit: 'milliseconds',\n    match: patterns$1.twoDigits,\n    parse: function (matchResult) {\n      return parseDecimal$1(matchResult) * 10\n    }\n  },\n\n  // Millisecond: 000, 001, ..., 999\n  'SSS': {\n    unit: 'milliseconds',\n    match: patterns$1.threeDigits,\n    parse: parseDecimal$1\n  },\n\n  // Timezone: -01:00, +00:00, ... +12:00\n  'Z': {\n    unit: 'timezone',\n    match: patterns$1.Z,\n    parse: function (matchResult) {\n      var sign = matchResult[1];\n      var hours = parseInt(matchResult[2], 10);\n      var minutes = parseInt(matchResult[3], 10);\n      var absoluteOffset = hours * 60 + minutes;\n      return (sign === '+') ? absoluteOffset : -absoluteOffset\n    }\n  },\n\n  // Timezone: -0100, +0000, ... +1200\n  'ZZ': {\n    unit: 'timezone',\n    match: patterns$1.ZZ,\n    parse: function (matchResult) {\n      var sign = matchResult[1];\n      var hours = parseInt(matchResult[2], 10);\n      var minutes = parseInt(matchResult[3], 10);\n      var absoluteOffset = hours * 60 + minutes;\n      return (sign === '+') ? absoluteOffset : -absoluteOffset\n    }\n  },\n\n  // Seconds timestamp: 512969520\n  'X': {\n    unit: 'timestamp',\n    match: patterns$1.anyDigits,\n    parse: function (matchResult) {\n      return parseDecimal$1(matchResult) * 1000\n    }\n  },\n\n  // Milliseconds timestamp: 512969520900\n  'x': {\n    unit: 'timestamp',\n    match: patterns$1.anyDigits,\n    parse: parseDecimal$1\n  }\n};\n\nparsers['a'] = parsers['A'];\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction setUTCDay (dirtyDate, dirtyDay, dirtyOptions) {\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn === undefined ? 0 : Number(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn === undefined ? defaultWeekStartsOn : Number(options.weekStartsOn);\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var day = Number(dirtyDay);\n\n  var currentDay = date.getUTCDay();\n\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction setUTCISODay (dirtyDate, dirtyDay, dirtyOptions) {\n  var day = Number(dirtyDay);\n\n  if (day % 7 === 0) {\n    day = day - 7;\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate, dirtyOptions);\n  var currentDay = date.getUTCDay();\n\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction setUTCISOWeek (dirtyDate, dirtyISOWeek, dirtyOptions) {\n  var date = toDate(dirtyDate, dirtyOptions);\n  var isoWeek = Number(dirtyISOWeek);\n  var diff = getUTCISOWeek(date, dirtyOptions) - isoWeek;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date\n}\n\nvar MILLISECONDS_IN_DAY$3 = 86400000;\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction setUTCISOWeekYear (dirtyDate, dirtyISOYear, dirtyOptions) {\n  var date = toDate(dirtyDate, dirtyOptions);\n  var isoYear = Number(dirtyISOYear);\n  var dateStartOfYear = startOfUTCISOWeekYear(date, dirtyOptions);\n  var diff = Math.floor((date.getTime() - dateStartOfYear.getTime()) / MILLISECONDS_IN_DAY$3);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(isoYear, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  date = startOfUTCISOWeekYear(fourthOfJanuary, dirtyOptions);\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date\n}\n\nvar MILLISECONDS_IN_MINUTE$6 = 60000;\n\nfunction setTimeOfDay (hours, timeOfDay) {\n  var isAM = timeOfDay === 0;\n\n  if (isAM) {\n    if (hours === 12) {\n      return 0\n    }\n  } else {\n    if (hours !== 12) {\n      return 12 + hours\n    }\n  }\n\n  return hours\n}\n\nvar units = {\n  twoDigitYear: {\n    priority: 10,\n    set: function (dateValues, value) {\n      var century = Math.floor(dateValues.date.getUTCFullYear() / 100);\n      var year = century * 100 + value;\n      dateValues.date.setUTCFullYear(year, 0, 1);\n      dateValues.date.setUTCHours(0, 0, 0, 0);\n      return dateValues\n    }\n  },\n\n  year: {\n    priority: 10,\n    set: function (dateValues, value) {\n      dateValues.date.setUTCFullYear(value, 0, 1);\n      dateValues.date.setUTCHours(0, 0, 0, 0);\n      return dateValues\n    }\n  },\n\n  isoYear: {\n    priority: 10,\n    set: function (dateValues, value, options) {\n      dateValues.date = startOfUTCISOWeekYear(setUTCISOWeekYear(dateValues.date, value, options), options);\n      return dateValues\n    }\n  },\n\n  quarter: {\n    priority: 20,\n    set: function (dateValues, value) {\n      dateValues.date.setUTCMonth((value - 1) * 3, 1);\n      dateValues.date.setUTCHours(0, 0, 0, 0);\n      return dateValues\n    }\n  },\n\n  month: {\n    priority: 30,\n    set: function (dateValues, value) {\n      dateValues.date.setUTCMonth(value, 1);\n      dateValues.date.setUTCHours(0, 0, 0, 0);\n      return dateValues\n    }\n  },\n\n  isoWeek: {\n    priority: 40,\n    set: function (dateValues, value, options) {\n      dateValues.date = startOfUTCISOWeek(setUTCISOWeek(dateValues.date, value, options), options);\n      return dateValues\n    }\n  },\n\n  dayOfWeek: {\n    priority: 50,\n    set: function (dateValues, value, options) {\n      dateValues.date = setUTCDay(dateValues.date, value, options);\n      dateValues.date.setUTCHours(0, 0, 0, 0);\n      return dateValues\n    }\n  },\n\n  dayOfISOWeek: {\n    priority: 50,\n    set: function (dateValues, value, options) {\n      dateValues.date = setUTCISODay(dateValues.date, value, options);\n      dateValues.date.setUTCHours(0, 0, 0, 0);\n      return dateValues\n    }\n  },\n\n  dayOfMonth: {\n    priority: 50,\n    set: function (dateValues, value) {\n      dateValues.date.setUTCDate(value);\n      dateValues.date.setUTCHours(0, 0, 0, 0);\n      return dateValues\n    }\n  },\n\n  dayOfYear: {\n    priority: 50,\n    set: function (dateValues, value) {\n      dateValues.date.setUTCMonth(0, value);\n      dateValues.date.setUTCHours(0, 0, 0, 0);\n      return dateValues\n    }\n  },\n\n  timeOfDay: {\n    priority: 60,\n    set: function (dateValues, value, options) {\n      dateValues.timeOfDay = value;\n      return dateValues\n    }\n  },\n\n  hours: {\n    priority: 70,\n    set: function (dateValues, value, options) {\n      dateValues.date.setUTCHours(value, 0, 0, 0);\n      return dateValues\n    }\n  },\n\n  timeOfDayHours: {\n    priority: 70,\n    set: function (dateValues, value, options) {\n      var timeOfDay = dateValues.timeOfDay;\n      if (timeOfDay != null) {\n        value = setTimeOfDay(value, timeOfDay);\n      }\n      dateValues.date.setUTCHours(value, 0, 0, 0);\n      return dateValues\n    }\n  },\n\n  minutes: {\n    priority: 80,\n    set: function (dateValues, value) {\n      dateValues.date.setUTCMinutes(value, 0, 0);\n      return dateValues\n    }\n  },\n\n  seconds: {\n    priority: 90,\n    set: function (dateValues, value) {\n      dateValues.date.setUTCSeconds(value, 0);\n      return dateValues\n    }\n  },\n\n  milliseconds: {\n    priority: 100,\n    set: function (dateValues, value) {\n      dateValues.date.setUTCMilliseconds(value);\n      return dateValues\n    }\n  },\n\n  timezone: {\n    priority: 110,\n    set: function (dateValues, value) {\n      dateValues.date = new Date(dateValues.date.getTime() - value * MILLISECONDS_IN_MINUTE$6);\n      return dateValues\n    }\n  },\n\n  timestamp: {\n    priority: 120,\n    set: function (dateValues, value) {\n      dateValues.date = new Date(value);\n      return dateValues\n    }\n  }\n};\n\nvar TIMEZONE_UNIT_PRIORITY = 110;\nvar MILLISECONDS_IN_MINUTE$7 = 60000;\n\nvar longFormattingTokensRegExp$1 = /(\\[[^[]*])|(\\\\)?(LTS|LT|LLLL|LLL|LL|L|llll|lll|ll|l)/g;\nvar defaultParsingTokensRegExp = /(\\[[^[]*])|(\\\\)?(x|ss|s|mm|m|hh|h|do|dddd|ddd|dd|d|aa|a|ZZ|Z|YYYY|YY|X|Wo|WW|W|SSS|SS|S|Qo|Q|Mo|MMMM|MMM|MM|M|HH|H|GGGG|GG|E|Do|DDDo|DDDD|DDD|DD|D|A|.)/g;\n\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format.\n *\n * Accepted format tokens:\n * | Unit                    | Priority | Token | Input examples                   |\n * |-------------------------|----------|-------|----------------------------------|\n * | Year                    | 10       | YY    | 00, 01, ..., 99                  |\n * |                         |          | YYYY  | 1900, 1901, ..., 2099            |\n * | ISO week-numbering year | 10       | GG    | 00, 01, ..., 99                  |\n * |                         |          | GGGG  | 1900, 1901, ..., 2099            |\n * | Quarter                 | 20       | Q     | 1, 2, 3, 4                       |\n * |                         |          | Qo    | 1st, 2nd, 3rd, 4th               |\n * | Month                   | 30       | M     | 1, 2, ..., 12                    |\n * |                         |          | Mo    | 1st, 2nd, ..., 12th              |\n * |                         |          | MM    | 01, 02, ..., 12                  |\n * |                         |          | MMM   | Jan, Feb, ..., Dec               |\n * |                         |          | MMMM  | January, February, ..., December |\n * | ISO week                | 40       | W     | 1, 2, ..., 53                    |\n * |                         |          | Wo    | 1st, 2nd, ..., 53rd              |\n * |                         |          | WW    | 01, 02, ..., 53                  |\n * | Day of week             | 50       | d     | 0, 1, ..., 6                     |\n * |                         |          | do    | 0th, 1st, ..., 6th               |\n * |                         |          | dd    | Su, Mo, ..., Sa                  |\n * |                         |          | ddd   | Sun, Mon, ..., Sat               |\n * |                         |          | dddd  | Sunday, Monday, ..., Saturday    |\n * | Day of ISO week         | 50       | E     | 1, 2, ..., 7                     |\n * | Day of month            | 50       | D     | 1, 2, ..., 31                    |\n * |                         |          | Do    | 1st, 2nd, ..., 31st              |\n * |                         |          | DD    | 01, 02, ..., 31                  |\n * | Day of year             | 50       | DDD   | 1, 2, ..., 366                   |\n * |                         |          | DDDo  | 1st, 2nd, ..., 366th             |\n * |                         |          | DDDD  | 001, 002, ..., 366               |\n * | Time of day             | 60       | A     | AM, PM                           |\n * |                         |          | a     | am, pm                           |\n * |                         |          | aa    | a.m., p.m.                       |\n * | Hour                    | 70       | H     | 0, 1, ... 23                     |\n * |                         |          | HH    | 00, 01, ... 23                   |\n * | Time of day hour        | 70       | h     | 1, 2, ..., 12                    |\n * |                         |          | hh    | 01, 02, ..., 12                  |\n * | Minute                  | 80       | m     | 0, 1, ..., 59                    |\n * |                         |          | mm    | 00, 01, ..., 59                  |\n * | Second                  | 90       | s     | 0, 1, ..., 59                    |\n * |                         |          | ss    | 00, 01, ..., 59                  |\n * | 1/10 of second          | 100      | S     | 0, 1, ..., 9                     |\n * | 1/100 of second         | 100      | SS    | 00, 01, ..., 99                  |\n * | Millisecond             | 100      | SSS   | 000, 001, ..., 999               |\n * | Timezone                | 110      | Z     | -01:00, +00:00, ... +12:00       |\n * |                         |          | ZZ    | -0100, +0000, ..., +1200         |\n * | Seconds timestamp       | 120      | X     | 512969520                        |\n * | Milliseconds timestamp  | 120      | x     | 512969520900                     |\n *\n * Values will be assigned to the date in the ascending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `baseDate` which works as a context of parsing.\n *\n * `baseDate` must be passed for correct work of the function.\n * If you're not sure which `baseDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/DD/YYYY', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `baseDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * Also, `parse` unfolds long formats like those in [format]{@link https://date-fns.org/docs/format}:\n * | Token | Input examples                 |\n * |-------|--------------------------------|\n * | LT    | 05:30 a.m.                     |\n * | LTS   | 05:30:15 a.m.                  |\n * | L     | 07/02/1995                     |\n * | l     | 7/2/1995                       |\n * | LL    | July 2 1995                    |\n * | ll    | Jul 2 1995                     |\n * | LLL   | July 2 1995 05:30 a.m.         |\n * | lll   | Jul 2 1995 05:30 a.m.          |\n * | LLLL  | Sunday, July 2 1995 05:30 a.m. |\n * | llll  | Sun, Jul 2 1995 05:30 a.m.     |\n *\n * The characters wrapped in square brackets in the format string are escaped.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `baseDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|String|Number} baseDate - the date to took the missing higher priority values from\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse(\n *   '02/11/2014',\n *   'MM/DD/YYYY',\n *   new Date()\n * )\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in English locale in the context of 2010 year:\n * import eoLocale from 'date-fns/locale/eo'\n * var result = parse(\n *   '28-a de februaro',\n *   'Do [de] MMMM',\n *   new Date(2010, 0, 1)\n *   {locale: eoLocale}\n * )\n * //=> Sun Feb 28 2010 00:00:00\n */\nfunction parse (dirtyDateString, dirtyFormatString, dirtyBaseDate, dirtyOptions) {\n  if (arguments.length < 3) {\n    throw new TypeError('3 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var dateString = String(dirtyDateString);\n  var options = dirtyOptions || {};\n\n  var weekStartsOn = options.weekStartsOn === undefined ? 0 : Number(options.weekStartsOn);\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')\n  }\n\n  var locale = options.locale || locale$1;\n  var localeParsers = locale.parsers || {};\n  var localeUnits = locale.units || {};\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property')\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property')\n  }\n\n  var formatString = String(dirtyFormatString)\n    .replace(longFormattingTokensRegExp$1, function (substring) {\n      if (substring[0] === '[') {\n        return substring\n      }\n\n      if (substring[0] === '\\\\') {\n        return cleanEscapedString$1(substring)\n      }\n\n      return locale.formatLong(substring)\n    });\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyBaseDate, options)\n    } else {\n      return new Date(NaN)\n    }\n  }\n\n  var subFnOptions = cloneObject(options);\n  subFnOptions.locale = locale;\n\n  var tokens = formatString.match(locale.parsingTokensRegExp || defaultParsingTokensRegExp);\n  var tokensLength = tokens.length;\n\n  // If timezone isn't specified, it will be set to the system timezone\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n\n  var i;\n  for (i = 0; i < tokensLength; i++) {\n    var token = tokens[i];\n    var parser = localeParsers[token] || parsers[token];\n    if (parser) {\n      var matchResult;\n\n      if (parser.match instanceof RegExp) {\n        matchResult = parser.match.exec(dateString);\n      } else {\n        matchResult = parser.match(dateString, subFnOptions);\n      }\n\n      if (!matchResult) {\n        return new Date(NaN)\n      }\n\n      var unitName = parser.unit;\n      var unit = localeUnits[unitName] || units[unitName];\n\n      setters.push({\n        priority: unit.priority,\n        set: unit.set,\n        value: parser.parse(matchResult, subFnOptions),\n        index: setters.length\n      });\n\n      var substring = matchResult[0];\n      dateString = dateString.slice(substring.length);\n    } else {\n      var head = tokens[i].match(/^\\[.*]$/) ? tokens[i].replace(/^\\[|]$/g, '') : tokens[i];\n      if (dateString.indexOf(head) === 0) {\n        dateString = dateString.slice(head.length);\n      } else {\n        return new Date(NaN)\n      }\n    }\n  }\n\n  var uniquePrioritySetters = setters\n    .map(function (setter) {\n      return setter.priority\n    })\n    .sort(function (a, b) {\n      return a - b\n    })\n    .filter(function (priority, index, array) {\n      return array.indexOf(priority) === index\n    })\n    .map(function (priority) {\n      return setters\n        .filter(function (setter) {\n          return setter.priority === priority\n        })\n        .reverse()\n    })\n    .map(function (setterArray) {\n      return setterArray[0]\n    });\n\n  var date = toDate(dirtyBaseDate, options);\n\n  if (isNaN(date)) {\n    return new Date(NaN)\n  }\n\n  // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n  var utcDate = subMinutes(date, date.getTimezoneOffset());\n\n  var dateValues = {date: utcDate};\n\n  var settersLength = uniquePrioritySetters.length;\n  for (i = 0; i < settersLength; i++) {\n    var setter = uniquePrioritySetters[i];\n    dateValues = setter.set(dateValues, setter.value, subFnOptions);\n  }\n\n  return dateValues.date\n}\n\nfunction dateToSystemTimezone (dateValues) {\n  var date = dateValues.date;\n  var time = date.getTime();\n\n  // Get the system timezone offset at (moment of time - offset)\n  var offset = date.getTimezoneOffset();\n\n  // Get the system timezone offset at the exact moment of time\n  offset = new Date(time + offset * MILLISECONDS_IN_MINUTE$7).getTimezoneOffset();\n\n  // Convert date in timezone \"UTC+00:00\" to the system timezone\n  dateValues.date = new Date(time + offset * MILLISECONDS_IN_MINUTE$7);\n\n  return dateValues\n}\n\nfunction cleanEscapedString$1 (input) {\n  if (input.match(/\\[[\\s\\S]/)) {\n    return input.replace(/^\\[|]$/g, '')\n  }\n  return input.replace(/\\\\/g, '')\n}\n\n// This file is generated automatically by `scripts/build/indices.js`. Please, don't change it.\n\n// \r\n\r\n/**\r\n * Custom parse behavior on top of date-fns parse function.\r\n */\r\nfunction parseDate$1 (date, format$$1) {\r\n  if (typeof date !== 'string') {\r\n    return isValid(date) ? date : null;\r\n  }\r\n\r\n  var parsed = parse(date, format$$1, new Date());\r\n\r\n  // if date is not valid or the formatted output after parsing does not match\r\n  // the string value passed in (avoids overflows)\r\n  if (!isValid(parsed) || format(parsed, format$$1) !== date) {\r\n    return null;\r\n  }\r\n\r\n  return parsed;\r\n}\n\nvar afterValidator = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var targetValue = ref.targetValue;\n  var inclusion = ref.inclusion; if ( inclusion === void 0 ) inclusion = false;\n  var format$$1 = ref.format;\n\r\n  if (typeof format$$1 === 'undefined') {\r\n    format$$1 = inclusion;\r\n    inclusion = false;\r\n  }\r\n\r\n  value = parseDate$1(value, format$$1);\r\n  targetValue = parseDate$1(targetValue, format$$1);\r\n\r\n  // if either is not valid.\r\n  if (!value || !targetValue) {\r\n    return false;\r\n  }\r\n\r\n  return isAfter(value, targetValue) || (inclusion && isEqual$1(value, targetValue));\r\n};\r\n\r\nvar options = {\r\n  hasTarget: true,\r\n  isDate: true\r\n};\r\n\r\n// required to convert from a list of array values to an object.\r\nvar paramNames = ['targetValue', 'inclusion', 'format'];\r\n\r\nvar after = {\r\n  validate: afterValidator,\r\n  options: options,\r\n  paramNames: paramNames\r\n};\n\n/**\r\n * Some Alpha Regex helpers.\r\n * https://github.com/chriso/validator.js/blob/master/src/lib/alpha.js\r\n */\r\n\r\nvar alpha = {\r\n  en: /^[A-Z]*$/i,\r\n  cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i,\r\n  da: /^[A-ZÆØÅ]*$/i,\r\n  de: /^[A-ZÄÖÜß]*$/i,\r\n  es: /^[A-ZÁÉÍÑÓÚÜ]*$/i,\r\n  fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i,\r\n  lt: /^[A-ZĄČĘĖĮŠŲŪŽ]*$/i,\r\n  nl: /^[A-ZÉËÏÓÖÜ]*$/i,\r\n  hu: /^[A-ZÁÉÍÓÖŐÚÜŰ]*$/i,\r\n  pl: /^[A-ZĄĆĘŚŁŃÓŻŹ]*$/i,\r\n  pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i,\r\n  ru: /^[А-ЯЁ]*$/i,\r\n  sk: /^[A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ]*$/i,\r\n  sr: /^[A-ZČĆŽŠĐ]*$/i,\r\n  sv: /^[A-ZÅÄÖ]*$/i,\r\n  tr: /^[A-ZÇĞİıÖŞÜ]*$/i,\r\n  uk: /^[А-ЩЬЮЯЄІЇҐ]*$/i,\r\n  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/,\r\n  az: /^[A-ZÇƏĞİıÖŞÜ]*$/i\r\n};\r\n\r\nvar alphaSpaces = {\r\n  en: /^[A-Z\\s]*$/i,\r\n  cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ\\s]*$/i,\r\n  da: /^[A-ZÆØÅ\\s]*$/i,\r\n  de: /^[A-ZÄÖÜß\\s]*$/i,\r\n  es: /^[A-ZÁÉÍÑÓÚÜ\\s]*$/i,\r\n  fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ\\s]*$/i,\r\n  lt: /^[A-ZĄČĘĖĮŠŲŪŽ\\s]*$/i,\r\n  nl: /^[A-ZÉËÏÓÖÜ\\s]*$/i,\r\n  hu: /^[A-ZÁÉÍÓÖŐÚÜŰ\\s]*$/i,\r\n  pl: /^[A-ZĄĆĘŚŁŃÓŻŹ\\s]*$/i,\r\n  pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ\\s]*$/i,\r\n  ru: /^[А-ЯЁ\\s]*$/i,\r\n  sk: /^[A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ\\s]*$/i,\r\n  sr: /^[A-ZČĆŽŠĐ\\s]*$/i,\r\n  sv: /^[A-ZÅÄÖ\\s]*$/i,\r\n  tr: /^[A-ZÇĞİıÖŞÜ\\s]*$/i,\r\n  uk: /^[А-ЩЬЮЯЄІЇҐ\\s]*$/i,\r\n  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ\\s]*$/,\r\n  az: /^[A-ZÇƏĞİıÖŞÜ\\s]*$/i\r\n};\r\n\r\nvar alphanumeric = {\r\n  en: /^[0-9A-Z]*$/i,\r\n  cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i,\r\n  da: /^[0-9A-ZÆØÅ]$/i,\r\n  de: /^[0-9A-ZÄÖÜß]*$/i,\r\n  es: /^[0-9A-ZÁÉÍÑÓÚÜ]*$/i,\r\n  fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i,\r\n  lt: /^[0-9A-ZĄČĘĖĮŠŲŪŽ]*$/i,\r\n  hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]*$/i,\r\n  nl: /^[0-9A-ZÉËÏÓÖÜ]*$/i,\r\n  pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]*$/i,\r\n  pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i,\r\n  ru: /^[0-9А-ЯЁ]*$/i,\r\n  sk: /^[0-9A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ]*$/i,\r\n  sr: /^[0-9A-ZČĆŽŠĐ]*$/i,\r\n  sv: /^[0-9A-ZÅÄÖ]*$/i,\r\n  tr: /^[0-9A-ZÇĞİıÖŞÜ]*$/i,\r\n  uk: /^[0-9А-ЩЬЮЯЄІЇҐ]*$/i,\r\n  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/,\r\n  az: /^[0-9A-ZÇƏĞİıÖŞÜ]*$/i\r\n};\r\n\r\nvar alphaDash = {\r\n  en: /^[0-9A-Z_-]*$/i,\r\n  cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ_-]*$/i,\r\n  da: /^[0-9A-ZÆØÅ_-]*$/i,\r\n  de: /^[0-9A-ZÄÖÜß_-]*$/i,\r\n  es: /^[0-9A-ZÁÉÍÑÓÚÜ_-]*$/i,\r\n  fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ_-]*$/i,\r\n  lt: /^[0-9A-ZĄČĘĖĮŠŲŪŽ_-]*$/i,\r\n  nl: /^[0-9A-ZÉËÏÓÖÜ_-]*$/i,\r\n  hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ_-]*$/i,\r\n  pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ_-]*$/i,\r\n  pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ_-]*$/i,\r\n  ru: /^[0-9А-ЯЁ_-]*$/i,\r\n  sk: /^[0-9A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ_-]*$/i,\r\n  sr: /^[0-9A-ZČĆŽŠĐ_-]*$/i,\r\n  sv: /^[0-9A-ZÅÄÖ_-]*$/i,\r\n  tr: /^[0-9A-ZÇĞİıÖŞÜ_-]*$/i,\r\n  uk: /^[0-9А-ЩЬЮЯЄІЇҐ_-]*$/i,\r\n  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ_-]*$/,\r\n  az: /^[0-9A-ZÇƏĞİıÖŞÜ_-]*$/i\r\n};\n\nvar validate = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var locale = ref.locale;\n\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return validate(val, [locale]); });\r\n  }\r\n\r\n  // Match at least one locale.\r\n  if (! locale) {\r\n    return Object.keys(alpha).some(function (loc) { return alpha[loc].test(value); });\r\n  }\r\n\r\n  return (alpha[locale] || alpha.en).test(value);\r\n};\r\n\r\nvar paramNames$1 = ['locale'];\r\n\r\nvar alpha$1 = {\r\n  validate: validate,\r\n  paramNames: paramNames$1\r\n};\n\nvar validate$1 = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var locale = ref.locale;\n\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return validate$1(val, [locale]); });\r\n  }\r\n\r\n  // Match at least one locale.\r\n  if (! locale) {\r\n    return Object.keys(alphaDash).some(function (loc) { return alphaDash[loc].test(value); });\r\n  }\r\n\r\n  return (alphaDash[locale] || alphaDash.en).test(value);\r\n};\r\n\r\nvar paramNames$2 = ['locale'];\r\n\r\nvar alpha_dash = {\r\n  validate: validate$1,\r\n  paramNames: paramNames$2\r\n};\n\nvar validate$2 = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var locale = ref.locale;\n\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return validate$2(val, [locale]); });\r\n  }\r\n\r\n  // Match at least one locale.\r\n  if (! locale) {\r\n    return Object.keys(alphanumeric).some(function (loc) { return alphanumeric[loc].test(value); });\r\n  }\r\n\r\n  return (alphanumeric[locale] || alphanumeric.en).test(value);\r\n};\r\n\r\nvar paramNames$3 = ['locale'];\r\n\r\nvar alpha_num = {\r\n  validate: validate$2,\r\n  paramNames: paramNames$3\r\n};\n\nvar validate$3 = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var locale = ref.locale;\n\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return validate$3(val, [locale]); });\r\n  }\r\n\r\n  // Match at least one locale.\r\n  if (! locale) {\r\n    return Object.keys(alphaSpaces).some(function (loc) { return alphaSpaces[loc].test(value); });\r\n  }\r\n\r\n  return (alphaSpaces[locale] || alphaSpaces.en).test(value);\r\n};\r\n\r\nvar paramNames$4 = ['locale'];\r\n\r\nvar alpha_spaces = {\r\n  validate: validate$3,\r\n  paramNames: paramNames$4\r\n};\n\nvar validate$4 = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var targetValue = ref.targetValue;\n  var inclusion = ref.inclusion; if ( inclusion === void 0 ) inclusion = false;\n  var format$$1 = ref.format;\n\r\n  if (typeof format$$1 === 'undefined') {\r\n    format$$1 = inclusion;\r\n    inclusion = false;\r\n  }\r\n\r\n  value = parseDate$1(value, format$$1);\r\n  targetValue = parseDate$1(targetValue, format$$1);\r\n\r\n  // if either is not valid.\r\n  if (!value || !targetValue) {\r\n    return false;\r\n  }\r\n\r\n  return isBefore(value, targetValue) || (inclusion && isEqual$1(value, targetValue));\r\n};\r\n\r\nvar options$1 = {\r\n  hasTarget: true,\r\n  isDate: true\r\n};\r\n\r\nvar paramNames$5 = ['targetValue', 'inclusion', 'format'];\r\n\r\nvar before = {\r\n  validate: validate$4,\r\n  options: options$1,\r\n  paramNames: paramNames$5\r\n};\n\nvar validate$5 = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var min = ref.min;\n  var max = ref.max;\n\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return validate$5(val, { min: min, max: max }); });\r\n  }\r\n\r\n  return Number(min) <= value && Number(max) >= value;\r\n};\r\n\r\nvar paramNames$6 = ['min', 'max'];\r\n\r\nvar between = {\r\n  validate: validate$5,\r\n  paramNames: paramNames$6\r\n};\n\nvar validate$6 = function (value, ref) {\n  var targetValue = ref.targetValue;\n\n  return String(value) === String(targetValue);\n};\r\nvar options$2 = {\r\n  hasTarget: true\r\n};\r\n\r\nvar paramNames$7 = ['targetValue'];\r\n\r\nvar confirmed = {\r\n  validate: validate$6,\r\n  options: options$2,\r\n  paramNames: paramNames$7\r\n};\n\nfunction unwrapExports (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar assertString_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = assertString;\nfunction assertString(input) {\n  var isString = typeof input === 'string' || input instanceof String;\n\n  if (!isString) {\n    var invalidType = void 0;\n    if (input === null) {\n      invalidType = 'null';\n    } else {\n      invalidType = typeof input === 'undefined' ? 'undefined' : _typeof(input);\n      if (invalidType === 'object' && input.constructor && input.constructor.hasOwnProperty('name')) {\n        invalidType = input.constructor.name;\n      } else {\n        invalidType = 'a ' + invalidType;\n      }\n    }\n    throw new TypeError('Expected string but received ' + invalidType + '.');\n  }\n}\nmodule.exports = exports['default'];\n});\n\nunwrapExports(assertString_1);\n\nvar isCreditCard_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCreditCard;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable max-len */\nvar creditCard = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|6[27][0-9]{14})$/;\n/* eslint-enable max-len */\n\nfunction isCreditCard(str) {\n  (0, _assertString2.default)(str);\n  var sanitized = str.replace(/[- ]+/g, '');\n  if (!creditCard.test(sanitized)) {\n    return false;\n  }\n  var sum = 0;\n  var digit = void 0;\n  var tmpNum = void 0;\n  var shouldDouble = void 0;\n  for (var i = sanitized.length - 1; i >= 0; i--) {\n    digit = sanitized.substring(i, i + 1);\n    tmpNum = parseInt(digit, 10);\n    if (shouldDouble) {\n      tmpNum *= 2;\n      if (tmpNum >= 10) {\n        sum += tmpNum % 10 + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n    shouldDouble = !shouldDouble;\n  }\n  return !!(sum % 10 === 0 ? sanitized : false);\n}\nmodule.exports = exports['default'];\n});\n\nvar isCreditCard = unwrapExports(isCreditCard_1);\n\nvar validate$7 = function (value) { return isCreditCard(String(value)); };\r\n\r\nvar credit_card = {\r\n  validate: validate$7\r\n};\n\nvar validate$8 = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var min$$1 = ref.min;\n  var max$$1 = ref.max;\n  var inclusivity = ref.inclusivity; if ( inclusivity === void 0 ) inclusivity = '()';\n  var format$$1 = ref.format;\n\r\n  if (typeof format$$1 === 'undefined') {\r\n    format$$1 = inclusivity;\r\n    inclusivity = '()';\r\n  }\r\n\r\n  var minDate = parseDate$1(String(min$$1), format$$1);\r\n  var maxDate = parseDate$1(String(max$$1), format$$1);\r\n  var dateVal = parseDate$1(String(value), format$$1);\r\n\r\n  if (!minDate || !maxDate || !dateVal) {\r\n    return false;\r\n  }\r\n\r\n  if (inclusivity === '()') {\r\n    return isAfter(dateVal, minDate) && isBefore(dateVal, maxDate);\r\n  }\r\n\r\n  if (inclusivity === '(]') {\r\n    return isAfter(dateVal, minDate) && (isEqual$1(dateVal, maxDate) || isBefore(dateVal, maxDate));\r\n  }\r\n\r\n  if (inclusivity === '[)') {\r\n    return isBefore(dateVal, maxDate) && (isEqual$1(dateVal, minDate) || isAfter(dateVal, minDate));\r\n  }\r\n\r\n  return isEqual$1(dateVal, maxDate) || isEqual$1(dateVal, minDate) ||\r\n    (isBefore(dateVal, maxDate) && isAfter(dateVal, minDate));\r\n};\r\n\r\nvar options$3 = {\r\n  isDate: true\r\n};\r\n\r\nvar paramNames$8 = ['min', 'max', 'inclusivity', 'format'];\r\n\r\nvar date_between = {\r\n  validate: validate$8,\r\n  options: options$3,\r\n  paramNames: paramNames$8\r\n};\n\nvar validate$9 = function (value, ref) {\n  var format = ref.format;\n\r\n  return !!parseDate$1(value, format);\r\n};\r\n\r\nvar options$4 = {\r\n  isDate: true\r\n};\r\n\r\nvar paramNames$9 = ['format'];\r\n\r\nvar date_format = {\r\n  validate: validate$9,\r\n  options: options$4,\r\n  paramNames: paramNames$9\r\n};\n\nvar validate$a = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var decimals = ref.decimals; if ( decimals === void 0 ) decimals = '*';\n  var separator = ref.separator; if ( separator === void 0 ) separator = '.';\n\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return validate$a(val, { decimals: decimals, separator: separator }); });\r\n  }\r\n\r\n  if (value === null || value === undefined || value === '') {\r\n    return false;\r\n  }\r\n\r\n  // if is 0.\r\n  if (Number(decimals) === 0) {\r\n    return /^-?\\d*$/.test(value);\r\n  }\r\n\r\n  var regexPart = decimals === '*' ? '+' : (\"{1,\" + decimals + \"}\");\r\n  var regex = new RegExp((\"^[-+]?\\\\d*(\\\\\" + separator + \"\\\\d\" + regexPart + \")?$\"));\r\n\r\n  if (! regex.test(value)) {\r\n    return false;\r\n  }\r\n\r\n  var parsedValue = parseFloat(value);\r\n\r\n  // eslint-disable-next-line\r\n    return parsedValue === parsedValue;\r\n};\r\n\r\nvar paramNames$a = ['decimals', 'separator'];\r\n\r\nvar decimal = {\r\n  validate: validate$a,\r\n  paramNames: paramNames$a\r\n};\n\nvar validate$b = function (value, ref) {\n  var length = ref[0];\n\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return validate$b(val, [length]); });\r\n  }\r\n  var strVal = String(value);\r\n\r\n  return /^[0-9]*$/.test(strVal) && strVal.length === Number(length);\r\n};\r\n\r\nvar digits = {\r\n  validate: validate$b\r\n};\n\nvar validateImage = function (file, width, height) {\r\n  var URL = window.URL || window.webkitURL;\r\n  return new Promise(function (resolve) {\r\n    var image = new Image();\r\n    image.onerror = function () { return resolve({ valid: false }); };\r\n    image.onload = function () { return resolve({\r\n      valid: image.width === Number(width) && image.height === Number(height)\r\n    }); };\r\n\r\n    image.src = URL.createObjectURL(file);\r\n  });\r\n};\r\n\r\nvar validate$c = function (files, ref) {\n  var width = ref[0];\n  var height = ref[1];\n\r\n  var list = [];\r\n  for (var i = 0; i < files.length; i++) {\r\n    // if file is not an image, reject.\r\n    if (! /\\.(jpg|svg|jpeg|png|bmp|gif)$/i.test(files[i].name)) {\r\n      return false;\r\n    }\r\n\r\n    list.push(files[i]);\r\n  }\r\n\r\n  return Promise.all(list.map(function (file) { return validateImage(file, width, height); }));\r\n};\r\n\r\nvar dimensions = {\r\n  validate: validate$c\r\n};\n\nvar merge_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = merge;\nfunction merge() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaults = arguments[1];\n\n  for (var key in defaults) {\n    if (typeof obj[key] === 'undefined') {\n      obj[key] = defaults[key];\n    }\n  }\n  return obj;\n}\nmodule.exports = exports['default'];\n});\n\nunwrapExports(merge_1);\n\nvar isByteLength_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = isByteLength;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable prefer-rest-params */\nfunction isByteLength(str, options) {\n  (0, _assertString2.default)(str);\n  var min = void 0;\n  var max = void 0;\n  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n    min = options.min || 0;\n    max = options.max;\n  } else {\n    // backwards compatibility: isByteLength(str, min [, max])\n    min = arguments[1];\n    max = arguments[2];\n  }\n  var len = encodeURI(str).split(/%..|./).length - 1;\n  return len >= min && (typeof max === 'undefined' || len <= max);\n}\nmodule.exports = exports['default'];\n});\n\nunwrapExports(isByteLength_1);\n\nvar isFQDN_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isFQDN;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\n\n\nvar _merge2 = _interopRequireDefault(merge_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_fqdn_options = {\n  require_tld: true,\n  allow_underscores: false,\n  allow_trailing_dot: false\n};\n\nfunction isFQDN(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_fqdn_options);\n\n  /* Remove the optional trailing dot before checking validity */\n  if (options.allow_trailing_dot && str[str.length - 1] === '.') {\n    str = str.substring(0, str.length - 1);\n  }\n  var parts = str.split('.');\n  for (var i = 0; i < parts.length; i++) {\n    if (parts[i].length > 63) {\n      return false;\n    }\n  }\n  if (options.require_tld) {\n    var tld = parts.pop();\n    if (!parts.length || !/^([a-z\\u00a1-\\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {\n      return false;\n    }\n    // disallow spaces\n    if (/[\\s\\u2002-\\u200B\\u202F\\u205F\\u3000\\uFEFF\\uDB40\\uDC20]/.test(tld)) {\n      return false;\n    }\n  }\n  for (var part, _i = 0; _i < parts.length; _i++) {\n    part = parts[_i];\n    if (options.allow_underscores) {\n      part = part.replace(/_/g, '');\n    }\n    if (!/^[a-z\\u00a1-\\uffff0-9-]+$/i.test(part)) {\n      return false;\n    }\n    // disallow full-width chars\n    if (/[\\uff01-\\uff5e]/.test(part)) {\n      return false;\n    }\n    if (part[0] === '-' || part[part.length - 1] === '-') {\n      return false;\n    }\n  }\n  return true;\n}\nmodule.exports = exports['default'];\n});\n\nunwrapExports(isFQDN_1);\n\nvar isIP_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIP;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ipv4Maybe = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\nvar ipv6Block = /^[0-9A-F]{1,4}$/i;\n\nfunction isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  (0, _assertString2.default)(str);\n  version = String(version);\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  } else if (version === '4') {\n    if (!ipv4Maybe.test(str)) {\n      return false;\n    }\n    var parts = str.split('.').sort(function (a, b) {\n      return a - b;\n    });\n    return parts[3] <= 255;\n  } else if (version === '6') {\n    var blocks = str.split(':');\n    var foundOmissionBlock = false; // marker to indicate ::\n\n    // At least some OS accept the last 32 bits of an IPv6 address\n    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says\n    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,\n    // and '::a.b.c.d' is deprecated, but also valid.\n    var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);\n    var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;\n\n    if (blocks.length > expectedNumberOfBlocks) {\n      return false;\n    }\n    // initial or final ::\n    if (str === '::') {\n      return true;\n    } else if (str.substr(0, 2) === '::') {\n      blocks.shift();\n      blocks.shift();\n      foundOmissionBlock = true;\n    } else if (str.substr(str.length - 2) === '::') {\n      blocks.pop();\n      blocks.pop();\n      foundOmissionBlock = true;\n    }\n\n    for (var i = 0; i < blocks.length; ++i) {\n      // test for a :: which can not be at the string start/end\n      // since those cases have been handled above\n      if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {\n        if (foundOmissionBlock) {\n          return false; // multiple :: in address\n        }\n        foundOmissionBlock = true;\n      } else if (foundIPv4TransitionBlock && i === blocks.length - 1) ; else if (!ipv6Block.test(blocks[i])) {\n        return false;\n      }\n    }\n    if (foundOmissionBlock) {\n      return blocks.length >= 1;\n    }\n    return blocks.length === expectedNumberOfBlocks;\n  }\n  return false;\n}\nmodule.exports = exports['default'];\n});\n\nvar isIP = unwrapExports(isIP_1);\n\nvar isEmail_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmail;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\n\n\nvar _merge2 = _interopRequireDefault(merge_1);\n\n\n\nvar _isByteLength2 = _interopRequireDefault(isByteLength_1);\n\n\n\nvar _isFQDN2 = _interopRequireDefault(isFQDN_1);\n\n\n\nvar _isIP2 = _interopRequireDefault(isIP_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_email_options = {\n  allow_display_name: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true\n};\n\n/* eslint-disable max-len */\n/* eslint-disable no-control-regex */\nvar displayName = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\.\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\,\\.\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\s]*<(.+)>$/i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar gmailUserPart = /^[a-z\\d]+$/;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\n/* eslint-enable max-len */\n/* eslint-enable no-control-regex */\n\nfunction isEmail(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_email_options);\n\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(displayName);\n    if (display_email) {\n      str = display_email[1];\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var user = parts.join('@');\n\n  var lower_domain = domain.toLowerCase();\n\n  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {\n    /*\n      Previously we removed dots for gmail addresses before validating.\n      This was removed because it allows `multiple..dots@gmail.com`\n      to be reported as valid, but it is not.\n      Gmail only normalizes single dots, removing them from here is pointless,\n      should be done in normalizeEmail\n    */\n    user = user.toLowerCase();\n\n    // Removing sub-address from username before gmail validation\n    var username = user.split('+')[0];\n\n    // Dots are not included in gmail length restriction\n    if (!(0, _isByteLength2.default)(username.replace('.', ''), { min: 6, max: 30 })) {\n      return false;\n    }\n\n    var _user_parts = username.split('.');\n    for (var i = 0; i < _user_parts.length; i++) {\n      if (!gmailUserPart.test(_user_parts[i])) {\n        return false;\n      }\n    }\n  }\n\n  if (!(0, _isByteLength2.default)(user, { max: 64 }) || !(0, _isByteLength2.default)(domain, { max: 254 })) {\n    return false;\n  }\n\n  if (!(0, _isFQDN2.default)(domain, { require_tld: options.require_tld })) {\n    if (!options.allow_ip_domain) {\n      return false;\n    }\n\n    if (!(0, _isIP2.default)(domain)) {\n      if (!domain.startsWith('[') || !domain.endsWith(']')) {\n        return false;\n      }\n\n      var noBracketdomain = domain.substr(1, domain.length - 2);\n\n      if (noBracketdomain.length === 0 || !(0, _isIP2.default)(noBracketdomain)) {\n        return false;\n      }\n    }\n  }\n\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n\n  var user_parts = user.split('.');\n  for (var _i = 0; _i < user_parts.length; _i++) {\n    if (!pattern.test(user_parts[_i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\nmodule.exports = exports['default'];\n});\n\nvar isEmail = unwrapExports(isEmail_1);\n\nvar validate$d = function (value, options) {\n  if ( options === void 0 ) options = {};\n\r\n  if (options.multiple) {\r\n    value = value.split(',').map(function (emailStr) { return emailStr.trim(); });\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return isEmail(String(val), options); });\r\n  }\r\n\r\n  return isEmail(String(value), options);\r\n};\r\n\r\nvar email = {\r\n  validate: validate$d\r\n};\n\nvar validate$e = function (value, options) {\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return validate$e(val, options); });\r\n  }\r\n\r\n  return toArray(options).some(function (item) {\r\n    // eslint-disable-next-line\r\n    return item == value;\r\n  });\r\n};\r\n\r\nvar included = {\r\n  validate: validate$e\r\n};\n\nvar validate$f = function () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\r\n  return !validate$e.apply(void 0, args);\r\n};\r\n\r\nvar excluded = {\r\n  validate: validate$f\r\n};\n\nvar validate$g = function (files, extensions) {\r\n  var regex = new RegExp((\".(\" + (extensions.join('|')) + \")$\"), 'i');\r\n\r\n  return files.every(function (file) { return regex.test(file.name); });\r\n};\r\n\r\nvar ext = {\r\n  validate: validate$g\r\n};\n\nvar validate$h = function (files) { return files.every(function (file) { return /\\.(jpg|svg|jpeg|png|bmp|gif)$/i.test(file.name); }); };\r\n\r\nvar image = {\r\n  validate: validate$h\r\n};\n\nvar validate$i = function (value) {\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return /^-?[0-9]+$/.test(String(val)); });\r\n  }\r\n\r\n  return /^-?[0-9]+$/.test(String(value));\r\n};\r\n\r\nvar integer = {\r\n  validate: validate$i\r\n};\n\nvar validate$j = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var version = ref.version; if ( version === void 0 ) version = 4;\n\r\n  if (isNullOrUndefined(value)) {\r\n    value = '';\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return isIP(val, version); });\r\n  }\r\n\r\n  return isIP(value, version);\r\n};\r\n\r\nvar paramNames$b = ['version'];\r\n\r\nvar ip = {\r\n  validate: validate$j,\r\n  paramNames: paramNames$b\r\n};\n\nvar validate$k = function (value, ref) {\n  if ( ref === void 0 ) ref = [];\n  var other = ref[0];\n\r\n  return value === other;\r\n};\r\n\r\nvar is = {\r\n  validate: validate$k\r\n};\n\nvar validate$l = function (value, ref) {\n  if ( ref === void 0 ) ref = [];\n  var other = ref[0];\n\r\n  return value !== other;\r\n};\r\n\r\nvar is_not = {\r\n  validate: validate$l\r\n};\n\n/**\r\n * @param {Array|String} value\r\n * @param {Number} length\r\n * @param {Number} max\r\n */\r\nvar compare = function (value, length, max) {\r\n  if (max === undefined) {\r\n    return value.length === length;\r\n  }\r\n\r\n  // cast to number.\r\n  max = Number(max);\r\n\r\n  return value.length >= length && value.length <= max;\r\n};\r\n\r\nvar validate$m = function (value, ref) {\n  var length = ref[0];\n  var max = ref[1]; if ( max === void 0 ) max = undefined;\n\r\n  length = Number(length);\r\n  if (value === undefined || value === null) {\r\n    return false;\r\n  }\r\n\r\n  if (typeof value === 'number') {\r\n    value = String(value);\r\n  }\r\n\r\n  if (!value.length) {\r\n    value = toArray(value);\r\n  }\r\n\r\n  return compare(value, length, max);\r\n};\r\n\r\nvar length = {\r\n  validate: validate$m\r\n};\n\nvar validate$n = function (value, ref) {\n  var length = ref[0];\n\r\n  if (value === undefined || value === null) {\r\n    return length >= 0;\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return validate$n(val, [length]); });\r\n  }\r\n\r\n  return String(value).length <= length;\r\n};\r\n\r\nvar max$1 = {\r\n  validate: validate$n\r\n};\n\nvar validate$o = function (value, ref) {\n  var max = ref[0];\n\r\n  if (value === null || value === undefined || value === '') {\r\n    return false;\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value.length > 0 && value.every(function (val) { return validate$o(val, [max]); });\r\n  }\r\n\r\n  return Number(value) <= max;\r\n};\r\n\r\nvar max_value = {\r\n  validate: validate$o\r\n};\n\nvar validate$p = function (files, mimes) {\r\n  var regex = new RegExp(((mimes.join('|').replace('*', '.+')) + \"$\"), 'i');\r\n\r\n  return files.every(function (file) { return regex.test(file.type); });\r\n};\r\n\r\nvar mimes = {\r\n  validate: validate$p\r\n};\n\nvar validate$q = function (value, ref) {\n  var length = ref[0];\n\r\n  if (value === undefined || value === null) {\r\n    return false;\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return validate$q(val, [length]); });\r\n  }\r\n\r\n  return String(value).length >= length;\r\n};\r\n\r\nvar min$1 = {\r\n  validate: validate$q\r\n};\n\nvar validate$r = function (value, ref) {\n  var min = ref[0];\n\r\n  if (value === null || value === undefined || value === '') {\r\n    return false;\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value.length > 0 && value.every(function (val) { return validate$r(val, [min]); });\r\n  }\r\n\r\n  return Number(value) >= min;\r\n};\r\n\r\nvar min_value = {\r\n  validate: validate$r\r\n};\n\nvar validate$s = function (value) {\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return /^[0-9]+$/.test(String(val)); });\r\n  }\r\n\r\n  return /^[0-9]+$/.test(String(value));\r\n};\r\n\r\nvar numeric = {\r\n  validate: validate$s\r\n};\n\nvar validate$t = function (value, ref) {\n  var expression = ref.expression;\n\r\n  if (typeof expression === 'string') {\r\n    expression = new RegExp(expression);\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return validate$t(val, { expression: expression }); });\r\n  }\r\n\r\n  return expression.test(String(value));\r\n};\r\n\r\nvar paramNames$c = ['expression'];\r\n\r\nvar regex = {\r\n  validate: validate$t,\r\n  paramNames: paramNames$c\r\n};\n\nvar validate$u = function (value, ref) {\n  if ( ref === void 0 ) ref = [];\n  var invalidateFalse = ref[0]; if ( invalidateFalse === void 0 ) invalidateFalse = false;\n\r\n  if (isEmptyArray(value)) {\r\n    return false;\r\n  }\r\n\r\n  // incase a field considers `false` as an empty value like checkboxes.\r\n  if (value === false && invalidateFalse) {\r\n    return false;\r\n  }\r\n\r\n  if (value === undefined || value === null) {\r\n    return false;\r\n  }\r\n\r\n  return !!String(value).trim().length;\r\n};\r\n\r\nvar required = {\r\n  validate: validate$u\r\n};\n\nvar validate$v = function (value, ref) {\n  if ( ref === void 0 ) ref = [];\n  var otherFieldVal = ref[0];\n  var possibleVals = ref.slice(1);\n\r\n  var required = possibleVals.includes(String(otherFieldVal).trim());\r\n\r\n  if (!required) {\r\n    return {\r\n      valid: true,\r\n      data: {\r\n        required: required\r\n      }\r\n    };\r\n  }\r\n\r\n  var invalid = (isEmptyArray(value) || [false, null, undefined].includes(value));\r\n\r\n  invalid = invalid || !String(value).trim().length;\r\n\r\n  return {\r\n    valid: !invalid,\r\n    data: {\r\n      required: required\r\n    }\r\n  };\r\n};\r\n\r\nvar options$5 = {\r\n  hasTarget: true,\r\n  computesRequired: true\r\n};\r\n\r\nvar required_if = {\r\n  validate: validate$v,\r\n  options: options$5\r\n};\n\nvar validate$w = function (files, ref) {\n  var size = ref[0];\n\r\n  if (isNaN(size)) {\r\n    return false;\r\n  }\r\n\r\n  var nSize = Number(size) * 1024;\r\n  for (var i = 0; i < files.length; i++) {\r\n    if (files[i].size > nSize) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nvar size = {\r\n  validate: validate$w\r\n};\n\nvar isURL_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isURL;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\n\n\nvar _isFQDN2 = _interopRequireDefault(isFQDN_1);\n\n\n\nvar _isIP2 = _interopRequireDefault(isIP_1);\n\n\n\nvar _merge2 = _interopRequireDefault(merge_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_url_options = {\n  protocols: ['http', 'https', 'ftp'],\n  require_tld: true,\n  require_protocol: false,\n  require_host: true,\n  require_valid_protocol: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n  allow_protocol_relative_urls: false\n};\n\nvar wrapped_ipv6 = /^\\[([^\\]]+)\\](?::([0-9]+))?$/;\n\nfunction isRegExp(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\n\nfunction checkHost(host, matches) {\n  for (var i = 0; i < matches.length; i++) {\n    var match = matches[i];\n    if (host === match || isRegExp(match) && match.test(host)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isURL(url, options) {\n  (0, _assertString2.default)(url);\n  if (!url || url.length >= 2083 || /[\\s<>]/.test(url)) {\n    return false;\n  }\n  if (url.indexOf('mailto:') === 0) {\n    return false;\n  }\n  options = (0, _merge2.default)(options, default_url_options);\n  var protocol = void 0,\n      auth = void 0,\n      host = void 0,\n      hostname = void 0,\n      port = void 0,\n      port_str = void 0,\n      split = void 0,\n      ipv6 = void 0;\n\n  split = url.split('#');\n  url = split.shift();\n\n  split = url.split('?');\n  url = split.shift();\n\n  split = url.split('://');\n  if (split.length > 1) {\n    protocol = split.shift().toLowerCase();\n    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {\n      return false;\n    }\n  } else if (options.require_protocol) {\n    return false;\n  } else if (url.substr(0, 2) === '//') {\n    if (!options.allow_protocol_relative_urls) {\n      return false;\n    }\n    split[0] = url.substr(2);\n  }\n  url = split.join('://');\n\n  if (url === '') {\n    return false;\n  }\n\n  split = url.split('/');\n  url = split.shift();\n\n  if (url === '' && !options.require_host) {\n    return true;\n  }\n\n  split = url.split('@');\n  if (split.length > 1) {\n    auth = split.shift();\n    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {\n      return false;\n    }\n  }\n  hostname = split.join('@');\n\n  port_str = null;\n  ipv6 = null;\n  var ipv6_match = hostname.match(wrapped_ipv6);\n  if (ipv6_match) {\n    host = '';\n    ipv6 = ipv6_match[1];\n    port_str = ipv6_match[2] || null;\n  } else {\n    split = hostname.split(':');\n    host = split.shift();\n    if (split.length) {\n      port_str = split.join(':');\n    }\n  }\n\n  if (port_str !== null) {\n    port = parseInt(port_str, 10);\n    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {\n      return false;\n    }\n  }\n\n  if (!(0, _isIP2.default)(host) && !(0, _isFQDN2.default)(host, options) && (!ipv6 || !(0, _isIP2.default)(ipv6, 6))) {\n    return false;\n  }\n\n  host = host || ipv6;\n\n  if (options.host_whitelist && !checkHost(host, options.host_whitelist)) {\n    return false;\n  }\n  if (options.host_blacklist && checkHost(host, options.host_blacklist)) {\n    return false;\n  }\n\n  return true;\n}\nmodule.exports = exports['default'];\n});\n\nvar isURL = unwrapExports(isURL_1);\n\nvar validate$x = function (value, options) {\n  if ( options === void 0 ) options = {};\n\r\n  if (isNullOrUndefined(value)) {\r\n    value = '';\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value.every(function (val) { return isURL(val, options); });\r\n  }\r\n\r\n  return isURL(value, options);\r\n};\r\n\r\nvar url = {\r\n  validate: validate$x\r\n};\n\n/* eslint-disable camelcase */\n\nvar Rules = /*#__PURE__*/Object.freeze({\n  after: after,\n  alpha_dash: alpha_dash,\n  alpha_num: alpha_num,\n  alpha_spaces: alpha_spaces,\n  alpha: alpha$1,\n  before: before,\n  between: between,\n  confirmed: confirmed,\n  credit_card: credit_card,\n  date_between: date_between,\n  date_format: date_format,\n  decimal: decimal,\n  digits: digits,\n  dimensions: dimensions,\n  email: email,\n  ext: ext,\n  image: image,\n  included: included,\n  integer: integer,\n  length: length,\n  ip: ip,\n  is_not: is_not,\n  is: is,\n  max: max$1,\n  max_value: max_value,\n  mimes: mimes,\n  min: min$1,\n  min_value: min_value,\n  excluded: excluded,\n  numeric: numeric,\n  regex: regex,\n  required: required,\n  required_if: required_if,\n  size: size,\n  url: url\n});\n\nvar version = '2.1.7';\r\n\r\nObject.keys(Rules).forEach(function (rule) {\r\n  Validator.extend(rule, Rules[rule].validate, assign({}, Rules[rule].options, { paramNames: Rules[rule].paramNames }));\r\n});\r\n\r\n// Merge the english messages.\r\nValidator.localize({ en: locale });\r\n\r\nvar install = VeeValidate$1.install;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (VeeValidate$1);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vee-validate/dist/vee-validate.esm.js\n");

/***/ })

}]);